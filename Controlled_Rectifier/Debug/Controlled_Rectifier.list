
Controlled_Rectifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d0c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e08  08004e08  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004e08  08004e08  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e08  08004e08  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000018  08004e28  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08004e28  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d691  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002334  00000000  00000000  0002d714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  0002fa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b25  00000000  00000000  000308b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017722  00000000  00000000  000313dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa5b  00000000  00000000  00048aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097f21  00000000  00000000  0005855a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003594  00000000  00000000  000f047c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000f3a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004db0 	.word	0x08004db0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	08004db0 	.word	0x08004db0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_cfrcmple>:
 800021c:	4684      	mov	ip, r0
 800021e:	0008      	movs	r0, r1
 8000220:	4661      	mov	r1, ip
 8000222:	e7ff      	b.n	8000224 <__aeabi_cfcmpeq>

08000224 <__aeabi_cfcmpeq>:
 8000224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000226:	f000 fa57 	bl	80006d8 <__lesf2>
 800022a:	2800      	cmp	r0, #0
 800022c:	d401      	bmi.n	8000232 <__aeabi_cfcmpeq+0xe>
 800022e:	2100      	movs	r1, #0
 8000230:	42c8      	cmn	r0, r1
 8000232:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000234 <__aeabi_fcmpeq>:
 8000234:	b510      	push	{r4, lr}
 8000236:	f000 f9e3 	bl	8000600 <__eqsf2>
 800023a:	4240      	negs	r0, r0
 800023c:	3001      	adds	r0, #1
 800023e:	bd10      	pop	{r4, pc}

08000240 <__aeabi_fcmplt>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fa49 	bl	80006d8 <__lesf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	db01      	blt.n	800024e <__aeabi_fcmplt+0xe>
 800024a:	2000      	movs	r0, #0
 800024c:	bd10      	pop	{r4, pc}
 800024e:	2001      	movs	r0, #1
 8000250:	bd10      	pop	{r4, pc}
 8000252:	46c0      	nop			; (mov r8, r8)

08000254 <__aeabi_fcmple>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 fa3f 	bl	80006d8 <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	dd01      	ble.n	8000262 <__aeabi_fcmple+0xe>
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	2001      	movs	r0, #1
 8000264:	bd10      	pop	{r4, pc}
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_fcmpgt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 f9ef 	bl	800064c <__gesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	dc01      	bgt.n	8000276 <__aeabi_fcmpgt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmpge>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 f9e5 	bl	800064c <__gesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	da01      	bge.n	800028a <__aeabi_fcmpge+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_f2uiz>:
 8000290:	219e      	movs	r1, #158	; 0x9e
 8000292:	b510      	push	{r4, lr}
 8000294:	05c9      	lsls	r1, r1, #23
 8000296:	1c04      	adds	r4, r0, #0
 8000298:	f7ff fff0 	bl	800027c <__aeabi_fcmpge>
 800029c:	2800      	cmp	r0, #0
 800029e:	d103      	bne.n	80002a8 <__aeabi_f2uiz+0x18>
 80002a0:	1c20      	adds	r0, r4, #0
 80002a2:	f000 fd4b 	bl	8000d3c <__aeabi_f2iz>
 80002a6:	bd10      	pop	{r4, pc}
 80002a8:	219e      	movs	r1, #158	; 0x9e
 80002aa:	1c20      	adds	r0, r4, #0
 80002ac:	05c9      	lsls	r1, r1, #23
 80002ae:	f000 fba5 	bl	80009fc <__aeabi_fsub>
 80002b2:	f000 fd43 	bl	8000d3c <__aeabi_f2iz>
 80002b6:	2380      	movs	r3, #128	; 0x80
 80002b8:	061b      	lsls	r3, r3, #24
 80002ba:	469c      	mov	ip, r3
 80002bc:	4460      	add	r0, ip
 80002be:	e7f2      	b.n	80002a6 <__aeabi_f2uiz+0x16>

080002c0 <__aeabi_fadd>:
 80002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c2:	4647      	mov	r7, r8
 80002c4:	46ce      	mov	lr, r9
 80002c6:	024a      	lsls	r2, r1, #9
 80002c8:	0243      	lsls	r3, r0, #9
 80002ca:	0045      	lsls	r5, r0, #1
 80002cc:	0fc4      	lsrs	r4, r0, #31
 80002ce:	0a50      	lsrs	r0, r2, #9
 80002d0:	4680      	mov	r8, r0
 80002d2:	0048      	lsls	r0, r1, #1
 80002d4:	0a5b      	lsrs	r3, r3, #9
 80002d6:	0e00      	lsrs	r0, r0, #24
 80002d8:	0992      	lsrs	r2, r2, #6
 80002da:	4694      	mov	ip, r2
 80002dc:	b580      	push	{r7, lr}
 80002de:	001e      	movs	r6, r3
 80002e0:	4681      	mov	r9, r0
 80002e2:	0002      	movs	r2, r0
 80002e4:	0e2d      	lsrs	r5, r5, #24
 80002e6:	00df      	lsls	r7, r3, #3
 80002e8:	0fc9      	lsrs	r1, r1, #31
 80002ea:	428c      	cmp	r4, r1
 80002ec:	d024      	beq.n	8000338 <__aeabi_fadd+0x78>
 80002ee:	1a28      	subs	r0, r5, r0
 80002f0:	2800      	cmp	r0, #0
 80002f2:	dd0e      	ble.n	8000312 <__aeabi_fadd+0x52>
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	d13e      	bne.n	8000376 <__aeabi_fadd+0xb6>
 80002f8:	4662      	mov	r2, ip
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d100      	bne.n	8000300 <__aeabi_fadd+0x40>
 80002fe:	e0fd      	b.n	80004fc <__aeabi_fadd+0x23c>
 8000300:	1e42      	subs	r2, r0, #1
 8000302:	2801      	cmp	r0, #1
 8000304:	d100      	bne.n	8000308 <__aeabi_fadd+0x48>
 8000306:	e137      	b.n	8000578 <__aeabi_fadd+0x2b8>
 8000308:	28ff      	cmp	r0, #255	; 0xff
 800030a:	d100      	bne.n	800030e <__aeabi_fadd+0x4e>
 800030c:	e0a9      	b.n	8000462 <__aeabi_fadd+0x1a2>
 800030e:	0010      	movs	r0, r2
 8000310:	e039      	b.n	8000386 <__aeabi_fadd+0xc6>
 8000312:	2800      	cmp	r0, #0
 8000314:	d063      	beq.n	80003de <__aeabi_fadd+0x11e>
 8000316:	464b      	mov	r3, r9
 8000318:	1b52      	subs	r2, r2, r5
 800031a:	2d00      	cmp	r5, #0
 800031c:	d000      	beq.n	8000320 <__aeabi_fadd+0x60>
 800031e:	e0e0      	b.n	80004e2 <__aeabi_fadd+0x222>
 8000320:	2f00      	cmp	r7, #0
 8000322:	d100      	bne.n	8000326 <__aeabi_fadd+0x66>
 8000324:	e0ce      	b.n	80004c4 <__aeabi_fadd+0x204>
 8000326:	1e53      	subs	r3, r2, #1
 8000328:	2a01      	cmp	r2, #1
 800032a:	d100      	bne.n	800032e <__aeabi_fadd+0x6e>
 800032c:	e155      	b.n	80005da <__aeabi_fadd+0x31a>
 800032e:	2aff      	cmp	r2, #255	; 0xff
 8000330:	d100      	bne.n	8000334 <__aeabi_fadd+0x74>
 8000332:	e094      	b.n	800045e <__aeabi_fadd+0x19e>
 8000334:	001a      	movs	r2, r3
 8000336:	e0d9      	b.n	80004ec <__aeabi_fadd+0x22c>
 8000338:	1a2a      	subs	r2, r5, r0
 800033a:	2a00      	cmp	r2, #0
 800033c:	dc00      	bgt.n	8000340 <__aeabi_fadd+0x80>
 800033e:	e099      	b.n	8000474 <__aeabi_fadd+0x1b4>
 8000340:	2800      	cmp	r0, #0
 8000342:	d062      	beq.n	800040a <__aeabi_fadd+0x14a>
 8000344:	2dff      	cmp	r5, #255	; 0xff
 8000346:	d100      	bne.n	800034a <__aeabi_fadd+0x8a>
 8000348:	e08b      	b.n	8000462 <__aeabi_fadd+0x1a2>
 800034a:	2380      	movs	r3, #128	; 0x80
 800034c:	4661      	mov	r1, ip
 800034e:	04db      	lsls	r3, r3, #19
 8000350:	4319      	orrs	r1, r3
 8000352:	468c      	mov	ip, r1
 8000354:	2a1b      	cmp	r2, #27
 8000356:	dc00      	bgt.n	800035a <__aeabi_fadd+0x9a>
 8000358:	e0d2      	b.n	8000500 <__aeabi_fadd+0x240>
 800035a:	2301      	movs	r3, #1
 800035c:	19db      	adds	r3, r3, r7
 800035e:	015a      	lsls	r2, r3, #5
 8000360:	d56a      	bpl.n	8000438 <__aeabi_fadd+0x178>
 8000362:	3501      	adds	r5, #1
 8000364:	2dff      	cmp	r5, #255	; 0xff
 8000366:	d05b      	beq.n	8000420 <__aeabi_fadd+0x160>
 8000368:	2201      	movs	r2, #1
 800036a:	49a3      	ldr	r1, [pc, #652]	; (80005f8 <__aeabi_fadd+0x338>)
 800036c:	401a      	ands	r2, r3
 800036e:	085b      	lsrs	r3, r3, #1
 8000370:	400b      	ands	r3, r1
 8000372:	4313      	orrs	r3, r2
 8000374:	e01c      	b.n	80003b0 <__aeabi_fadd+0xf0>
 8000376:	2dff      	cmp	r5, #255	; 0xff
 8000378:	d100      	bne.n	800037c <__aeabi_fadd+0xbc>
 800037a:	e072      	b.n	8000462 <__aeabi_fadd+0x1a2>
 800037c:	2380      	movs	r3, #128	; 0x80
 800037e:	4662      	mov	r2, ip
 8000380:	04db      	lsls	r3, r3, #19
 8000382:	431a      	orrs	r2, r3
 8000384:	4694      	mov	ip, r2
 8000386:	281b      	cmp	r0, #27
 8000388:	dc00      	bgt.n	800038c <__aeabi_fadd+0xcc>
 800038a:	e090      	b.n	80004ae <__aeabi_fadd+0x1ee>
 800038c:	2301      	movs	r3, #1
 800038e:	1afb      	subs	r3, r7, r3
 8000390:	015a      	lsls	r2, r3, #5
 8000392:	d551      	bpl.n	8000438 <__aeabi_fadd+0x178>
 8000394:	019b      	lsls	r3, r3, #6
 8000396:	099e      	lsrs	r6, r3, #6
 8000398:	0030      	movs	r0, r6
 800039a:	f000 fd89 	bl	8000eb0 <__clzsi2>
 800039e:	0033      	movs	r3, r6
 80003a0:	3805      	subs	r0, #5
 80003a2:	4083      	lsls	r3, r0
 80003a4:	4285      	cmp	r5, r0
 80003a6:	dc00      	bgt.n	80003aa <__aeabi_fadd+0xea>
 80003a8:	e075      	b.n	8000496 <__aeabi_fadd+0x1d6>
 80003aa:	4a94      	ldr	r2, [pc, #592]	; (80005fc <__aeabi_fadd+0x33c>)
 80003ac:	1a2d      	subs	r5, r5, r0
 80003ae:	4013      	ands	r3, r2
 80003b0:	075a      	lsls	r2, r3, #29
 80003b2:	d004      	beq.n	80003be <__aeabi_fadd+0xfe>
 80003b4:	220f      	movs	r2, #15
 80003b6:	401a      	ands	r2, r3
 80003b8:	2a04      	cmp	r2, #4
 80003ba:	d000      	beq.n	80003be <__aeabi_fadd+0xfe>
 80003bc:	3304      	adds	r3, #4
 80003be:	015a      	lsls	r2, r3, #5
 80003c0:	d53c      	bpl.n	800043c <__aeabi_fadd+0x17c>
 80003c2:	1c68      	adds	r0, r5, #1
 80003c4:	2dfe      	cmp	r5, #254	; 0xfe
 80003c6:	d02b      	beq.n	8000420 <__aeabi_fadd+0x160>
 80003c8:	019b      	lsls	r3, r3, #6
 80003ca:	0a5e      	lsrs	r6, r3, #9
 80003cc:	b2c0      	uxtb	r0, r0
 80003ce:	05c0      	lsls	r0, r0, #23
 80003d0:	4330      	orrs	r0, r6
 80003d2:	07e4      	lsls	r4, r4, #31
 80003d4:	4320      	orrs	r0, r4
 80003d6:	bcc0      	pop	{r6, r7}
 80003d8:	46b9      	mov	r9, r7
 80003da:	46b0      	mov	r8, r6
 80003dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003de:	20fe      	movs	r0, #254	; 0xfe
 80003e0:	1c6a      	adds	r2, r5, #1
 80003e2:	4210      	tst	r0, r2
 80003e4:	d172      	bne.n	80004cc <__aeabi_fadd+0x20c>
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d000      	beq.n	80003ec <__aeabi_fadd+0x12c>
 80003ea:	e0ae      	b.n	800054a <__aeabi_fadd+0x28a>
 80003ec:	2f00      	cmp	r7, #0
 80003ee:	d100      	bne.n	80003f2 <__aeabi_fadd+0x132>
 80003f0:	e0ec      	b.n	80005cc <__aeabi_fadd+0x30c>
 80003f2:	4663      	mov	r3, ip
 80003f4:	2000      	movs	r0, #0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0e9      	beq.n	80003ce <__aeabi_fadd+0x10e>
 80003fa:	1afb      	subs	r3, r7, r3
 80003fc:	015a      	lsls	r2, r3, #5
 80003fe:	d400      	bmi.n	8000402 <__aeabi_fadd+0x142>
 8000400:	e0f3      	b.n	80005ea <__aeabi_fadd+0x32a>
 8000402:	4663      	mov	r3, ip
 8000404:	000c      	movs	r4, r1
 8000406:	1bdb      	subs	r3, r3, r7
 8000408:	e7d2      	b.n	80003b0 <__aeabi_fadd+0xf0>
 800040a:	4661      	mov	r1, ip
 800040c:	2900      	cmp	r1, #0
 800040e:	d05b      	beq.n	80004c8 <__aeabi_fadd+0x208>
 8000410:	1e51      	subs	r1, r2, #1
 8000412:	2a01      	cmp	r2, #1
 8000414:	d100      	bne.n	8000418 <__aeabi_fadd+0x158>
 8000416:	e0a7      	b.n	8000568 <__aeabi_fadd+0x2a8>
 8000418:	2aff      	cmp	r2, #255	; 0xff
 800041a:	d022      	beq.n	8000462 <__aeabi_fadd+0x1a2>
 800041c:	000a      	movs	r2, r1
 800041e:	e799      	b.n	8000354 <__aeabi_fadd+0x94>
 8000420:	20ff      	movs	r0, #255	; 0xff
 8000422:	2600      	movs	r6, #0
 8000424:	e7d3      	b.n	80003ce <__aeabi_fadd+0x10e>
 8000426:	21fe      	movs	r1, #254	; 0xfe
 8000428:	1c6a      	adds	r2, r5, #1
 800042a:	4211      	tst	r1, r2
 800042c:	d073      	beq.n	8000516 <__aeabi_fadd+0x256>
 800042e:	2aff      	cmp	r2, #255	; 0xff
 8000430:	d0f6      	beq.n	8000420 <__aeabi_fadd+0x160>
 8000432:	0015      	movs	r5, r2
 8000434:	4467      	add	r7, ip
 8000436:	087b      	lsrs	r3, r7, #1
 8000438:	075a      	lsls	r2, r3, #29
 800043a:	d1bb      	bne.n	80003b4 <__aeabi_fadd+0xf4>
 800043c:	08db      	lsrs	r3, r3, #3
 800043e:	2dff      	cmp	r5, #255	; 0xff
 8000440:	d00f      	beq.n	8000462 <__aeabi_fadd+0x1a2>
 8000442:	025b      	lsls	r3, r3, #9
 8000444:	0a5e      	lsrs	r6, r3, #9
 8000446:	b2e8      	uxtb	r0, r5
 8000448:	e7c1      	b.n	80003ce <__aeabi_fadd+0x10e>
 800044a:	4662      	mov	r2, ip
 800044c:	2a00      	cmp	r2, #0
 800044e:	d008      	beq.n	8000462 <__aeabi_fadd+0x1a2>
 8000450:	2280      	movs	r2, #128	; 0x80
 8000452:	03d2      	lsls	r2, r2, #15
 8000454:	4213      	tst	r3, r2
 8000456:	d004      	beq.n	8000462 <__aeabi_fadd+0x1a2>
 8000458:	4640      	mov	r0, r8
 800045a:	4210      	tst	r0, r2
 800045c:	d101      	bne.n	8000462 <__aeabi_fadd+0x1a2>
 800045e:	000c      	movs	r4, r1
 8000460:	4643      	mov	r3, r8
 8000462:	2b00      	cmp	r3, #0
 8000464:	d0dc      	beq.n	8000420 <__aeabi_fadd+0x160>
 8000466:	2680      	movs	r6, #128	; 0x80
 8000468:	03f6      	lsls	r6, r6, #15
 800046a:	431e      	orrs	r6, r3
 800046c:	0276      	lsls	r6, r6, #9
 800046e:	20ff      	movs	r0, #255	; 0xff
 8000470:	0a76      	lsrs	r6, r6, #9
 8000472:	e7ac      	b.n	80003ce <__aeabi_fadd+0x10e>
 8000474:	2a00      	cmp	r2, #0
 8000476:	d0d6      	beq.n	8000426 <__aeabi_fadd+0x166>
 8000478:	1b42      	subs	r2, r0, r5
 800047a:	2d00      	cmp	r5, #0
 800047c:	d05c      	beq.n	8000538 <__aeabi_fadd+0x278>
 800047e:	28ff      	cmp	r0, #255	; 0xff
 8000480:	d0ee      	beq.n	8000460 <__aeabi_fadd+0x1a0>
 8000482:	2380      	movs	r3, #128	; 0x80
 8000484:	04db      	lsls	r3, r3, #19
 8000486:	431f      	orrs	r7, r3
 8000488:	2a1b      	cmp	r2, #27
 800048a:	dc00      	bgt.n	800048e <__aeabi_fadd+0x1ce>
 800048c:	e082      	b.n	8000594 <__aeabi_fadd+0x2d4>
 800048e:	2301      	movs	r3, #1
 8000490:	464d      	mov	r5, r9
 8000492:	4463      	add	r3, ip
 8000494:	e763      	b.n	800035e <__aeabi_fadd+0x9e>
 8000496:	2220      	movs	r2, #32
 8000498:	1b40      	subs	r0, r0, r5
 800049a:	3001      	adds	r0, #1
 800049c:	1a12      	subs	r2, r2, r0
 800049e:	0019      	movs	r1, r3
 80004a0:	4093      	lsls	r3, r2
 80004a2:	40c1      	lsrs	r1, r0
 80004a4:	1e5a      	subs	r2, r3, #1
 80004a6:	4193      	sbcs	r3, r2
 80004a8:	2500      	movs	r5, #0
 80004aa:	430b      	orrs	r3, r1
 80004ac:	e780      	b.n	80003b0 <__aeabi_fadd+0xf0>
 80004ae:	2320      	movs	r3, #32
 80004b0:	4661      	mov	r1, ip
 80004b2:	1a1b      	subs	r3, r3, r0
 80004b4:	4099      	lsls	r1, r3
 80004b6:	4662      	mov	r2, ip
 80004b8:	000b      	movs	r3, r1
 80004ba:	40c2      	lsrs	r2, r0
 80004bc:	1e59      	subs	r1, r3, #1
 80004be:	418b      	sbcs	r3, r1
 80004c0:	4313      	orrs	r3, r2
 80004c2:	e764      	b.n	800038e <__aeabi_fadd+0xce>
 80004c4:	000c      	movs	r4, r1
 80004c6:	4643      	mov	r3, r8
 80004c8:	0015      	movs	r5, r2
 80004ca:	e7b8      	b.n	800043e <__aeabi_fadd+0x17e>
 80004cc:	4663      	mov	r3, ip
 80004ce:	1afe      	subs	r6, r7, r3
 80004d0:	0173      	lsls	r3, r6, #5
 80004d2:	d445      	bmi.n	8000560 <__aeabi_fadd+0x2a0>
 80004d4:	2e00      	cmp	r6, #0
 80004d6:	d000      	beq.n	80004da <__aeabi_fadd+0x21a>
 80004d8:	e75e      	b.n	8000398 <__aeabi_fadd+0xd8>
 80004da:	2400      	movs	r4, #0
 80004dc:	2000      	movs	r0, #0
 80004de:	2600      	movs	r6, #0
 80004e0:	e775      	b.n	80003ce <__aeabi_fadd+0x10e>
 80004e2:	2bff      	cmp	r3, #255	; 0xff
 80004e4:	d0bb      	beq.n	800045e <__aeabi_fadd+0x19e>
 80004e6:	2380      	movs	r3, #128	; 0x80
 80004e8:	04db      	lsls	r3, r3, #19
 80004ea:	431f      	orrs	r7, r3
 80004ec:	2a1b      	cmp	r2, #27
 80004ee:	dd47      	ble.n	8000580 <__aeabi_fadd+0x2c0>
 80004f0:	2301      	movs	r3, #1
 80004f2:	4662      	mov	r2, ip
 80004f4:	000c      	movs	r4, r1
 80004f6:	464d      	mov	r5, r9
 80004f8:	1ad3      	subs	r3, r2, r3
 80004fa:	e749      	b.n	8000390 <__aeabi_fadd+0xd0>
 80004fc:	0005      	movs	r5, r0
 80004fe:	e79e      	b.n	800043e <__aeabi_fadd+0x17e>
 8000500:	4661      	mov	r1, ip
 8000502:	2320      	movs	r3, #32
 8000504:	40d1      	lsrs	r1, r2
 8000506:	1a9b      	subs	r3, r3, r2
 8000508:	4662      	mov	r2, ip
 800050a:	409a      	lsls	r2, r3
 800050c:	0013      	movs	r3, r2
 800050e:	1e5a      	subs	r2, r3, #1
 8000510:	4193      	sbcs	r3, r2
 8000512:	430b      	orrs	r3, r1
 8000514:	e722      	b.n	800035c <__aeabi_fadd+0x9c>
 8000516:	2d00      	cmp	r5, #0
 8000518:	d146      	bne.n	80005a8 <__aeabi_fadd+0x2e8>
 800051a:	2f00      	cmp	r7, #0
 800051c:	d062      	beq.n	80005e4 <__aeabi_fadd+0x324>
 800051e:	4663      	mov	r3, ip
 8000520:	2000      	movs	r0, #0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d100      	bne.n	8000528 <__aeabi_fadd+0x268>
 8000526:	e752      	b.n	80003ce <__aeabi_fadd+0x10e>
 8000528:	003b      	movs	r3, r7
 800052a:	4463      	add	r3, ip
 800052c:	015a      	lsls	r2, r3, #5
 800052e:	d583      	bpl.n	8000438 <__aeabi_fadd+0x178>
 8000530:	4a32      	ldr	r2, [pc, #200]	; (80005fc <__aeabi_fadd+0x33c>)
 8000532:	3501      	adds	r5, #1
 8000534:	4013      	ands	r3, r2
 8000536:	e77f      	b.n	8000438 <__aeabi_fadd+0x178>
 8000538:	2f00      	cmp	r7, #0
 800053a:	d0c4      	beq.n	80004c6 <__aeabi_fadd+0x206>
 800053c:	1e53      	subs	r3, r2, #1
 800053e:	2a01      	cmp	r2, #1
 8000540:	d012      	beq.n	8000568 <__aeabi_fadd+0x2a8>
 8000542:	2aff      	cmp	r2, #255	; 0xff
 8000544:	d08c      	beq.n	8000460 <__aeabi_fadd+0x1a0>
 8000546:	001a      	movs	r2, r3
 8000548:	e79e      	b.n	8000488 <__aeabi_fadd+0x1c8>
 800054a:	2f00      	cmp	r7, #0
 800054c:	d000      	beq.n	8000550 <__aeabi_fadd+0x290>
 800054e:	e77c      	b.n	800044a <__aeabi_fadd+0x18a>
 8000550:	4663      	mov	r3, ip
 8000552:	2b00      	cmp	r3, #0
 8000554:	d183      	bne.n	800045e <__aeabi_fadd+0x19e>
 8000556:	2680      	movs	r6, #128	; 0x80
 8000558:	2400      	movs	r4, #0
 800055a:	20ff      	movs	r0, #255	; 0xff
 800055c:	03f6      	lsls	r6, r6, #15
 800055e:	e736      	b.n	80003ce <__aeabi_fadd+0x10e>
 8000560:	4663      	mov	r3, ip
 8000562:	000c      	movs	r4, r1
 8000564:	1bde      	subs	r6, r3, r7
 8000566:	e717      	b.n	8000398 <__aeabi_fadd+0xd8>
 8000568:	003b      	movs	r3, r7
 800056a:	4463      	add	r3, ip
 800056c:	2501      	movs	r5, #1
 800056e:	015a      	lsls	r2, r3, #5
 8000570:	d400      	bmi.n	8000574 <__aeabi_fadd+0x2b4>
 8000572:	e761      	b.n	8000438 <__aeabi_fadd+0x178>
 8000574:	2502      	movs	r5, #2
 8000576:	e6f7      	b.n	8000368 <__aeabi_fadd+0xa8>
 8000578:	4663      	mov	r3, ip
 800057a:	2501      	movs	r5, #1
 800057c:	1afb      	subs	r3, r7, r3
 800057e:	e707      	b.n	8000390 <__aeabi_fadd+0xd0>
 8000580:	2320      	movs	r3, #32
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	0038      	movs	r0, r7
 8000586:	409f      	lsls	r7, r3
 8000588:	003b      	movs	r3, r7
 800058a:	40d0      	lsrs	r0, r2
 800058c:	1e5a      	subs	r2, r3, #1
 800058e:	4193      	sbcs	r3, r2
 8000590:	4303      	orrs	r3, r0
 8000592:	e7ae      	b.n	80004f2 <__aeabi_fadd+0x232>
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	0039      	movs	r1, r7
 800059a:	409f      	lsls	r7, r3
 800059c:	003b      	movs	r3, r7
 800059e:	40d1      	lsrs	r1, r2
 80005a0:	1e5a      	subs	r2, r3, #1
 80005a2:	4193      	sbcs	r3, r2
 80005a4:	430b      	orrs	r3, r1
 80005a6:	e773      	b.n	8000490 <__aeabi_fadd+0x1d0>
 80005a8:	2f00      	cmp	r7, #0
 80005aa:	d100      	bne.n	80005ae <__aeabi_fadd+0x2ee>
 80005ac:	e758      	b.n	8000460 <__aeabi_fadd+0x1a0>
 80005ae:	4662      	mov	r2, ip
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fadd+0x2f6>
 80005b4:	e755      	b.n	8000462 <__aeabi_fadd+0x1a2>
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	03d2      	lsls	r2, r2, #15
 80005ba:	4213      	tst	r3, r2
 80005bc:	d100      	bne.n	80005c0 <__aeabi_fadd+0x300>
 80005be:	e750      	b.n	8000462 <__aeabi_fadd+0x1a2>
 80005c0:	4641      	mov	r1, r8
 80005c2:	4211      	tst	r1, r2
 80005c4:	d000      	beq.n	80005c8 <__aeabi_fadd+0x308>
 80005c6:	e74c      	b.n	8000462 <__aeabi_fadd+0x1a2>
 80005c8:	4643      	mov	r3, r8
 80005ca:	e74a      	b.n	8000462 <__aeabi_fadd+0x1a2>
 80005cc:	4663      	mov	r3, ip
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d083      	beq.n	80004da <__aeabi_fadd+0x21a>
 80005d2:	000c      	movs	r4, r1
 80005d4:	4646      	mov	r6, r8
 80005d6:	2000      	movs	r0, #0
 80005d8:	e6f9      	b.n	80003ce <__aeabi_fadd+0x10e>
 80005da:	4663      	mov	r3, ip
 80005dc:	000c      	movs	r4, r1
 80005de:	1bdb      	subs	r3, r3, r7
 80005e0:	3501      	adds	r5, #1
 80005e2:	e6d5      	b.n	8000390 <__aeabi_fadd+0xd0>
 80005e4:	4646      	mov	r6, r8
 80005e6:	2000      	movs	r0, #0
 80005e8:	e6f1      	b.n	80003ce <__aeabi_fadd+0x10e>
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d000      	beq.n	80005f0 <__aeabi_fadd+0x330>
 80005ee:	e723      	b.n	8000438 <__aeabi_fadd+0x178>
 80005f0:	2400      	movs	r4, #0
 80005f2:	2600      	movs	r6, #0
 80005f4:	e6eb      	b.n	80003ce <__aeabi_fadd+0x10e>
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	7dffffff 	.word	0x7dffffff
 80005fc:	fbffffff 	.word	0xfbffffff

08000600 <__eqsf2>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	0042      	lsls	r2, r0, #1
 8000604:	0245      	lsls	r5, r0, #9
 8000606:	024e      	lsls	r6, r1, #9
 8000608:	004c      	lsls	r4, r1, #1
 800060a:	0fc3      	lsrs	r3, r0, #31
 800060c:	0a6d      	lsrs	r5, r5, #9
 800060e:	2001      	movs	r0, #1
 8000610:	0e12      	lsrs	r2, r2, #24
 8000612:	0a76      	lsrs	r6, r6, #9
 8000614:	0e24      	lsrs	r4, r4, #24
 8000616:	0fc9      	lsrs	r1, r1, #31
 8000618:	2aff      	cmp	r2, #255	; 0xff
 800061a:	d006      	beq.n	800062a <__eqsf2+0x2a>
 800061c:	2cff      	cmp	r4, #255	; 0xff
 800061e:	d003      	beq.n	8000628 <__eqsf2+0x28>
 8000620:	42a2      	cmp	r2, r4
 8000622:	d101      	bne.n	8000628 <__eqsf2+0x28>
 8000624:	42b5      	cmp	r5, r6
 8000626:	d006      	beq.n	8000636 <__eqsf2+0x36>
 8000628:	bd70      	pop	{r4, r5, r6, pc}
 800062a:	2d00      	cmp	r5, #0
 800062c:	d1fc      	bne.n	8000628 <__eqsf2+0x28>
 800062e:	2cff      	cmp	r4, #255	; 0xff
 8000630:	d1fa      	bne.n	8000628 <__eqsf2+0x28>
 8000632:	2e00      	cmp	r6, #0
 8000634:	d1f8      	bne.n	8000628 <__eqsf2+0x28>
 8000636:	428b      	cmp	r3, r1
 8000638:	d006      	beq.n	8000648 <__eqsf2+0x48>
 800063a:	2001      	movs	r0, #1
 800063c:	2a00      	cmp	r2, #0
 800063e:	d1f3      	bne.n	8000628 <__eqsf2+0x28>
 8000640:	0028      	movs	r0, r5
 8000642:	1e43      	subs	r3, r0, #1
 8000644:	4198      	sbcs	r0, r3
 8000646:	e7ef      	b.n	8000628 <__eqsf2+0x28>
 8000648:	2000      	movs	r0, #0
 800064a:	e7ed      	b.n	8000628 <__eqsf2+0x28>

0800064c <__gesf2>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	0042      	lsls	r2, r0, #1
 8000650:	0245      	lsls	r5, r0, #9
 8000652:	024e      	lsls	r6, r1, #9
 8000654:	004c      	lsls	r4, r1, #1
 8000656:	0fc3      	lsrs	r3, r0, #31
 8000658:	0a6d      	lsrs	r5, r5, #9
 800065a:	0e12      	lsrs	r2, r2, #24
 800065c:	0a76      	lsrs	r6, r6, #9
 800065e:	0e24      	lsrs	r4, r4, #24
 8000660:	0fc8      	lsrs	r0, r1, #31
 8000662:	2aff      	cmp	r2, #255	; 0xff
 8000664:	d01b      	beq.n	800069e <__gesf2+0x52>
 8000666:	2cff      	cmp	r4, #255	; 0xff
 8000668:	d00e      	beq.n	8000688 <__gesf2+0x3c>
 800066a:	2a00      	cmp	r2, #0
 800066c:	d11b      	bne.n	80006a6 <__gesf2+0x5a>
 800066e:	2c00      	cmp	r4, #0
 8000670:	d101      	bne.n	8000676 <__gesf2+0x2a>
 8000672:	2e00      	cmp	r6, #0
 8000674:	d01c      	beq.n	80006b0 <__gesf2+0x64>
 8000676:	2d00      	cmp	r5, #0
 8000678:	d00c      	beq.n	8000694 <__gesf2+0x48>
 800067a:	4283      	cmp	r3, r0
 800067c:	d01c      	beq.n	80006b8 <__gesf2+0x6c>
 800067e:	2102      	movs	r1, #2
 8000680:	1e58      	subs	r0, r3, #1
 8000682:	4008      	ands	r0, r1
 8000684:	3801      	subs	r0, #1
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	2e00      	cmp	r6, #0
 800068a:	d122      	bne.n	80006d2 <__gesf2+0x86>
 800068c:	2a00      	cmp	r2, #0
 800068e:	d1f4      	bne.n	800067a <__gesf2+0x2e>
 8000690:	2d00      	cmp	r5, #0
 8000692:	d1f2      	bne.n	800067a <__gesf2+0x2e>
 8000694:	2800      	cmp	r0, #0
 8000696:	d1f6      	bne.n	8000686 <__gesf2+0x3a>
 8000698:	2001      	movs	r0, #1
 800069a:	4240      	negs	r0, r0
 800069c:	e7f3      	b.n	8000686 <__gesf2+0x3a>
 800069e:	2d00      	cmp	r5, #0
 80006a0:	d117      	bne.n	80006d2 <__gesf2+0x86>
 80006a2:	2cff      	cmp	r4, #255	; 0xff
 80006a4:	d0f0      	beq.n	8000688 <__gesf2+0x3c>
 80006a6:	2c00      	cmp	r4, #0
 80006a8:	d1e7      	bne.n	800067a <__gesf2+0x2e>
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d1e5      	bne.n	800067a <__gesf2+0x2e>
 80006ae:	e7e6      	b.n	800067e <__gesf2+0x32>
 80006b0:	2000      	movs	r0, #0
 80006b2:	2d00      	cmp	r5, #0
 80006b4:	d0e7      	beq.n	8000686 <__gesf2+0x3a>
 80006b6:	e7e2      	b.n	800067e <__gesf2+0x32>
 80006b8:	42a2      	cmp	r2, r4
 80006ba:	dc05      	bgt.n	80006c8 <__gesf2+0x7c>
 80006bc:	dbea      	blt.n	8000694 <__gesf2+0x48>
 80006be:	42b5      	cmp	r5, r6
 80006c0:	d802      	bhi.n	80006c8 <__gesf2+0x7c>
 80006c2:	d3e7      	bcc.n	8000694 <__gesf2+0x48>
 80006c4:	2000      	movs	r0, #0
 80006c6:	e7de      	b.n	8000686 <__gesf2+0x3a>
 80006c8:	4243      	negs	r3, r0
 80006ca:	4158      	adcs	r0, r3
 80006cc:	0040      	lsls	r0, r0, #1
 80006ce:	3801      	subs	r0, #1
 80006d0:	e7d9      	b.n	8000686 <__gesf2+0x3a>
 80006d2:	2002      	movs	r0, #2
 80006d4:	4240      	negs	r0, r0
 80006d6:	e7d6      	b.n	8000686 <__gesf2+0x3a>

080006d8 <__lesf2>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	0042      	lsls	r2, r0, #1
 80006dc:	0245      	lsls	r5, r0, #9
 80006de:	024e      	lsls	r6, r1, #9
 80006e0:	004c      	lsls	r4, r1, #1
 80006e2:	0fc3      	lsrs	r3, r0, #31
 80006e4:	0a6d      	lsrs	r5, r5, #9
 80006e6:	0e12      	lsrs	r2, r2, #24
 80006e8:	0a76      	lsrs	r6, r6, #9
 80006ea:	0e24      	lsrs	r4, r4, #24
 80006ec:	0fc8      	lsrs	r0, r1, #31
 80006ee:	2aff      	cmp	r2, #255	; 0xff
 80006f0:	d00b      	beq.n	800070a <__lesf2+0x32>
 80006f2:	2cff      	cmp	r4, #255	; 0xff
 80006f4:	d00d      	beq.n	8000712 <__lesf2+0x3a>
 80006f6:	2a00      	cmp	r2, #0
 80006f8:	d11f      	bne.n	800073a <__lesf2+0x62>
 80006fa:	2c00      	cmp	r4, #0
 80006fc:	d116      	bne.n	800072c <__lesf2+0x54>
 80006fe:	2e00      	cmp	r6, #0
 8000700:	d114      	bne.n	800072c <__lesf2+0x54>
 8000702:	2000      	movs	r0, #0
 8000704:	2d00      	cmp	r5, #0
 8000706:	d010      	beq.n	800072a <__lesf2+0x52>
 8000708:	e009      	b.n	800071e <__lesf2+0x46>
 800070a:	2d00      	cmp	r5, #0
 800070c:	d10c      	bne.n	8000728 <__lesf2+0x50>
 800070e:	2cff      	cmp	r4, #255	; 0xff
 8000710:	d113      	bne.n	800073a <__lesf2+0x62>
 8000712:	2e00      	cmp	r6, #0
 8000714:	d108      	bne.n	8000728 <__lesf2+0x50>
 8000716:	2a00      	cmp	r2, #0
 8000718:	d008      	beq.n	800072c <__lesf2+0x54>
 800071a:	4283      	cmp	r3, r0
 800071c:	d012      	beq.n	8000744 <__lesf2+0x6c>
 800071e:	2102      	movs	r1, #2
 8000720:	1e58      	subs	r0, r3, #1
 8000722:	4008      	ands	r0, r1
 8000724:	3801      	subs	r0, #1
 8000726:	e000      	b.n	800072a <__lesf2+0x52>
 8000728:	2002      	movs	r0, #2
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	2d00      	cmp	r5, #0
 800072e:	d1f4      	bne.n	800071a <__lesf2+0x42>
 8000730:	2800      	cmp	r0, #0
 8000732:	d1fa      	bne.n	800072a <__lesf2+0x52>
 8000734:	2001      	movs	r0, #1
 8000736:	4240      	negs	r0, r0
 8000738:	e7f7      	b.n	800072a <__lesf2+0x52>
 800073a:	2c00      	cmp	r4, #0
 800073c:	d1ed      	bne.n	800071a <__lesf2+0x42>
 800073e:	2e00      	cmp	r6, #0
 8000740:	d1eb      	bne.n	800071a <__lesf2+0x42>
 8000742:	e7ec      	b.n	800071e <__lesf2+0x46>
 8000744:	42a2      	cmp	r2, r4
 8000746:	dc05      	bgt.n	8000754 <__lesf2+0x7c>
 8000748:	dbf2      	blt.n	8000730 <__lesf2+0x58>
 800074a:	42b5      	cmp	r5, r6
 800074c:	d802      	bhi.n	8000754 <__lesf2+0x7c>
 800074e:	d3ef      	bcc.n	8000730 <__lesf2+0x58>
 8000750:	2000      	movs	r0, #0
 8000752:	e7ea      	b.n	800072a <__lesf2+0x52>
 8000754:	4243      	negs	r3, r0
 8000756:	4158      	adcs	r0, r3
 8000758:	0040      	lsls	r0, r0, #1
 800075a:	3801      	subs	r0, #1
 800075c:	e7e5      	b.n	800072a <__lesf2+0x52>
 800075e:	46c0      	nop			; (mov r8, r8)

08000760 <__aeabi_fmul>:
 8000760:	0243      	lsls	r3, r0, #9
 8000762:	0a5b      	lsrs	r3, r3, #9
 8000764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000766:	464f      	mov	r7, r9
 8000768:	4646      	mov	r6, r8
 800076a:	4699      	mov	r9, r3
 800076c:	46d6      	mov	lr, sl
 800076e:	0fc3      	lsrs	r3, r0, #31
 8000770:	0045      	lsls	r5, r0, #1
 8000772:	4698      	mov	r8, r3
 8000774:	b5c0      	push	{r6, r7, lr}
 8000776:	464b      	mov	r3, r9
 8000778:	1c0f      	adds	r7, r1, #0
 800077a:	0e2d      	lsrs	r5, r5, #24
 800077c:	d100      	bne.n	8000780 <__aeabi_fmul+0x20>
 800077e:	e0cb      	b.n	8000918 <__aeabi_fmul+0x1b8>
 8000780:	2dff      	cmp	r5, #255	; 0xff
 8000782:	d100      	bne.n	8000786 <__aeabi_fmul+0x26>
 8000784:	e0cf      	b.n	8000926 <__aeabi_fmul+0x1c6>
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	04d2      	lsls	r2, r2, #19
 800078c:	431a      	orrs	r2, r3
 800078e:	2300      	movs	r3, #0
 8000790:	4691      	mov	r9, r2
 8000792:	2600      	movs	r6, #0
 8000794:	469a      	mov	sl, r3
 8000796:	3d7f      	subs	r5, #127	; 0x7f
 8000798:	027c      	lsls	r4, r7, #9
 800079a:	007b      	lsls	r3, r7, #1
 800079c:	0a64      	lsrs	r4, r4, #9
 800079e:	0e1b      	lsrs	r3, r3, #24
 80007a0:	0fff      	lsrs	r7, r7, #31
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fmul+0x48>
 80007a6:	e0a9      	b.n	80008fc <__aeabi_fmul+0x19c>
 80007a8:	2bff      	cmp	r3, #255	; 0xff
 80007aa:	d011      	beq.n	80007d0 <__aeabi_fmul+0x70>
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	00e4      	lsls	r4, r4, #3
 80007b0:	04d2      	lsls	r2, r2, #19
 80007b2:	4314      	orrs	r4, r2
 80007b4:	4642      	mov	r2, r8
 80007b6:	3b7f      	subs	r3, #127	; 0x7f
 80007b8:	195b      	adds	r3, r3, r5
 80007ba:	407a      	eors	r2, r7
 80007bc:	2000      	movs	r0, #0
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	1c5d      	adds	r5, r3, #1
 80007c2:	2e0a      	cmp	r6, #10
 80007c4:	dd13      	ble.n	80007ee <__aeabi_fmul+0x8e>
 80007c6:	003a      	movs	r2, r7
 80007c8:	2e0b      	cmp	r6, #11
 80007ca:	d047      	beq.n	800085c <__aeabi_fmul+0xfc>
 80007cc:	4647      	mov	r7, r8
 80007ce:	e03f      	b.n	8000850 <__aeabi_fmul+0xf0>
 80007d0:	002b      	movs	r3, r5
 80007d2:	33ff      	adds	r3, #255	; 0xff
 80007d4:	2c00      	cmp	r4, #0
 80007d6:	d11e      	bne.n	8000816 <__aeabi_fmul+0xb6>
 80007d8:	2202      	movs	r2, #2
 80007da:	4316      	orrs	r6, r2
 80007dc:	4642      	mov	r2, r8
 80007de:	3501      	adds	r5, #1
 80007e0:	407a      	eors	r2, r7
 80007e2:	b2d2      	uxtb	r2, r2
 80007e4:	35ff      	adds	r5, #255	; 0xff
 80007e6:	2e0a      	cmp	r6, #10
 80007e8:	dd00      	ble.n	80007ec <__aeabi_fmul+0x8c>
 80007ea:	e0e4      	b.n	80009b6 <__aeabi_fmul+0x256>
 80007ec:	2002      	movs	r0, #2
 80007ee:	2e02      	cmp	r6, #2
 80007f0:	dc1c      	bgt.n	800082c <__aeabi_fmul+0xcc>
 80007f2:	3e01      	subs	r6, #1
 80007f4:	2e01      	cmp	r6, #1
 80007f6:	d842      	bhi.n	800087e <__aeabi_fmul+0x11e>
 80007f8:	2802      	cmp	r0, #2
 80007fa:	d03d      	beq.n	8000878 <__aeabi_fmul+0x118>
 80007fc:	2801      	cmp	r0, #1
 80007fe:	d166      	bne.n	80008ce <__aeabi_fmul+0x16e>
 8000800:	2000      	movs	r0, #0
 8000802:	2100      	movs	r1, #0
 8000804:	05c0      	lsls	r0, r0, #23
 8000806:	4308      	orrs	r0, r1
 8000808:	07d2      	lsls	r2, r2, #31
 800080a:	4310      	orrs	r0, r2
 800080c:	bce0      	pop	{r5, r6, r7}
 800080e:	46ba      	mov	sl, r7
 8000810:	46b1      	mov	r9, r6
 8000812:	46a8      	mov	r8, r5
 8000814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000816:	2203      	movs	r2, #3
 8000818:	4316      	orrs	r6, r2
 800081a:	4642      	mov	r2, r8
 800081c:	3501      	adds	r5, #1
 800081e:	407a      	eors	r2, r7
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	35ff      	adds	r5, #255	; 0xff
 8000824:	2e0a      	cmp	r6, #10
 8000826:	dd00      	ble.n	800082a <__aeabi_fmul+0xca>
 8000828:	e0e4      	b.n	80009f4 <__aeabi_fmul+0x294>
 800082a:	2003      	movs	r0, #3
 800082c:	2101      	movs	r1, #1
 800082e:	40b1      	lsls	r1, r6
 8000830:	26a6      	movs	r6, #166	; 0xa6
 8000832:	00f6      	lsls	r6, r6, #3
 8000834:	4231      	tst	r1, r6
 8000836:	d10a      	bne.n	800084e <__aeabi_fmul+0xee>
 8000838:	2690      	movs	r6, #144	; 0x90
 800083a:	00b6      	lsls	r6, r6, #2
 800083c:	4231      	tst	r1, r6
 800083e:	d116      	bne.n	800086e <__aeabi_fmul+0x10e>
 8000840:	3eb9      	subs	r6, #185	; 0xb9
 8000842:	3eff      	subs	r6, #255	; 0xff
 8000844:	420e      	tst	r6, r1
 8000846:	d01a      	beq.n	800087e <__aeabi_fmul+0x11e>
 8000848:	46a1      	mov	r9, r4
 800084a:	4682      	mov	sl, r0
 800084c:	e000      	b.n	8000850 <__aeabi_fmul+0xf0>
 800084e:	0017      	movs	r7, r2
 8000850:	4653      	mov	r3, sl
 8000852:	003a      	movs	r2, r7
 8000854:	2b02      	cmp	r3, #2
 8000856:	d00f      	beq.n	8000878 <__aeabi_fmul+0x118>
 8000858:	464c      	mov	r4, r9
 800085a:	4650      	mov	r0, sl
 800085c:	2803      	cmp	r0, #3
 800085e:	d1cd      	bne.n	80007fc <__aeabi_fmul+0x9c>
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	03c9      	lsls	r1, r1, #15
 8000864:	4321      	orrs	r1, r4
 8000866:	0249      	lsls	r1, r1, #9
 8000868:	20ff      	movs	r0, #255	; 0xff
 800086a:	0a49      	lsrs	r1, r1, #9
 800086c:	e7ca      	b.n	8000804 <__aeabi_fmul+0xa4>
 800086e:	2180      	movs	r1, #128	; 0x80
 8000870:	2200      	movs	r2, #0
 8000872:	20ff      	movs	r0, #255	; 0xff
 8000874:	03c9      	lsls	r1, r1, #15
 8000876:	e7c5      	b.n	8000804 <__aeabi_fmul+0xa4>
 8000878:	20ff      	movs	r0, #255	; 0xff
 800087a:	2100      	movs	r1, #0
 800087c:	e7c2      	b.n	8000804 <__aeabi_fmul+0xa4>
 800087e:	0c20      	lsrs	r0, r4, #16
 8000880:	4649      	mov	r1, r9
 8000882:	0424      	lsls	r4, r4, #16
 8000884:	0c24      	lsrs	r4, r4, #16
 8000886:	0027      	movs	r7, r4
 8000888:	0c0e      	lsrs	r6, r1, #16
 800088a:	0409      	lsls	r1, r1, #16
 800088c:	0c09      	lsrs	r1, r1, #16
 800088e:	4374      	muls	r4, r6
 8000890:	434f      	muls	r7, r1
 8000892:	4346      	muls	r6, r0
 8000894:	4348      	muls	r0, r1
 8000896:	0c39      	lsrs	r1, r7, #16
 8000898:	1900      	adds	r0, r0, r4
 800089a:	1809      	adds	r1, r1, r0
 800089c:	428c      	cmp	r4, r1
 800089e:	d903      	bls.n	80008a8 <__aeabi_fmul+0x148>
 80008a0:	2080      	movs	r0, #128	; 0x80
 80008a2:	0240      	lsls	r0, r0, #9
 80008a4:	4684      	mov	ip, r0
 80008a6:	4466      	add	r6, ip
 80008a8:	043f      	lsls	r7, r7, #16
 80008aa:	0408      	lsls	r0, r1, #16
 80008ac:	0c3f      	lsrs	r7, r7, #16
 80008ae:	19c0      	adds	r0, r0, r7
 80008b0:	0184      	lsls	r4, r0, #6
 80008b2:	1e67      	subs	r7, r4, #1
 80008b4:	41bc      	sbcs	r4, r7
 80008b6:	0c09      	lsrs	r1, r1, #16
 80008b8:	0e80      	lsrs	r0, r0, #26
 80008ba:	1989      	adds	r1, r1, r6
 80008bc:	4304      	orrs	r4, r0
 80008be:	0189      	lsls	r1, r1, #6
 80008c0:	430c      	orrs	r4, r1
 80008c2:	0109      	lsls	r1, r1, #4
 80008c4:	d571      	bpl.n	80009aa <__aeabi_fmul+0x24a>
 80008c6:	2301      	movs	r3, #1
 80008c8:	0861      	lsrs	r1, r4, #1
 80008ca:	401c      	ands	r4, r3
 80008cc:	430c      	orrs	r4, r1
 80008ce:	002b      	movs	r3, r5
 80008d0:	337f      	adds	r3, #127	; 0x7f
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	dd51      	ble.n	800097a <__aeabi_fmul+0x21a>
 80008d6:	0761      	lsls	r1, r4, #29
 80008d8:	d004      	beq.n	80008e4 <__aeabi_fmul+0x184>
 80008da:	210f      	movs	r1, #15
 80008dc:	4021      	ands	r1, r4
 80008de:	2904      	cmp	r1, #4
 80008e0:	d000      	beq.n	80008e4 <__aeabi_fmul+0x184>
 80008e2:	3404      	adds	r4, #4
 80008e4:	0121      	lsls	r1, r4, #4
 80008e6:	d503      	bpl.n	80008f0 <__aeabi_fmul+0x190>
 80008e8:	4b43      	ldr	r3, [pc, #268]	; (80009f8 <__aeabi_fmul+0x298>)
 80008ea:	401c      	ands	r4, r3
 80008ec:	002b      	movs	r3, r5
 80008ee:	3380      	adds	r3, #128	; 0x80
 80008f0:	2bfe      	cmp	r3, #254	; 0xfe
 80008f2:	dcc1      	bgt.n	8000878 <__aeabi_fmul+0x118>
 80008f4:	01a1      	lsls	r1, r4, #6
 80008f6:	0a49      	lsrs	r1, r1, #9
 80008f8:	b2d8      	uxtb	r0, r3
 80008fa:	e783      	b.n	8000804 <__aeabi_fmul+0xa4>
 80008fc:	2c00      	cmp	r4, #0
 80008fe:	d12c      	bne.n	800095a <__aeabi_fmul+0x1fa>
 8000900:	2301      	movs	r3, #1
 8000902:	4642      	mov	r2, r8
 8000904:	431e      	orrs	r6, r3
 8000906:	002b      	movs	r3, r5
 8000908:	407a      	eors	r2, r7
 800090a:	2001      	movs	r0, #1
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	1c5d      	adds	r5, r3, #1
 8000910:	2e0a      	cmp	r6, #10
 8000912:	dd00      	ble.n	8000916 <__aeabi_fmul+0x1b6>
 8000914:	e757      	b.n	80007c6 <__aeabi_fmul+0x66>
 8000916:	e76a      	b.n	80007ee <__aeabi_fmul+0x8e>
 8000918:	2b00      	cmp	r3, #0
 800091a:	d110      	bne.n	800093e <__aeabi_fmul+0x1de>
 800091c:	2301      	movs	r3, #1
 800091e:	2604      	movs	r6, #4
 8000920:	2500      	movs	r5, #0
 8000922:	469a      	mov	sl, r3
 8000924:	e738      	b.n	8000798 <__aeabi_fmul+0x38>
 8000926:	2b00      	cmp	r3, #0
 8000928:	d104      	bne.n	8000934 <__aeabi_fmul+0x1d4>
 800092a:	2302      	movs	r3, #2
 800092c:	2608      	movs	r6, #8
 800092e:	25ff      	movs	r5, #255	; 0xff
 8000930:	469a      	mov	sl, r3
 8000932:	e731      	b.n	8000798 <__aeabi_fmul+0x38>
 8000934:	2303      	movs	r3, #3
 8000936:	260c      	movs	r6, #12
 8000938:	25ff      	movs	r5, #255	; 0xff
 800093a:	469a      	mov	sl, r3
 800093c:	e72c      	b.n	8000798 <__aeabi_fmul+0x38>
 800093e:	4648      	mov	r0, r9
 8000940:	f000 fab6 	bl	8000eb0 <__clzsi2>
 8000944:	464a      	mov	r2, r9
 8000946:	1f43      	subs	r3, r0, #5
 8000948:	2576      	movs	r5, #118	; 0x76
 800094a:	409a      	lsls	r2, r3
 800094c:	2300      	movs	r3, #0
 800094e:	426d      	negs	r5, r5
 8000950:	4691      	mov	r9, r2
 8000952:	2600      	movs	r6, #0
 8000954:	469a      	mov	sl, r3
 8000956:	1a2d      	subs	r5, r5, r0
 8000958:	e71e      	b.n	8000798 <__aeabi_fmul+0x38>
 800095a:	0020      	movs	r0, r4
 800095c:	f000 faa8 	bl	8000eb0 <__clzsi2>
 8000960:	4642      	mov	r2, r8
 8000962:	1f43      	subs	r3, r0, #5
 8000964:	409c      	lsls	r4, r3
 8000966:	1a2b      	subs	r3, r5, r0
 8000968:	3b76      	subs	r3, #118	; 0x76
 800096a:	407a      	eors	r2, r7
 800096c:	2000      	movs	r0, #0
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	1c5d      	adds	r5, r3, #1
 8000972:	2e0a      	cmp	r6, #10
 8000974:	dd00      	ble.n	8000978 <__aeabi_fmul+0x218>
 8000976:	e726      	b.n	80007c6 <__aeabi_fmul+0x66>
 8000978:	e739      	b.n	80007ee <__aeabi_fmul+0x8e>
 800097a:	2101      	movs	r1, #1
 800097c:	1acb      	subs	r3, r1, r3
 800097e:	2b1b      	cmp	r3, #27
 8000980:	dd00      	ble.n	8000984 <__aeabi_fmul+0x224>
 8000982:	e73d      	b.n	8000800 <__aeabi_fmul+0xa0>
 8000984:	359e      	adds	r5, #158	; 0x9e
 8000986:	0021      	movs	r1, r4
 8000988:	40ac      	lsls	r4, r5
 800098a:	40d9      	lsrs	r1, r3
 800098c:	1e63      	subs	r3, r4, #1
 800098e:	419c      	sbcs	r4, r3
 8000990:	4321      	orrs	r1, r4
 8000992:	074b      	lsls	r3, r1, #29
 8000994:	d004      	beq.n	80009a0 <__aeabi_fmul+0x240>
 8000996:	230f      	movs	r3, #15
 8000998:	400b      	ands	r3, r1
 800099a:	2b04      	cmp	r3, #4
 800099c:	d000      	beq.n	80009a0 <__aeabi_fmul+0x240>
 800099e:	3104      	adds	r1, #4
 80009a0:	014b      	lsls	r3, r1, #5
 80009a2:	d504      	bpl.n	80009ae <__aeabi_fmul+0x24e>
 80009a4:	2001      	movs	r0, #1
 80009a6:	2100      	movs	r1, #0
 80009a8:	e72c      	b.n	8000804 <__aeabi_fmul+0xa4>
 80009aa:	001d      	movs	r5, r3
 80009ac:	e78f      	b.n	80008ce <__aeabi_fmul+0x16e>
 80009ae:	0189      	lsls	r1, r1, #6
 80009b0:	2000      	movs	r0, #0
 80009b2:	0a49      	lsrs	r1, r1, #9
 80009b4:	e726      	b.n	8000804 <__aeabi_fmul+0xa4>
 80009b6:	2302      	movs	r3, #2
 80009b8:	2e0f      	cmp	r6, #15
 80009ba:	d10c      	bne.n	80009d6 <__aeabi_fmul+0x276>
 80009bc:	2180      	movs	r1, #128	; 0x80
 80009be:	464b      	mov	r3, r9
 80009c0:	03c9      	lsls	r1, r1, #15
 80009c2:	420b      	tst	r3, r1
 80009c4:	d00d      	beq.n	80009e2 <__aeabi_fmul+0x282>
 80009c6:	420c      	tst	r4, r1
 80009c8:	d10b      	bne.n	80009e2 <__aeabi_fmul+0x282>
 80009ca:	4321      	orrs	r1, r4
 80009cc:	0249      	lsls	r1, r1, #9
 80009ce:	003a      	movs	r2, r7
 80009d0:	20ff      	movs	r0, #255	; 0xff
 80009d2:	0a49      	lsrs	r1, r1, #9
 80009d4:	e716      	b.n	8000804 <__aeabi_fmul+0xa4>
 80009d6:	2e0b      	cmp	r6, #11
 80009d8:	d000      	beq.n	80009dc <__aeabi_fmul+0x27c>
 80009da:	e6f7      	b.n	80007cc <__aeabi_fmul+0x6c>
 80009dc:	46a1      	mov	r9, r4
 80009de:	469a      	mov	sl, r3
 80009e0:	e736      	b.n	8000850 <__aeabi_fmul+0xf0>
 80009e2:	2180      	movs	r1, #128	; 0x80
 80009e4:	464b      	mov	r3, r9
 80009e6:	03c9      	lsls	r1, r1, #15
 80009e8:	4319      	orrs	r1, r3
 80009ea:	0249      	lsls	r1, r1, #9
 80009ec:	4642      	mov	r2, r8
 80009ee:	20ff      	movs	r0, #255	; 0xff
 80009f0:	0a49      	lsrs	r1, r1, #9
 80009f2:	e707      	b.n	8000804 <__aeabi_fmul+0xa4>
 80009f4:	2303      	movs	r3, #3
 80009f6:	e7df      	b.n	80009b8 <__aeabi_fmul+0x258>
 80009f8:	f7ffffff 	.word	0xf7ffffff

080009fc <__aeabi_fsub>:
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	46c6      	mov	lr, r8
 8000a00:	0243      	lsls	r3, r0, #9
 8000a02:	0a5b      	lsrs	r3, r3, #9
 8000a04:	0045      	lsls	r5, r0, #1
 8000a06:	00da      	lsls	r2, r3, #3
 8000a08:	0fc4      	lsrs	r4, r0, #31
 8000a0a:	0248      	lsls	r0, r1, #9
 8000a0c:	004f      	lsls	r7, r1, #1
 8000a0e:	4694      	mov	ip, r2
 8000a10:	0a42      	lsrs	r2, r0, #9
 8000a12:	001e      	movs	r6, r3
 8000a14:	4690      	mov	r8, r2
 8000a16:	b500      	push	{lr}
 8000a18:	0e2d      	lsrs	r5, r5, #24
 8000a1a:	0e3f      	lsrs	r7, r7, #24
 8000a1c:	0fc9      	lsrs	r1, r1, #31
 8000a1e:	0980      	lsrs	r0, r0, #6
 8000a20:	2fff      	cmp	r7, #255	; 0xff
 8000a22:	d059      	beq.n	8000ad8 <__aeabi_fsub+0xdc>
 8000a24:	2201      	movs	r2, #1
 8000a26:	4051      	eors	r1, r2
 8000a28:	428c      	cmp	r4, r1
 8000a2a:	d039      	beq.n	8000aa0 <__aeabi_fsub+0xa4>
 8000a2c:	1bea      	subs	r2, r5, r7
 8000a2e:	2a00      	cmp	r2, #0
 8000a30:	dd58      	ble.n	8000ae4 <__aeabi_fsub+0xe8>
 8000a32:	2f00      	cmp	r7, #0
 8000a34:	d068      	beq.n	8000b08 <__aeabi_fsub+0x10c>
 8000a36:	2dff      	cmp	r5, #255	; 0xff
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fsub+0x40>
 8000a3a:	e0d1      	b.n	8000be0 <__aeabi_fsub+0x1e4>
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	04db      	lsls	r3, r3, #19
 8000a40:	4318      	orrs	r0, r3
 8000a42:	2a1b      	cmp	r2, #27
 8000a44:	dc00      	bgt.n	8000a48 <__aeabi_fsub+0x4c>
 8000a46:	e0e3      	b.n	8000c10 <__aeabi_fsub+0x214>
 8000a48:	2301      	movs	r3, #1
 8000a4a:	4662      	mov	r2, ip
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	015a      	lsls	r2, r3, #5
 8000a50:	d400      	bmi.n	8000a54 <__aeabi_fsub+0x58>
 8000a52:	e0ac      	b.n	8000bae <__aeabi_fsub+0x1b2>
 8000a54:	019b      	lsls	r3, r3, #6
 8000a56:	099e      	lsrs	r6, r3, #6
 8000a58:	0030      	movs	r0, r6
 8000a5a:	f000 fa29 	bl	8000eb0 <__clzsi2>
 8000a5e:	0033      	movs	r3, r6
 8000a60:	3805      	subs	r0, #5
 8000a62:	4083      	lsls	r3, r0
 8000a64:	4285      	cmp	r5, r0
 8000a66:	dc00      	bgt.n	8000a6a <__aeabi_fsub+0x6e>
 8000a68:	e0c6      	b.n	8000bf8 <__aeabi_fsub+0x1fc>
 8000a6a:	4ab2      	ldr	r2, [pc, #712]	; (8000d34 <__aeabi_fsub+0x338>)
 8000a6c:	1a2d      	subs	r5, r5, r0
 8000a6e:	4013      	ands	r3, r2
 8000a70:	075a      	lsls	r2, r3, #29
 8000a72:	d004      	beq.n	8000a7e <__aeabi_fsub+0x82>
 8000a74:	220f      	movs	r2, #15
 8000a76:	401a      	ands	r2, r3
 8000a78:	2a04      	cmp	r2, #4
 8000a7a:	d000      	beq.n	8000a7e <__aeabi_fsub+0x82>
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	015a      	lsls	r2, r3, #5
 8000a80:	d400      	bmi.n	8000a84 <__aeabi_fsub+0x88>
 8000a82:	e097      	b.n	8000bb4 <__aeabi_fsub+0x1b8>
 8000a84:	1c6a      	adds	r2, r5, #1
 8000a86:	2dfe      	cmp	r5, #254	; 0xfe
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fsub+0x90>
 8000a8a:	e084      	b.n	8000b96 <__aeabi_fsub+0x19a>
 8000a8c:	019b      	lsls	r3, r3, #6
 8000a8e:	0a5e      	lsrs	r6, r3, #9
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	05d0      	lsls	r0, r2, #23
 8000a94:	4330      	orrs	r0, r6
 8000a96:	07e4      	lsls	r4, r4, #31
 8000a98:	4320      	orrs	r0, r4
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	46b8      	mov	r8, r7
 8000a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa0:	1bea      	subs	r2, r5, r7
 8000aa2:	2a00      	cmp	r2, #0
 8000aa4:	dd41      	ble.n	8000b2a <__aeabi_fsub+0x12e>
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	d06b      	beq.n	8000b82 <__aeabi_fsub+0x186>
 8000aaa:	2dff      	cmp	r5, #255	; 0xff
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_fsub+0xb4>
 8000aae:	e097      	b.n	8000be0 <__aeabi_fsub+0x1e4>
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	04db      	lsls	r3, r3, #19
 8000ab4:	4318      	orrs	r0, r3
 8000ab6:	2a1b      	cmp	r2, #27
 8000ab8:	dc00      	bgt.n	8000abc <__aeabi_fsub+0xc0>
 8000aba:	e0cc      	b.n	8000c56 <__aeabi_fsub+0x25a>
 8000abc:	2301      	movs	r3, #1
 8000abe:	4463      	add	r3, ip
 8000ac0:	015a      	lsls	r2, r3, #5
 8000ac2:	d574      	bpl.n	8000bae <__aeabi_fsub+0x1b2>
 8000ac4:	3501      	adds	r5, #1
 8000ac6:	2dff      	cmp	r5, #255	; 0xff
 8000ac8:	d065      	beq.n	8000b96 <__aeabi_fsub+0x19a>
 8000aca:	2201      	movs	r2, #1
 8000acc:	499a      	ldr	r1, [pc, #616]	; (8000d38 <__aeabi_fsub+0x33c>)
 8000ace:	401a      	ands	r2, r3
 8000ad0:	085b      	lsrs	r3, r3, #1
 8000ad2:	400b      	ands	r3, r1
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	e7cb      	b.n	8000a70 <__aeabi_fsub+0x74>
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	d01f      	beq.n	8000b1c <__aeabi_fsub+0x120>
 8000adc:	428c      	cmp	r4, r1
 8000ade:	d022      	beq.n	8000b26 <__aeabi_fsub+0x12a>
 8000ae0:	002a      	movs	r2, r5
 8000ae2:	3aff      	subs	r2, #255	; 0xff
 8000ae4:	2a00      	cmp	r2, #0
 8000ae6:	d035      	beq.n	8000b54 <__aeabi_fsub+0x158>
 8000ae8:	1b7a      	subs	r2, r7, r5
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	d000      	beq.n	8000af0 <__aeabi_fsub+0xf4>
 8000aee:	e099      	b.n	8000c24 <__aeabi_fsub+0x228>
 8000af0:	4663      	mov	r3, ip
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fsub+0xfc>
 8000af6:	e0dd      	b.n	8000cb4 <__aeabi_fsub+0x2b8>
 8000af8:	1e53      	subs	r3, r2, #1
 8000afa:	2a01      	cmp	r2, #1
 8000afc:	d100      	bne.n	8000b00 <__aeabi_fsub+0x104>
 8000afe:	e105      	b.n	8000d0c <__aeabi_fsub+0x310>
 8000b00:	2aff      	cmp	r2, #255	; 0xff
 8000b02:	d06b      	beq.n	8000bdc <__aeabi_fsub+0x1e0>
 8000b04:	001a      	movs	r2, r3
 8000b06:	e094      	b.n	8000c32 <__aeabi_fsub+0x236>
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	d073      	beq.n	8000bf4 <__aeabi_fsub+0x1f8>
 8000b0c:	1e51      	subs	r1, r2, #1
 8000b0e:	2a01      	cmp	r2, #1
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fsub+0x118>
 8000b12:	e0df      	b.n	8000cd4 <__aeabi_fsub+0x2d8>
 8000b14:	2aff      	cmp	r2, #255	; 0xff
 8000b16:	d063      	beq.n	8000be0 <__aeabi_fsub+0x1e4>
 8000b18:	000a      	movs	r2, r1
 8000b1a:	e792      	b.n	8000a42 <__aeabi_fsub+0x46>
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4051      	eors	r1, r2
 8000b20:	42a1      	cmp	r1, r4
 8000b22:	d000      	beq.n	8000b26 <__aeabi_fsub+0x12a>
 8000b24:	e782      	b.n	8000a2c <__aeabi_fsub+0x30>
 8000b26:	002a      	movs	r2, r5
 8000b28:	3aff      	subs	r2, #255	; 0xff
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d036      	beq.n	8000b9c <__aeabi_fsub+0x1a0>
 8000b2e:	1b7a      	subs	r2, r7, r5
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d100      	bne.n	8000b36 <__aeabi_fsub+0x13a>
 8000b34:	e0aa      	b.n	8000c8c <__aeabi_fsub+0x290>
 8000b36:	2fff      	cmp	r7, #255	; 0xff
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fsub+0x140>
 8000b3a:	e0da      	b.n	8000cf2 <__aeabi_fsub+0x2f6>
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	4661      	mov	r1, ip
 8000b40:	04db      	lsls	r3, r3, #19
 8000b42:	4319      	orrs	r1, r3
 8000b44:	468c      	mov	ip, r1
 8000b46:	2a1b      	cmp	r2, #27
 8000b48:	dc00      	bgt.n	8000b4c <__aeabi_fsub+0x150>
 8000b4a:	e0d4      	b.n	8000cf6 <__aeabi_fsub+0x2fa>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	003d      	movs	r5, r7
 8000b50:	181b      	adds	r3, r3, r0
 8000b52:	e7b5      	b.n	8000ac0 <__aeabi_fsub+0xc4>
 8000b54:	27fe      	movs	r7, #254	; 0xfe
 8000b56:	1c6a      	adds	r2, r5, #1
 8000b58:	4217      	tst	r7, r2
 8000b5a:	d171      	bne.n	8000c40 <__aeabi_fsub+0x244>
 8000b5c:	2d00      	cmp	r5, #0
 8000b5e:	d000      	beq.n	8000b62 <__aeabi_fsub+0x166>
 8000b60:	e09e      	b.n	8000ca0 <__aeabi_fsub+0x2a4>
 8000b62:	4663      	mov	r3, ip
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fsub+0x16e>
 8000b68:	e0d5      	b.n	8000d16 <__aeabi_fsub+0x31a>
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_fsub+0x176>
 8000b70:	e78f      	b.n	8000a92 <__aeabi_fsub+0x96>
 8000b72:	1a1b      	subs	r3, r3, r0
 8000b74:	015e      	lsls	r6, r3, #5
 8000b76:	d400      	bmi.n	8000b7a <__aeabi_fsub+0x17e>
 8000b78:	e0d6      	b.n	8000d28 <__aeabi_fsub+0x32c>
 8000b7a:	4663      	mov	r3, ip
 8000b7c:	000c      	movs	r4, r1
 8000b7e:	1ac3      	subs	r3, r0, r3
 8000b80:	e776      	b.n	8000a70 <__aeabi_fsub+0x74>
 8000b82:	2800      	cmp	r0, #0
 8000b84:	d036      	beq.n	8000bf4 <__aeabi_fsub+0x1f8>
 8000b86:	1e51      	subs	r1, r2, #1
 8000b88:	2a01      	cmp	r2, #1
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fsub+0x192>
 8000b8c:	e09a      	b.n	8000cc4 <__aeabi_fsub+0x2c8>
 8000b8e:	2aff      	cmp	r2, #255	; 0xff
 8000b90:	d026      	beq.n	8000be0 <__aeabi_fsub+0x1e4>
 8000b92:	000a      	movs	r2, r1
 8000b94:	e78f      	b.n	8000ab6 <__aeabi_fsub+0xba>
 8000b96:	22ff      	movs	r2, #255	; 0xff
 8000b98:	2600      	movs	r6, #0
 8000b9a:	e77a      	b.n	8000a92 <__aeabi_fsub+0x96>
 8000b9c:	27fe      	movs	r7, #254	; 0xfe
 8000b9e:	1c6a      	adds	r2, r5, #1
 8000ba0:	4217      	tst	r7, r2
 8000ba2:	d062      	beq.n	8000c6a <__aeabi_fsub+0x26e>
 8000ba4:	2aff      	cmp	r2, #255	; 0xff
 8000ba6:	d0f6      	beq.n	8000b96 <__aeabi_fsub+0x19a>
 8000ba8:	0015      	movs	r5, r2
 8000baa:	4460      	add	r0, ip
 8000bac:	0843      	lsrs	r3, r0, #1
 8000bae:	075a      	lsls	r2, r3, #29
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_fsub+0x1b8>
 8000bb2:	e75f      	b.n	8000a74 <__aeabi_fsub+0x78>
 8000bb4:	08db      	lsrs	r3, r3, #3
 8000bb6:	2dff      	cmp	r5, #255	; 0xff
 8000bb8:	d012      	beq.n	8000be0 <__aeabi_fsub+0x1e4>
 8000bba:	025b      	lsls	r3, r3, #9
 8000bbc:	0a5e      	lsrs	r6, r3, #9
 8000bbe:	b2ea      	uxtb	r2, r5
 8000bc0:	e767      	b.n	8000a92 <__aeabi_fsub+0x96>
 8000bc2:	4662      	mov	r2, ip
 8000bc4:	2a00      	cmp	r2, #0
 8000bc6:	d100      	bne.n	8000bca <__aeabi_fsub+0x1ce>
 8000bc8:	e093      	b.n	8000cf2 <__aeabi_fsub+0x2f6>
 8000bca:	2800      	cmp	r0, #0
 8000bcc:	d008      	beq.n	8000be0 <__aeabi_fsub+0x1e4>
 8000bce:	2280      	movs	r2, #128	; 0x80
 8000bd0:	03d2      	lsls	r2, r2, #15
 8000bd2:	4213      	tst	r3, r2
 8000bd4:	d004      	beq.n	8000be0 <__aeabi_fsub+0x1e4>
 8000bd6:	4640      	mov	r0, r8
 8000bd8:	4210      	tst	r0, r2
 8000bda:	d101      	bne.n	8000be0 <__aeabi_fsub+0x1e4>
 8000bdc:	000c      	movs	r4, r1
 8000bde:	4643      	mov	r3, r8
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d0d8      	beq.n	8000b96 <__aeabi_fsub+0x19a>
 8000be4:	2680      	movs	r6, #128	; 0x80
 8000be6:	03f6      	lsls	r6, r6, #15
 8000be8:	431e      	orrs	r6, r3
 8000bea:	0276      	lsls	r6, r6, #9
 8000bec:	22ff      	movs	r2, #255	; 0xff
 8000bee:	0a76      	lsrs	r6, r6, #9
 8000bf0:	e74f      	b.n	8000a92 <__aeabi_fsub+0x96>
 8000bf2:	4643      	mov	r3, r8
 8000bf4:	0015      	movs	r5, r2
 8000bf6:	e7de      	b.n	8000bb6 <__aeabi_fsub+0x1ba>
 8000bf8:	2220      	movs	r2, #32
 8000bfa:	1b40      	subs	r0, r0, r5
 8000bfc:	3001      	adds	r0, #1
 8000bfe:	1a12      	subs	r2, r2, r0
 8000c00:	0019      	movs	r1, r3
 8000c02:	4093      	lsls	r3, r2
 8000c04:	40c1      	lsrs	r1, r0
 8000c06:	1e5a      	subs	r2, r3, #1
 8000c08:	4193      	sbcs	r3, r2
 8000c0a:	2500      	movs	r5, #0
 8000c0c:	430b      	orrs	r3, r1
 8000c0e:	e72f      	b.n	8000a70 <__aeabi_fsub+0x74>
 8000c10:	2320      	movs	r3, #32
 8000c12:	1a9b      	subs	r3, r3, r2
 8000c14:	0001      	movs	r1, r0
 8000c16:	4098      	lsls	r0, r3
 8000c18:	0003      	movs	r3, r0
 8000c1a:	40d1      	lsrs	r1, r2
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	4193      	sbcs	r3, r2
 8000c20:	430b      	orrs	r3, r1
 8000c22:	e712      	b.n	8000a4a <__aeabi_fsub+0x4e>
 8000c24:	2fff      	cmp	r7, #255	; 0xff
 8000c26:	d0d9      	beq.n	8000bdc <__aeabi_fsub+0x1e0>
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	4664      	mov	r4, ip
 8000c2c:	04db      	lsls	r3, r3, #19
 8000c2e:	431c      	orrs	r4, r3
 8000c30:	46a4      	mov	ip, r4
 8000c32:	2a1b      	cmp	r2, #27
 8000c34:	dd52      	ble.n	8000cdc <__aeabi_fsub+0x2e0>
 8000c36:	2301      	movs	r3, #1
 8000c38:	000c      	movs	r4, r1
 8000c3a:	003d      	movs	r5, r7
 8000c3c:	1ac3      	subs	r3, r0, r3
 8000c3e:	e706      	b.n	8000a4e <__aeabi_fsub+0x52>
 8000c40:	4663      	mov	r3, ip
 8000c42:	1a1e      	subs	r6, r3, r0
 8000c44:	0173      	lsls	r3, r6, #5
 8000c46:	d439      	bmi.n	8000cbc <__aeabi_fsub+0x2c0>
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0x252>
 8000c4c:	e704      	b.n	8000a58 <__aeabi_fsub+0x5c>
 8000c4e:	2400      	movs	r4, #0
 8000c50:	2200      	movs	r2, #0
 8000c52:	2600      	movs	r6, #0
 8000c54:	e71d      	b.n	8000a92 <__aeabi_fsub+0x96>
 8000c56:	2320      	movs	r3, #32
 8000c58:	1a9b      	subs	r3, r3, r2
 8000c5a:	0001      	movs	r1, r0
 8000c5c:	4098      	lsls	r0, r3
 8000c5e:	0003      	movs	r3, r0
 8000c60:	40d1      	lsrs	r1, r2
 8000c62:	1e5a      	subs	r2, r3, #1
 8000c64:	4193      	sbcs	r3, r2
 8000c66:	430b      	orrs	r3, r1
 8000c68:	e729      	b.n	8000abe <__aeabi_fsub+0xc2>
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	d1a9      	bne.n	8000bc2 <__aeabi_fsub+0x1c6>
 8000c6e:	4663      	mov	r3, ip
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d056      	beq.n	8000d22 <__aeabi_fsub+0x326>
 8000c74:	2200      	movs	r2, #0
 8000c76:	2800      	cmp	r0, #0
 8000c78:	d100      	bne.n	8000c7c <__aeabi_fsub+0x280>
 8000c7a:	e70a      	b.n	8000a92 <__aeabi_fsub+0x96>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	4463      	add	r3, ip
 8000c80:	015a      	lsls	r2, r3, #5
 8000c82:	d594      	bpl.n	8000bae <__aeabi_fsub+0x1b2>
 8000c84:	4a2b      	ldr	r2, [pc, #172]	; (8000d34 <__aeabi_fsub+0x338>)
 8000c86:	3501      	adds	r5, #1
 8000c88:	4013      	ands	r3, r2
 8000c8a:	e790      	b.n	8000bae <__aeabi_fsub+0x1b2>
 8000c8c:	4663      	mov	r3, ip
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0af      	beq.n	8000bf2 <__aeabi_fsub+0x1f6>
 8000c92:	1e53      	subs	r3, r2, #1
 8000c94:	2a01      	cmp	r2, #1
 8000c96:	d015      	beq.n	8000cc4 <__aeabi_fsub+0x2c8>
 8000c98:	2aff      	cmp	r2, #255	; 0xff
 8000c9a:	d02a      	beq.n	8000cf2 <__aeabi_fsub+0x2f6>
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	e752      	b.n	8000b46 <__aeabi_fsub+0x14a>
 8000ca0:	4662      	mov	r2, ip
 8000ca2:	2a00      	cmp	r2, #0
 8000ca4:	d191      	bne.n	8000bca <__aeabi_fsub+0x1ce>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	d198      	bne.n	8000bdc <__aeabi_fsub+0x1e0>
 8000caa:	2680      	movs	r6, #128	; 0x80
 8000cac:	2400      	movs	r4, #0
 8000cae:	22ff      	movs	r2, #255	; 0xff
 8000cb0:	03f6      	lsls	r6, r6, #15
 8000cb2:	e6ee      	b.n	8000a92 <__aeabi_fsub+0x96>
 8000cb4:	000c      	movs	r4, r1
 8000cb6:	4643      	mov	r3, r8
 8000cb8:	0015      	movs	r5, r2
 8000cba:	e77c      	b.n	8000bb6 <__aeabi_fsub+0x1ba>
 8000cbc:	4663      	mov	r3, ip
 8000cbe:	000c      	movs	r4, r1
 8000cc0:	1ac6      	subs	r6, r0, r3
 8000cc2:	e6c9      	b.n	8000a58 <__aeabi_fsub+0x5c>
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	4463      	add	r3, ip
 8000cc8:	2501      	movs	r5, #1
 8000cca:	015a      	lsls	r2, r3, #5
 8000ccc:	d400      	bmi.n	8000cd0 <__aeabi_fsub+0x2d4>
 8000cce:	e76e      	b.n	8000bae <__aeabi_fsub+0x1b2>
 8000cd0:	2502      	movs	r5, #2
 8000cd2:	e6fa      	b.n	8000aca <__aeabi_fsub+0xce>
 8000cd4:	4663      	mov	r3, ip
 8000cd6:	2501      	movs	r5, #1
 8000cd8:	1a1b      	subs	r3, r3, r0
 8000cda:	e6b8      	b.n	8000a4e <__aeabi_fsub+0x52>
 8000cdc:	4664      	mov	r4, ip
 8000cde:	2320      	movs	r3, #32
 8000ce0:	40d4      	lsrs	r4, r2
 8000ce2:	1a9b      	subs	r3, r3, r2
 8000ce4:	4662      	mov	r2, ip
 8000ce6:	409a      	lsls	r2, r3
 8000ce8:	0013      	movs	r3, r2
 8000cea:	1e5a      	subs	r2, r3, #1
 8000cec:	4193      	sbcs	r3, r2
 8000cee:	4323      	orrs	r3, r4
 8000cf0:	e7a2      	b.n	8000c38 <__aeabi_fsub+0x23c>
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	e774      	b.n	8000be0 <__aeabi_fsub+0x1e4>
 8000cf6:	4661      	mov	r1, ip
 8000cf8:	2320      	movs	r3, #32
 8000cfa:	40d1      	lsrs	r1, r2
 8000cfc:	1a9b      	subs	r3, r3, r2
 8000cfe:	4662      	mov	r2, ip
 8000d00:	409a      	lsls	r2, r3
 8000d02:	0013      	movs	r3, r2
 8000d04:	1e5a      	subs	r2, r3, #1
 8000d06:	4193      	sbcs	r3, r2
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	e720      	b.n	8000b4e <__aeabi_fsub+0x152>
 8000d0c:	4663      	mov	r3, ip
 8000d0e:	000c      	movs	r4, r1
 8000d10:	2501      	movs	r5, #1
 8000d12:	1ac3      	subs	r3, r0, r3
 8000d14:	e69b      	b.n	8000a4e <__aeabi_fsub+0x52>
 8000d16:	2800      	cmp	r0, #0
 8000d18:	d099      	beq.n	8000c4e <__aeabi_fsub+0x252>
 8000d1a:	000c      	movs	r4, r1
 8000d1c:	4646      	mov	r6, r8
 8000d1e:	2200      	movs	r2, #0
 8000d20:	e6b7      	b.n	8000a92 <__aeabi_fsub+0x96>
 8000d22:	4646      	mov	r6, r8
 8000d24:	2200      	movs	r2, #0
 8000d26:	e6b4      	b.n	8000a92 <__aeabi_fsub+0x96>
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d000      	beq.n	8000d2e <__aeabi_fsub+0x332>
 8000d2c:	e73f      	b.n	8000bae <__aeabi_fsub+0x1b2>
 8000d2e:	2400      	movs	r4, #0
 8000d30:	2600      	movs	r6, #0
 8000d32:	e6ae      	b.n	8000a92 <__aeabi_fsub+0x96>
 8000d34:	fbffffff 	.word	0xfbffffff
 8000d38:	7dffffff 	.word	0x7dffffff

08000d3c <__aeabi_f2iz>:
 8000d3c:	0241      	lsls	r1, r0, #9
 8000d3e:	0042      	lsls	r2, r0, #1
 8000d40:	0fc3      	lsrs	r3, r0, #31
 8000d42:	0a49      	lsrs	r1, r1, #9
 8000d44:	2000      	movs	r0, #0
 8000d46:	0e12      	lsrs	r2, r2, #24
 8000d48:	2a7e      	cmp	r2, #126	; 0x7e
 8000d4a:	dd03      	ble.n	8000d54 <__aeabi_f2iz+0x18>
 8000d4c:	2a9d      	cmp	r2, #157	; 0x9d
 8000d4e:	dd02      	ble.n	8000d56 <__aeabi_f2iz+0x1a>
 8000d50:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <__aeabi_f2iz+0x3c>)
 8000d52:	1898      	adds	r0, r3, r2
 8000d54:	4770      	bx	lr
 8000d56:	2080      	movs	r0, #128	; 0x80
 8000d58:	0400      	lsls	r0, r0, #16
 8000d5a:	4301      	orrs	r1, r0
 8000d5c:	2a95      	cmp	r2, #149	; 0x95
 8000d5e:	dc07      	bgt.n	8000d70 <__aeabi_f2iz+0x34>
 8000d60:	2096      	movs	r0, #150	; 0x96
 8000d62:	1a82      	subs	r2, r0, r2
 8000d64:	40d1      	lsrs	r1, r2
 8000d66:	4248      	negs	r0, r1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1f3      	bne.n	8000d54 <__aeabi_f2iz+0x18>
 8000d6c:	0008      	movs	r0, r1
 8000d6e:	e7f1      	b.n	8000d54 <__aeabi_f2iz+0x18>
 8000d70:	3a96      	subs	r2, #150	; 0x96
 8000d72:	4091      	lsls	r1, r2
 8000d74:	e7f7      	b.n	8000d66 <__aeabi_f2iz+0x2a>
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	7fffffff 	.word	0x7fffffff

08000d7c <__aeabi_i2f>:
 8000d7c:	b570      	push	{r4, r5, r6, lr}
 8000d7e:	2800      	cmp	r0, #0
 8000d80:	d013      	beq.n	8000daa <__aeabi_i2f+0x2e>
 8000d82:	17c3      	asrs	r3, r0, #31
 8000d84:	18c5      	adds	r5, r0, r3
 8000d86:	405d      	eors	r5, r3
 8000d88:	0fc4      	lsrs	r4, r0, #31
 8000d8a:	0028      	movs	r0, r5
 8000d8c:	f000 f890 	bl	8000eb0 <__clzsi2>
 8000d90:	239e      	movs	r3, #158	; 0x9e
 8000d92:	0001      	movs	r1, r0
 8000d94:	1a1b      	subs	r3, r3, r0
 8000d96:	2b96      	cmp	r3, #150	; 0x96
 8000d98:	dc0f      	bgt.n	8000dba <__aeabi_i2f+0x3e>
 8000d9a:	2808      	cmp	r0, #8
 8000d9c:	d031      	beq.n	8000e02 <__aeabi_i2f+0x86>
 8000d9e:	3908      	subs	r1, #8
 8000da0:	408d      	lsls	r5, r1
 8000da2:	026d      	lsls	r5, r5, #9
 8000da4:	0a6d      	lsrs	r5, r5, #9
 8000da6:	b2d8      	uxtb	r0, r3
 8000da8:	e002      	b.n	8000db0 <__aeabi_i2f+0x34>
 8000daa:	2400      	movs	r4, #0
 8000dac:	2000      	movs	r0, #0
 8000dae:	2500      	movs	r5, #0
 8000db0:	05c0      	lsls	r0, r0, #23
 8000db2:	4328      	orrs	r0, r5
 8000db4:	07e4      	lsls	r4, r4, #31
 8000db6:	4320      	orrs	r0, r4
 8000db8:	bd70      	pop	{r4, r5, r6, pc}
 8000dba:	2b99      	cmp	r3, #153	; 0x99
 8000dbc:	dd0c      	ble.n	8000dd8 <__aeabi_i2f+0x5c>
 8000dbe:	2205      	movs	r2, #5
 8000dc0:	1a12      	subs	r2, r2, r0
 8000dc2:	0028      	movs	r0, r5
 8000dc4:	40d0      	lsrs	r0, r2
 8000dc6:	0002      	movs	r2, r0
 8000dc8:	0008      	movs	r0, r1
 8000dca:	301b      	adds	r0, #27
 8000dcc:	4085      	lsls	r5, r0
 8000dce:	0028      	movs	r0, r5
 8000dd0:	1e45      	subs	r5, r0, #1
 8000dd2:	41a8      	sbcs	r0, r5
 8000dd4:	4302      	orrs	r2, r0
 8000dd6:	0015      	movs	r5, r2
 8000dd8:	2905      	cmp	r1, #5
 8000dda:	dc16      	bgt.n	8000e0a <__aeabi_i2f+0x8e>
 8000ddc:	002a      	movs	r2, r5
 8000dde:	480f      	ldr	r0, [pc, #60]	; (8000e1c <__aeabi_i2f+0xa0>)
 8000de0:	4002      	ands	r2, r0
 8000de2:	076e      	lsls	r6, r5, #29
 8000de4:	d009      	beq.n	8000dfa <__aeabi_i2f+0x7e>
 8000de6:	260f      	movs	r6, #15
 8000de8:	4035      	ands	r5, r6
 8000dea:	2d04      	cmp	r5, #4
 8000dec:	d005      	beq.n	8000dfa <__aeabi_i2f+0x7e>
 8000dee:	3204      	adds	r2, #4
 8000df0:	0155      	lsls	r5, r2, #5
 8000df2:	d502      	bpl.n	8000dfa <__aeabi_i2f+0x7e>
 8000df4:	239f      	movs	r3, #159	; 0x9f
 8000df6:	4002      	ands	r2, r0
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	0192      	lsls	r2, r2, #6
 8000dfc:	0a55      	lsrs	r5, r2, #9
 8000dfe:	b2d8      	uxtb	r0, r3
 8000e00:	e7d6      	b.n	8000db0 <__aeabi_i2f+0x34>
 8000e02:	026d      	lsls	r5, r5, #9
 8000e04:	2096      	movs	r0, #150	; 0x96
 8000e06:	0a6d      	lsrs	r5, r5, #9
 8000e08:	e7d2      	b.n	8000db0 <__aeabi_i2f+0x34>
 8000e0a:	1f4a      	subs	r2, r1, #5
 8000e0c:	4095      	lsls	r5, r2
 8000e0e:	002a      	movs	r2, r5
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <__aeabi_i2f+0xa0>)
 8000e12:	4002      	ands	r2, r0
 8000e14:	076e      	lsls	r6, r5, #29
 8000e16:	d0f0      	beq.n	8000dfa <__aeabi_i2f+0x7e>
 8000e18:	e7e5      	b.n	8000de6 <__aeabi_i2f+0x6a>
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	fbffffff 	.word	0xfbffffff

08000e20 <__aeabi_ui2f>:
 8000e20:	b570      	push	{r4, r5, r6, lr}
 8000e22:	1e04      	subs	r4, r0, #0
 8000e24:	d00e      	beq.n	8000e44 <__aeabi_ui2f+0x24>
 8000e26:	f000 f843 	bl	8000eb0 <__clzsi2>
 8000e2a:	239e      	movs	r3, #158	; 0x9e
 8000e2c:	0001      	movs	r1, r0
 8000e2e:	1a1b      	subs	r3, r3, r0
 8000e30:	2b96      	cmp	r3, #150	; 0x96
 8000e32:	dc0c      	bgt.n	8000e4e <__aeabi_ui2f+0x2e>
 8000e34:	2808      	cmp	r0, #8
 8000e36:	d02c      	beq.n	8000e92 <__aeabi_ui2f+0x72>
 8000e38:	3908      	subs	r1, #8
 8000e3a:	408c      	lsls	r4, r1
 8000e3c:	0264      	lsls	r4, r4, #9
 8000e3e:	0a64      	lsrs	r4, r4, #9
 8000e40:	b2d8      	uxtb	r0, r3
 8000e42:	e001      	b.n	8000e48 <__aeabi_ui2f+0x28>
 8000e44:	2000      	movs	r0, #0
 8000e46:	2400      	movs	r4, #0
 8000e48:	05c0      	lsls	r0, r0, #23
 8000e4a:	4320      	orrs	r0, r4
 8000e4c:	bd70      	pop	{r4, r5, r6, pc}
 8000e4e:	2b99      	cmp	r3, #153	; 0x99
 8000e50:	dd0a      	ble.n	8000e68 <__aeabi_ui2f+0x48>
 8000e52:	0002      	movs	r2, r0
 8000e54:	0020      	movs	r0, r4
 8000e56:	321b      	adds	r2, #27
 8000e58:	4090      	lsls	r0, r2
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	1e50      	subs	r0, r2, #1
 8000e5e:	4182      	sbcs	r2, r0
 8000e60:	2005      	movs	r0, #5
 8000e62:	1a40      	subs	r0, r0, r1
 8000e64:	40c4      	lsrs	r4, r0
 8000e66:	4314      	orrs	r4, r2
 8000e68:	2905      	cmp	r1, #5
 8000e6a:	dc16      	bgt.n	8000e9a <__aeabi_ui2f+0x7a>
 8000e6c:	0022      	movs	r2, r4
 8000e6e:	480f      	ldr	r0, [pc, #60]	; (8000eac <__aeabi_ui2f+0x8c>)
 8000e70:	4002      	ands	r2, r0
 8000e72:	0765      	lsls	r5, r4, #29
 8000e74:	d009      	beq.n	8000e8a <__aeabi_ui2f+0x6a>
 8000e76:	250f      	movs	r5, #15
 8000e78:	402c      	ands	r4, r5
 8000e7a:	2c04      	cmp	r4, #4
 8000e7c:	d005      	beq.n	8000e8a <__aeabi_ui2f+0x6a>
 8000e7e:	3204      	adds	r2, #4
 8000e80:	0154      	lsls	r4, r2, #5
 8000e82:	d502      	bpl.n	8000e8a <__aeabi_ui2f+0x6a>
 8000e84:	239f      	movs	r3, #159	; 0x9f
 8000e86:	4002      	ands	r2, r0
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	0192      	lsls	r2, r2, #6
 8000e8c:	0a54      	lsrs	r4, r2, #9
 8000e8e:	b2d8      	uxtb	r0, r3
 8000e90:	e7da      	b.n	8000e48 <__aeabi_ui2f+0x28>
 8000e92:	0264      	lsls	r4, r4, #9
 8000e94:	2096      	movs	r0, #150	; 0x96
 8000e96:	0a64      	lsrs	r4, r4, #9
 8000e98:	e7d6      	b.n	8000e48 <__aeabi_ui2f+0x28>
 8000e9a:	1f4a      	subs	r2, r1, #5
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	0022      	movs	r2, r4
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <__aeabi_ui2f+0x8c>)
 8000ea2:	4002      	ands	r2, r0
 8000ea4:	0765      	lsls	r5, r4, #29
 8000ea6:	d0f0      	beq.n	8000e8a <__aeabi_ui2f+0x6a>
 8000ea8:	e7e5      	b.n	8000e76 <__aeabi_ui2f+0x56>
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	fbffffff 	.word	0xfbffffff

08000eb0 <__clzsi2>:
 8000eb0:	211c      	movs	r1, #28
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	041b      	lsls	r3, r3, #16
 8000eb6:	4298      	cmp	r0, r3
 8000eb8:	d301      	bcc.n	8000ebe <__clzsi2+0xe>
 8000eba:	0c00      	lsrs	r0, r0, #16
 8000ebc:	3910      	subs	r1, #16
 8000ebe:	0a1b      	lsrs	r3, r3, #8
 8000ec0:	4298      	cmp	r0, r3
 8000ec2:	d301      	bcc.n	8000ec8 <__clzsi2+0x18>
 8000ec4:	0a00      	lsrs	r0, r0, #8
 8000ec6:	3908      	subs	r1, #8
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	4298      	cmp	r0, r3
 8000ecc:	d301      	bcc.n	8000ed2 <__clzsi2+0x22>
 8000ece:	0900      	lsrs	r0, r0, #4
 8000ed0:	3904      	subs	r1, #4
 8000ed2:	a202      	add	r2, pc, #8	; (adr r2, 8000edc <__clzsi2+0x2c>)
 8000ed4:	5c10      	ldrb	r0, [r2, r0]
 8000ed6:	1840      	adds	r0, r0, r1
 8000ed8:	4770      	bx	lr
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	02020304 	.word	0x02020304
 8000ee0:	01010101 	.word	0x01010101
	...

08000eec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b7f      	cmp	r3, #127	; 0x7f
 8000efe:	d80a      	bhi.n	8000f16 <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	001a      	movs	r2, r3
 8000f06:	231f      	movs	r3, #31
 8000f08:	4013      	ands	r3, r2
 8000f0a:	4905      	ldr	r1, [pc, #20]	; (8000f20 <__NVIC_ClearPendingIRQ+0x34>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	23c0      	movs	r3, #192	; 0xc0
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	50ca      	str	r2, [r1, r3]
  }
}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f000 fe38 	bl	8001b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 f8ac 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f30:	f000 fa64 	bl	80013fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000f34:	f000 fa44 	bl	80013c0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f38:	f000 f904 	bl	8001144 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f3c:	f000 f9ea 	bl	8001314 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000f40:	f000 f98a 	bl	8001258 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  PID_init();
 8000f44:	f000 fc1e 	bl	8001784 <PID_init>
  HAL_ADCEx_Calibration_Start(&hadc1);				 // калибровка АЦП
 8000f48:	4b40      	ldr	r3, [pc, #256]	; (800104c <main+0x128>)
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f001 fe2c 	bl	8002ba8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adcData, 2);// запуск АЦП в режиме DMA (0 ячейка ток, 1 ячейка потенциометр)
 8000f50:	493f      	ldr	r1, [pc, #252]	; (8001050 <main+0x12c>)
 8000f52:	4b3e      	ldr	r3, [pc, #248]	; (800104c <main+0x128>)
 8000f54:	2202      	movs	r2, #2
 8000f56:	0018      	movs	r0, r3
 8000f58:	f001 f9a6 	bl	80022a8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000f5c:	4b3d      	ldr	r3, [pc, #244]	; (8001054 <main+0x130>)
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f003 fb08 	bl	8004574 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (flag_irq_pos && (HAL_GetTick() - time_irq) > 12U) {// условие включения прерывания
 8000f64:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <main+0x134>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d016      	beq.n	8000f9c <main+0x78>
 8000f6e:	f000 fe91 	bl	8001c94 <HAL_GetTick>
 8000f72:	0002      	movs	r2, r0
 8000f74:	4b39      	ldr	r3, [pc, #228]	; (800105c <main+0x138>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b0c      	cmp	r3, #12
 8000f7c:	d90e      	bls.n	8000f9c <main+0x78>
//(поднят флаг окончания процедуры и разница текущей временной метки и метки начала процедуры больше 11)

			__HAL_GPIO_EXTI_CLEAR_IT(Zero_positive_Pin);  	// очищаем бит EXTI_PR
 8000f7e:	4b38      	ldr	r3, [pc, #224]	; (8001060 <main+0x13c>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	4b36      	ldr	r3, [pc, #216]	; (8001060 <main+0x13c>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	611a      	str	r2, [r3, #16]
			NVIC_ClearPendingIRQ(EXTI0_1_IRQn); 			// очищаем бит NVIC_ICPRx
 8000f8a:	2005      	movs	r0, #5
 8000f8c:	f7ff ffae 	bl	8000eec <__NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);   			// включаем внешнее прерывание
 8000f90:	2005      	movs	r0, #5
 8000f92:	f001 ffe8 	bl	8002f66 <HAL_NVIC_EnableIRQ>

			flag_irq_pos = 0;								// Опускаем флаг
 8000f96:	4b30      	ldr	r3, [pc, #192]	; (8001058 <main+0x134>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
		}

		if (flag_irq_neg && (HAL_GetTick() - time_irq) > 12U) {
 8000f9c:	4b31      	ldr	r3, [pc, #196]	; (8001064 <main+0x140>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d016      	beq.n	8000fd4 <main+0xb0>
 8000fa6:	f000 fe75 	bl	8001c94 <HAL_GetTick>
 8000faa:	0002      	movs	r2, r0
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <main+0x138>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b0c      	cmp	r3, #12
 8000fb4:	d90e      	bls.n	8000fd4 <main+0xb0>
			__HAL_GPIO_EXTI_CLEAR_IT(Zero_negative_Pin);
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <main+0x13c>)
 8000fb8:	2280      	movs	r2, #128	; 0x80
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <main+0x13c>)
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	611a      	str	r2, [r3, #16]
			NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8000fc2:	2007      	movs	r0, #7
 8000fc4:	f7ff ff92 	bl	8000eec <__NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000fc8:	2007      	movs	r0, #7
 8000fca:	f001 ffcc 	bl	8002f66 <HAL_NVIC_EnableIRQ>

			flag_irq_neg = 0;
 8000fce:	4b25      	ldr	r3, [pc, #148]	; (8001064 <main+0x140>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
		}


		autoAlpha = 3.5f * (10000U - PID_realize(targetCurrent, Current_filtr)); //после ПИ регулятора
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <main+0x144>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b24      	ldr	r3, [pc, #144]	; (800106c <main+0x148>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	1c19      	adds	r1, r3, #0
 8000fde:	1c10      	adds	r0, r2, #0
 8000fe0:	f000 fbee 	bl	80017c0 <PID_realize>
 8000fe4:	1c03      	adds	r3, r0, #0
 8000fe6:	1c19      	adds	r1, r3, #0
 8000fe8:	4821      	ldr	r0, [pc, #132]	; (8001070 <main+0x14c>)
 8000fea:	f7ff fd07 	bl	80009fc <__aeabi_fsub>
 8000fee:	1c03      	adds	r3, r0, #0
 8000ff0:	4920      	ldr	r1, [pc, #128]	; (8001074 <main+0x150>)
 8000ff2:	1c18      	adds	r0, r3, #0
 8000ff4:	f7ff fbb4 	bl	8000760 <__aeabi_fmul>
 8000ff8:	1c03      	adds	r3, r0, #0
 8000ffa:	1c18      	adds	r0, r3, #0
 8000ffc:	f7ff f948 	bl	8000290 <__aeabi_f2uiz>
 8001000:	0003      	movs	r3, r0
 8001002:	b29a      	uxth	r2, r3
 8001004:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <main+0x154>)
 8001006:	801a      	strh	r2, [r3, #0]

		if (HAL_GPIO_ReadPin(GPIOA, Switch_Pin) == ON) {	// Переключатель режима авто/ручной
 8001008:	23a0      	movs	r3, #160	; 0xa0
 800100a:	05db      	lsls	r3, r3, #23
 800100c:	2108      	movs	r1, #8
 800100e:	0018      	movs	r0, r3
 8001010:	f002 fb8c 	bl	800372c <HAL_GPIO_ReadPin>
 8001014:	0003      	movs	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d104      	bne.n	8001024 <main+0x100>
			Alpha = refAlpha;
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <main+0x158>)
 800101c:	881a      	ldrh	r2, [r3, #0]
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <main+0x15c>)
 8001020:	801a      	strh	r2, [r3, #0]
 8001022:	e79f      	b.n	8000f64 <main+0x40>
		}
		else {
			Alpha = autoAlpha;
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <main+0x154>)
 8001026:	881a      	ldrh	r2, [r3, #0]
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <main+0x15c>)
 800102a:	801a      	strh	r2, [r3, #0]
			targetCurrent = adcData[1] * 0.000152587890625f; // Уставка тока от потенциометра до 5А
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <main+0x12c>)
 800102e:	885b      	ldrh	r3, [r3, #2]
 8001030:	b29b      	uxth	r3, r3
 8001032:	0018      	movs	r0, r3
 8001034:	f7ff fea2 	bl	8000d7c <__aeabi_i2f>
 8001038:	1c03      	adds	r3, r0, #0
 800103a:	4912      	ldr	r1, [pc, #72]	; (8001084 <main+0x160>)
 800103c:	1c18      	adds	r0, r3, #0
 800103e:	f7ff fb8f 	bl	8000760 <__aeabi_fmul>
 8001042:	1c03      	adds	r3, r0, #0
 8001044:	1c1a      	adds	r2, r3, #0
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <main+0x144>)
 8001048:	601a      	str	r2, [r3, #0]
		if (flag_irq_pos && (HAL_GetTick() - time_irq) > 12U) {// условие включения прерывания
 800104a:	e78b      	b.n	8000f64 <main+0x40>
 800104c:	20000034 	.word	0x20000034
 8001050:	2000018c 	.word	0x2000018c
 8001054:	20000140 	.word	0x20000140
 8001058:	2000019c 	.word	0x2000019c
 800105c:	200001a0 	.word	0x200001a0
 8001060:	40021800 	.word	0x40021800
 8001064:	2000019d 	.word	0x2000019d
 8001068:	20000000 	.word	0x20000000
 800106c:	20000198 	.word	0x20000198
 8001070:	461c4000 	.word	0x461c4000
 8001074:	40600000 	.word	0x40600000
 8001078:	20000008 	.word	0x20000008
 800107c:	20000006 	.word	0x20000006
 8001080:	20000004 	.word	0x20000004
 8001084:	39200000 	.word	0x39200000

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b093      	sub	sp, #76	; 0x4c
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	2410      	movs	r4, #16
 8001090:	193b      	adds	r3, r7, r4
 8001092:	0018      	movs	r0, r3
 8001094:	2338      	movs	r3, #56	; 0x38
 8001096:	001a      	movs	r2, r3
 8001098:	2100      	movs	r1, #0
 800109a:	f003 fe5d 	bl	8004d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109e:	003b      	movs	r3, r7
 80010a0:	0018      	movs	r0, r3
 80010a2:	2310      	movs	r3, #16
 80010a4:	001a      	movs	r2, r3
 80010a6:	2100      	movs	r1, #0
 80010a8:	f003 fe56 	bl	8004d58 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	0018      	movs	r0, r3
 80010b2:	f002 fba9 	bl	8003808 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b6:	193b      	adds	r3, r7, r4
 80010b8:	2202      	movs	r2, #2
 80010ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010bc:	193b      	adds	r3, r7, r4
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	0052      	lsls	r2, r2, #1
 80010c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80010c4:	0021      	movs	r1, r4
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	2240      	movs	r2, #64	; 0x40
 80010d0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2202      	movs	r2, #2
 80010d6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2202      	movs	r2, #2
 80010dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2200      	movs	r2, #0
 80010e2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2208      	movs	r2, #8
 80010e8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	0292      	lsls	r2, r2, #10
 80010f0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	2280      	movs	r2, #128	; 0x80
 80010f6:	0492      	lsls	r2, r2, #18
 80010f8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	0592      	lsls	r2, r2, #22
 8001100:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001102:	187b      	adds	r3, r7, r1
 8001104:	0018      	movs	r0, r3
 8001106:	f002 fbbf 	bl	8003888 <HAL_RCC_OscConfig>
 800110a:	1e03      	subs	r3, r0, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800110e:	f000 fb33 	bl	8001778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001112:	003b      	movs	r3, r7
 8001114:	2207      	movs	r2, #7
 8001116:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001118:	003b      	movs	r3, r7
 800111a:	2202      	movs	r2, #2
 800111c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	003b      	movs	r3, r7
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001124:	003b      	movs	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112a:	003b      	movs	r3, r7
 800112c:	2102      	movs	r1, #2
 800112e:	0018      	movs	r0, r3
 8001130:	f002 fec4 	bl	8003ebc <HAL_RCC_ClockConfig>
 8001134:	1e03      	subs	r3, r0, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001138:	f000 fb1e 	bl	8001778 <Error_Handler>
  }
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b013      	add	sp, #76	; 0x4c
 8001142:	bd90      	pop	{r4, r7, pc}

08001144 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	0018      	movs	r0, r3
 800114e:	230c      	movs	r3, #12
 8001150:	001a      	movs	r2, r3
 8001152:	2100      	movs	r1, #0
 8001154:	f003 fe00 	bl	8004d58 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001158:	4b3b      	ldr	r3, [pc, #236]	; (8001248 <MX_ADC1_Init+0x104>)
 800115a:	4a3c      	ldr	r2, [pc, #240]	; (800124c <MX_ADC1_Init+0x108>)
 800115c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800115e:	4b3a      	ldr	r3, [pc, #232]	; (8001248 <MX_ADC1_Init+0x104>)
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	0612      	lsls	r2, r2, #24
 8001164:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001166:	4b38      	ldr	r3, [pc, #224]	; (8001248 <MX_ADC1_Init+0x104>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116c:	4b36      	ldr	r3, [pc, #216]	; (8001248 <MX_ADC1_Init+0x104>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001172:	4b35      	ldr	r3, [pc, #212]	; (8001248 <MX_ADC1_Init+0x104>)
 8001174:	2280      	movs	r2, #128	; 0x80
 8001176:	0392      	lsls	r2, r2, #14
 8001178:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117a:	4b33      	ldr	r3, [pc, #204]	; (8001248 <MX_ADC1_Init+0x104>)
 800117c:	2204      	movs	r2, #4
 800117e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001180:	4b31      	ldr	r3, [pc, #196]	; (8001248 <MX_ADC1_Init+0x104>)
 8001182:	2200      	movs	r2, #0
 8001184:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001186:	4b30      	ldr	r3, [pc, #192]	; (8001248 <MX_ADC1_Init+0x104>)
 8001188:	2200      	movs	r2, #0
 800118a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800118c:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <MX_ADC1_Init+0x104>)
 800118e:	2200      	movs	r2, #0
 8001190:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 8001192:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <MX_ADC1_Init+0x104>)
 8001194:	2202      	movs	r2, #2
 8001196:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <MX_ADC1_Init+0x104>)
 800119a:	2220      	movs	r2, #32
 800119c:	2100      	movs	r1, #0
 800119e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80011a0:	4b29      	ldr	r3, [pc, #164]	; (8001248 <MX_ADC1_Init+0x104>)
 80011a2:	2298      	movs	r2, #152	; 0x98
 80011a4:	00d2      	lsls	r2, r2, #3
 80011a6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011a8:	4b27      	ldr	r3, [pc, #156]	; (8001248 <MX_ADC1_Init+0x104>)
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	00d2      	lsls	r2, r2, #3
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <MX_ADC1_Init+0x104>)
 80011b2:	222c      	movs	r2, #44	; 0x2c
 80011b4:	2101      	movs	r1, #1
 80011b6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b8:	4b23      	ldr	r3, [pc, #140]	; (8001248 <MX_ADC1_Init+0x104>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 80011be:	4b22      	ldr	r3, [pc, #136]	; (8001248 <MX_ADC1_Init+0x104>)
 80011c0:	2203      	movs	r2, #3
 80011c2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_12CYCLES_5;
 80011c4:	4b20      	ldr	r3, [pc, #128]	; (8001248 <MX_ADC1_Init+0x104>)
 80011c6:	2203      	movs	r2, #3
 80011c8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <MX_ADC1_Init+0x104>)
 80011cc:	223c      	movs	r2, #60	; 0x3c
 80011ce:	2101      	movs	r1, #1
 80011d0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <MX_ADC1_Init+0x104>)
 80011d4:	2218      	movs	r2, #24
 80011d6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_ADC1_Init+0x104>)
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_ADC1_Init+0x104>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_ADC1_Init+0x104>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_ADC1_Init+0x104>)
 80011ec:	0018      	movs	r0, r3
 80011ee:	f000 feb3 	bl	8001f58 <HAL_ADC_Init>
 80011f2:	1e03      	subs	r3, r0, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80011f6:	f000 fabf 	bl	8001778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4a14      	ldr	r2, [pc, #80]	; (8001250 <MX_ADC1_Init+0x10c>)
 80011fe:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2200      	movs	r2, #0
 8001204:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120c:	1d3a      	adds	r2, r7, #4
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_ADC1_Init+0x104>)
 8001210:	0011      	movs	r1, r2
 8001212:	0018      	movs	r0, r3
 8001214:	f001 f8e6 	bl	80023e4 <HAL_ADC_ConfigChannel>
 8001218:	1e03      	subs	r3, r0, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800121c:	f000 faac 	bl	8001778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <MX_ADC1_Init+0x110>)
 8001224:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2204      	movs	r2, #4
 800122a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122c:	1d3a      	adds	r2, r7, #4
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_ADC1_Init+0x104>)
 8001230:	0011      	movs	r1, r2
 8001232:	0018      	movs	r0, r3
 8001234:	f001 f8d6 	bl	80023e4 <HAL_ADC_ConfigChannel>
 8001238:	1e03      	subs	r3, r0, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 800123c:	f000 fa9c 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	b004      	add	sp, #16
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000034 	.word	0x20000034
 800124c:	40012400 	.word	0x40012400
 8001250:	1c000080 	.word	0x1c000080
 8001254:	20000100 	.word	0x20000100

08001258 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125e:	2310      	movs	r3, #16
 8001260:	18fb      	adds	r3, r7, r3
 8001262:	0018      	movs	r0, r3
 8001264:	2310      	movs	r3, #16
 8001266:	001a      	movs	r2, r3
 8001268:	2100      	movs	r1, #0
 800126a:	f003 fd75 	bl	8004d58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	0018      	movs	r0, r3
 8001272:	230c      	movs	r3, #12
 8001274:	001a      	movs	r2, r3
 8001276:	2100      	movs	r1, #0
 8001278:	f003 fd6e 	bl	8004d58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_TIM1_Init+0xac>)
 800127e:	4a22      	ldr	r2, [pc, #136]	; (8001308 <MX_TIM1_Init+0xb0>)
 8001280:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400-1;
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <MX_TIM1_Init+0xac>)
 8001284:	4a21      	ldr	r2, [pc, #132]	; (800130c <MX_TIM1_Init+0xb4>)
 8001286:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_TIM1_Init+0xac>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_TIM1_Init+0xac>)
 8001290:	4a1f      	ldr	r2, [pc, #124]	; (8001310 <MX_TIM1_Init+0xb8>)
 8001292:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_TIM1_Init+0xac>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_TIM1_Init+0xac>)
 800129c:	2200      	movs	r2, #0
 800129e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_TIM1_Init+0xac>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_TIM1_Init+0xac>)
 80012a8:	0018      	movs	r0, r3
 80012aa:	f003 f90b 	bl	80044c4 <HAL_TIM_Base_Init>
 80012ae:	1e03      	subs	r3, r0, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80012b2:	f000 fa61 	bl	8001778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b6:	2110      	movs	r1, #16
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	0152      	lsls	r2, r2, #5
 80012be:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012c0:	187a      	adds	r2, r7, r1
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_TIM1_Init+0xac>)
 80012c4:	0011      	movs	r1, r2
 80012c6:	0018      	movs	r0, r3
 80012c8:	f003 faa8 	bl	800481c <HAL_TIM_ConfigClockSource>
 80012cc:	1e03      	subs	r3, r0, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012d0:	f000 fa52 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e6:	1d3a      	adds	r2, r7, #4
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_TIM1_Init+0xac>)
 80012ea:	0011      	movs	r1, r2
 80012ec:	0018      	movs	r0, r3
 80012ee:	f003 fcb3 	bl	8004c58 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	1e03      	subs	r3, r0, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80012f6:	f000 fa3f 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b008      	add	sp, #32
 8001300:	bd80      	pop	{r7, pc}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	200000f4 	.word	0x200000f4
 8001308:	40012c00 	.word	0x40012c00
 800130c:	000018ff 	.word	0x000018ff
 8001310:	0000270f 	.word	0x0000270f

08001314 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131a:	2310      	movs	r3, #16
 800131c:	18fb      	adds	r3, r7, r3
 800131e:	0018      	movs	r0, r3
 8001320:	2310      	movs	r3, #16
 8001322:	001a      	movs	r2, r3
 8001324:	2100      	movs	r1, #0
 8001326:	f003 fd17 	bl	8004d58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	0018      	movs	r0, r3
 800132e:	230c      	movs	r3, #12
 8001330:	001a      	movs	r2, r3
 8001332:	2100      	movs	r1, #0
 8001334:	f003 fd10 	bl	8004d58 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <MX_TIM3_Init+0xa0>)
 800133a:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <MX_TIM3_Init+0xa4>)
 800133c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_TIM3_Init+0xa0>)
 8001340:	223f      	movs	r2, #63	; 0x3f
 8001342:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <MX_TIM3_Init+0xa0>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <MX_TIM3_Init+0xa0>)
 800134c:	4a1b      	ldr	r2, [pc, #108]	; (80013bc <MX_TIM3_Init+0xa8>)
 800134e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001350:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <MX_TIM3_Init+0xa0>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <MX_TIM3_Init+0xa0>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <MX_TIM3_Init+0xa0>)
 800135e:	0018      	movs	r0, r3
 8001360:	f003 f8b0 	bl	80044c4 <HAL_TIM_Base_Init>
 8001364:	1e03      	subs	r3, r0, #0
 8001366:	d001      	beq.n	800136c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001368:	f000 fa06 	bl	8001778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136c:	2110      	movs	r1, #16
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2280      	movs	r2, #128	; 0x80
 8001372:	0152      	lsls	r2, r2, #5
 8001374:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001376:	187a      	adds	r2, r7, r1
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_TIM3_Init+0xa0>)
 800137a:	0011      	movs	r1, r2
 800137c:	0018      	movs	r0, r3
 800137e:	f003 fa4d 	bl	800481c <HAL_TIM_ConfigClockSource>
 8001382:	1e03      	subs	r3, r0, #0
 8001384:	d001      	beq.n	800138a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001386:	f000 f9f7 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2220      	movs	r2, #32
 800138e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001396:	1d3a      	adds	r2, r7, #4
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_TIM3_Init+0xa0>)
 800139a:	0011      	movs	r1, r2
 800139c:	0018      	movs	r0, r3
 800139e:	f003 fc5b 	bl	8004c58 <HAL_TIMEx_MasterConfigSynchronization>
 80013a2:	1e03      	subs	r3, r0, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80013a6:	f000 f9e7 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b008      	add	sp, #32
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	20000140 	.word	0x20000140
 80013b8:	40000400 	.word	0x40000400
 80013bc:	000003e7 	.word	0x000003e7

080013c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_DMA_Init+0x38>)
 80013c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MX_DMA_Init+0x38>)
 80013cc:	2101      	movs	r1, #1
 80013ce:	430a      	orrs	r2, r1
 80013d0:	639a      	str	r2, [r3, #56]	; 0x38
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_DMA_Init+0x38>)
 80013d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d6:	2201      	movs	r2, #1
 80013d8:	4013      	ands	r3, r2
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2101      	movs	r1, #1
 80013e2:	2009      	movs	r0, #9
 80013e4:	f001 fdaa 	bl	8002f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013e8:	2009      	movs	r0, #9
 80013ea:	f001 fdbc 	bl	8002f66 <HAL_NVIC_EnableIRQ>

}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	40021000 	.word	0x40021000

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	240c      	movs	r4, #12
 8001404:	193b      	adds	r3, r7, r4
 8001406:	0018      	movs	r0, r3
 8001408:	2314      	movs	r3, #20
 800140a:	001a      	movs	r2, r3
 800140c:	2100      	movs	r1, #0
 800140e:	f003 fca3 	bl	8004d58 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	4b49      	ldr	r3, [pc, #292]	; (8001538 <MX_GPIO_Init+0x13c>)
 8001414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001416:	4b48      	ldr	r3, [pc, #288]	; (8001538 <MX_GPIO_Init+0x13c>)
 8001418:	2102      	movs	r1, #2
 800141a:	430a      	orrs	r2, r1
 800141c:	635a      	str	r2, [r3, #52]	; 0x34
 800141e:	4b46      	ldr	r3, [pc, #280]	; (8001538 <MX_GPIO_Init+0x13c>)
 8001420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001422:	2202      	movs	r2, #2
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	4b43      	ldr	r3, [pc, #268]	; (8001538 <MX_GPIO_Init+0x13c>)
 800142c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800142e:	4b42      	ldr	r3, [pc, #264]	; (8001538 <MX_GPIO_Init+0x13c>)
 8001430:	2104      	movs	r1, #4
 8001432:	430a      	orrs	r2, r1
 8001434:	635a      	str	r2, [r3, #52]	; 0x34
 8001436:	4b40      	ldr	r3, [pc, #256]	; (8001538 <MX_GPIO_Init+0x13c>)
 8001438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143a:	2204      	movs	r2, #4
 800143c:	4013      	ands	r3, r2
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <MX_GPIO_Init+0x13c>)
 8001444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001446:	4b3c      	ldr	r3, [pc, #240]	; (8001538 <MX_GPIO_Init+0x13c>)
 8001448:	2101      	movs	r1, #1
 800144a:	430a      	orrs	r2, r1
 800144c:	635a      	str	r2, [r3, #52]	; 0x34
 800144e:	4b3a      	ldr	r3, [pc, #232]	; (8001538 <MX_GPIO_Init+0x13c>)
 8001450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001452:	2201      	movs	r2, #1
 8001454:	4013      	ands	r3, r2
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, T1_Pin|T4_Pin|T3_Pin|T2_Pin, GPIO_PIN_SET);
 800145a:	4938      	ldr	r1, [pc, #224]	; (800153c <MX_GPIO_Init+0x140>)
 800145c:	23a0      	movs	r3, #160	; 0xa0
 800145e:	05db      	lsls	r3, r3, #23
 8001460:	2201      	movs	r2, #1
 8001462:	0018      	movs	r0, r3
 8001464:	f002 f97f 	bl	8003766 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Zero_negative_Pin */
  GPIO_InitStruct.Pin = Zero_negative_Pin;
 8001468:	193b      	adds	r3, r7, r4
 800146a:	2280      	movs	r2, #128	; 0x80
 800146c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800146e:	193b      	adds	r3, r7, r4
 8001470:	2284      	movs	r2, #132	; 0x84
 8001472:	0392      	lsls	r2, r2, #14
 8001474:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001476:	193b      	adds	r3, r7, r4
 8001478:	2201      	movs	r2, #1
 800147a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Zero_negative_GPIO_Port, &GPIO_InitStruct);
 800147c:	193b      	adds	r3, r7, r4
 800147e:	4a30      	ldr	r2, [pc, #192]	; (8001540 <MX_GPIO_Init+0x144>)
 8001480:	0019      	movs	r1, r3
 8001482:	0010      	movs	r0, r2
 8001484:	f001 ffee 	bl	8003464 <HAL_GPIO_Init>

  /*Configure GPIO pin : Zero_positive_Pin */
  GPIO_InitStruct.Pin = Zero_positive_Pin;
 8001488:	193b      	adds	r3, r7, r4
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800148e:	193b      	adds	r3, r7, r4
 8001490:	2284      	movs	r2, #132	; 0x84
 8001492:	0392      	lsls	r2, r2, #14
 8001494:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001496:	193b      	adds	r3, r7, r4
 8001498:	2201      	movs	r2, #1
 800149a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Zero_positive_GPIO_Port, &GPIO_InitStruct);
 800149c:	193a      	adds	r2, r7, r4
 800149e:	23a0      	movs	r3, #160	; 0xa0
 80014a0:	05db      	lsls	r3, r3, #23
 80014a2:	0011      	movs	r1, r2
 80014a4:	0018      	movs	r0, r3
 80014a6:	f001 ffdd 	bl	8003464 <HAL_GPIO_Init>

  /*Configure GPIO pins : T1_Pin T4_Pin T3_Pin T2_Pin */
  GPIO_InitStruct.Pin = T1_Pin|T4_Pin|T3_Pin|T2_Pin;
 80014aa:	193b      	adds	r3, r7, r4
 80014ac:	4a23      	ldr	r2, [pc, #140]	; (800153c <MX_GPIO_Init+0x140>)
 80014ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	193b      	adds	r3, r7, r4
 80014b2:	2201      	movs	r2, #1
 80014b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	2201      	movs	r2, #1
 80014ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	193b      	adds	r3, r7, r4
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	193a      	adds	r2, r7, r4
 80014c4:	23a0      	movs	r3, #160	; 0xa0
 80014c6:	05db      	lsls	r3, r3, #23
 80014c8:	0011      	movs	r1, r2
 80014ca:	0018      	movs	r0, r3
 80014cc:	f001 ffca 	bl	8003464 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch_Pin */
  GPIO_InitStruct.Pin = Switch_Pin;
 80014d0:	193b      	adds	r3, r7, r4
 80014d2:	2208      	movs	r2, #8
 80014d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d6:	193b      	adds	r3, r7, r4
 80014d8:	2200      	movs	r2, #0
 80014da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014dc:	193b      	adds	r3, r7, r4
 80014de:	2202      	movs	r2, #2
 80014e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Switch_GPIO_Port, &GPIO_InitStruct);
 80014e2:	193a      	adds	r2, r7, r4
 80014e4:	23a0      	movs	r3, #160	; 0xa0
 80014e6:	05db      	lsls	r3, r3, #23
 80014e8:	0011      	movs	r1, r2
 80014ea:	0018      	movs	r0, r3
 80014ec:	f001 ffba 	bl	8003464 <HAL_GPIO_Init>

  /*Configure GPIO pins : BAD5_Pin BAD6_Pin */
  GPIO_InitStruct.Pin = BAD5_Pin|BAD6_Pin;
 80014f0:	193b      	adds	r3, r7, r4
 80014f2:	2260      	movs	r2, #96	; 0x60
 80014f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f6:	193b      	adds	r3, r7, r4
 80014f8:	2200      	movs	r2, #0
 80014fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	193b      	adds	r3, r7, r4
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	193a      	adds	r2, r7, r4
 8001504:	23a0      	movs	r3, #160	; 0xa0
 8001506:	05db      	lsls	r3, r3, #23
 8001508:	0011      	movs	r1, r2
 800150a:	0018      	movs	r0, r3
 800150c:	f001 ffaa 	bl	8003464 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2005      	movs	r0, #5
 8001516:	f001 fd11 	bl	8002f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800151a:	2005      	movs	r0, #5
 800151c:	f001 fd23 	bl	8002f66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	2007      	movs	r0, #7
 8001526:	f001 fd09 	bl	8002f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800152a:	2007      	movs	r0, #7
 800152c:	f001 fd1b 	bl	8002f66 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001530:	46c0      	nop			; (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	b009      	add	sp, #36	; 0x24
 8001536:	bd90      	pop	{r4, r7, pc}
 8001538:	40021000 	.word	0x40021000
 800153c:	00000816 	.word	0x00000816
 8001540:	50000400 	.word	0x50000400

08001544 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */

// ----------------------------Обратотка прерываний от точек перехода нуля------------------

__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	0002      	movs	r2, r0
 800154c:	1dbb      	adds	r3, r7, #6
 800154e:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == Zero_positive_Pin) {  // если прерывание пришло от положительной волны то:
 8001550:	1dbb      	adds	r3, r7, #6
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d13f      	bne.n	80015d8 <HAL_GPIO_EXTI_Falling_Callback+0x94>
		HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);// сразу же отключаем прерывания на этом пине
 8001558:	2005      	movs	r0, #5
 800155a:	f001 fd14 	bl	8002f86 <HAL_NVIC_DisableIRQ>
		time_irq = HAL_GetTick();		  // сохраним текущую временную метку (для отсчёта длительности отключки)
 800155e:	f000 fb99 	bl	8001c94 <HAL_GetTick>
 8001562:	0002      	movs	r2, r0
 8001564:	4b41      	ldr	r3, [pc, #260]	; (800166c <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 8001566:	601a      	str	r2, [r3, #0]

		for (uint16_t var = 0; var < Alpha; ++var) __NOP(); // задержка угла альфа
 8001568:	230e      	movs	r3, #14
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	2200      	movs	r2, #0
 800156e:	801a      	strh	r2, [r3, #0]
 8001570:	e006      	b.n	8001580 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	220e      	movs	r2, #14
 8001576:	18bb      	adds	r3, r7, r2
 8001578:	18ba      	adds	r2, r7, r2
 800157a:	8812      	ldrh	r2, [r2, #0]
 800157c:	3201      	adds	r2, #1
 800157e:	801a      	strh	r2, [r3, #0]
 8001580:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	220e      	movs	r2, #14
 8001586:	18ba      	adds	r2, r7, r2
 8001588:	8812      	ldrh	r2, [r2, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d3f1      	bcc.n	8001572 <HAL_GPIO_EXTI_Falling_Callback+0x2e>

		HAL_GPIO_WritePin(GPIOA, T1_Pin | T2_Pin, OFF);		// включаем тиристоры Т1 и Т2
 800158e:	4939      	ldr	r1, [pc, #228]	; (8001674 <HAL_GPIO_EXTI_Falling_Callback+0x130>)
 8001590:	23a0      	movs	r3, #160	; 0xa0
 8001592:	05db      	lsls	r3, r3, #23
 8001594:	2200      	movs	r2, #0
 8001596:	0018      	movs	r0, r3
 8001598:	f002 f8e5 	bl	8003766 <HAL_GPIO_WritePin>

		for (uint16_t var = 0; var < Pulse; ++var) __NOP(); // задержка длинны импульса
 800159c:	230c      	movs	r3, #12
 800159e:	18fb      	adds	r3, r7, r3
 80015a0:	2200      	movs	r2, #0
 80015a2:	801a      	strh	r2, [r3, #0]
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_EXTI_Falling_Callback+0x70>
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	220c      	movs	r2, #12
 80015aa:	18bb      	adds	r3, r7, r2
 80015ac:	18ba      	adds	r2, r7, r2
 80015ae:	8812      	ldrh	r2, [r2, #0]
 80015b0:	3201      	adds	r2, #1
 80015b2:	801a      	strh	r2, [r3, #0]
 80015b4:	4b30      	ldr	r3, [pc, #192]	; (8001678 <HAL_GPIO_EXTI_Falling_Callback+0x134>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	220c      	movs	r2, #12
 80015ba:	18ba      	adds	r2, r7, r2
 80015bc:	8812      	ldrh	r2, [r2, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d3f1      	bcc.n	80015a6 <HAL_GPIO_EXTI_Falling_Callback+0x62>

		HAL_GPIO_WritePin(GPIOA, T1_Pin | T2_Pin, ON);		// выключаем тиристоры Т1 иТ2
 80015c2:	492c      	ldr	r1, [pc, #176]	; (8001674 <HAL_GPIO_EXTI_Falling_Callback+0x130>)
 80015c4:	23a0      	movs	r3, #160	; 0xa0
 80015c6:	05db      	lsls	r3, r3, #23
 80015c8:	2201      	movs	r2, #1
 80015ca:	0018      	movs	r0, r3
 80015cc:	f002 f8cb 	bl	8003766 <HAL_GPIO_WritePin>

		flag_irq_pos = 1;									//поднимаем флаг
 80015d0:	4b2a      	ldr	r3, [pc, #168]	; (800167c <HAL_GPIO_EXTI_Falling_Callback+0x138>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, T3_Pin | T4_Pin, ON);
		flag_irq_neg = 1;
	} else {
		__NOP();
	}
}
 80015d6:	e044      	b.n	8001662 <HAL_GPIO_EXTI_Falling_Callback+0x11e>
	} else if (GPIO_Pin == Zero_negative_Pin) { 			//если прерывание пришло от отрицательной волны то:
 80015d8:	1dbb      	adds	r3, r7, #6
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	2b80      	cmp	r3, #128	; 0x80
 80015de:	d13f      	bne.n	8001660 <HAL_GPIO_EXTI_Falling_Callback+0x11c>
		HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 80015e0:	2007      	movs	r0, #7
 80015e2:	f001 fcd0 	bl	8002f86 <HAL_NVIC_DisableIRQ>
		time_irq = HAL_GetTick();
 80015e6:	f000 fb55 	bl	8001c94 <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 80015ee:	601a      	str	r2, [r3, #0]
		for (uint16_t var = 0; var < Alpha; ++var) __NOP();
 80015f0:	230a      	movs	r3, #10
 80015f2:	18fb      	adds	r3, r7, r3
 80015f4:	2200      	movs	r2, #0
 80015f6:	801a      	strh	r2, [r3, #0]
 80015f8:	e006      	b.n	8001608 <HAL_GPIO_EXTI_Falling_Callback+0xc4>
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	220a      	movs	r2, #10
 80015fe:	18bb      	adds	r3, r7, r2
 8001600:	18ba      	adds	r2, r7, r2
 8001602:	8812      	ldrh	r2, [r2, #0]
 8001604:	3201      	adds	r2, #1
 8001606:	801a      	strh	r2, [r3, #0]
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	220a      	movs	r2, #10
 800160e:	18ba      	adds	r2, r7, r2
 8001610:	8812      	ldrh	r2, [r2, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d3f1      	bcc.n	80015fa <HAL_GPIO_EXTI_Falling_Callback+0xb6>
		HAL_GPIO_WritePin(GPIOA, T3_Pin | T4_Pin, OFF);
 8001616:	23a0      	movs	r3, #160	; 0xa0
 8001618:	05db      	lsls	r3, r3, #23
 800161a:	2200      	movs	r2, #0
 800161c:	2114      	movs	r1, #20
 800161e:	0018      	movs	r0, r3
 8001620:	f002 f8a1 	bl	8003766 <HAL_GPIO_WritePin>
		for (uint16_t var = 0; var < Pulse; ++var) __NOP();
 8001624:	2308      	movs	r3, #8
 8001626:	18fb      	adds	r3, r7, r3
 8001628:	2200      	movs	r2, #0
 800162a:	801a      	strh	r2, [r3, #0]
 800162c:	e006      	b.n	800163c <HAL_GPIO_EXTI_Falling_Callback+0xf8>
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	2208      	movs	r2, #8
 8001632:	18bb      	adds	r3, r7, r2
 8001634:	18ba      	adds	r2, r7, r2
 8001636:	8812      	ldrh	r2, [r2, #0]
 8001638:	3201      	adds	r2, #1
 800163a:	801a      	strh	r2, [r3, #0]
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_GPIO_EXTI_Falling_Callback+0x134>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	2208      	movs	r2, #8
 8001642:	18ba      	adds	r2, r7, r2
 8001644:	8812      	ldrh	r2, [r2, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d3f1      	bcc.n	800162e <HAL_GPIO_EXTI_Falling_Callback+0xea>
		HAL_GPIO_WritePin(GPIOA, T3_Pin | T4_Pin, ON);
 800164a:	23a0      	movs	r3, #160	; 0xa0
 800164c:	05db      	lsls	r3, r3, #23
 800164e:	2201      	movs	r2, #1
 8001650:	2114      	movs	r1, #20
 8001652:	0018      	movs	r0, r3
 8001654:	f002 f887 	bl	8003766 <HAL_GPIO_WritePin>
		flag_irq_neg = 1;
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_GPIO_EXTI_Falling_Callback+0x13c>)
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
}
 800165e:	e000      	b.n	8001662 <HAL_GPIO_EXTI_Falling_Callback+0x11e>
		__NOP();
 8001660:	46c0      	nop			; (mov r8, r8)
}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b004      	add	sp, #16
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	200001a0 	.word	0x200001a0
 8001670:	20000004 	.word	0x20000004
 8001674:	00000802 	.word	0x00000802
 8001678:	2000000a 	.word	0x2000000a
 800167c:	2000019c 	.word	0x2000019c
 8001680:	2000019d 	.word	0x2000019d

08001684 <HAL_ADC_ConvCpltCallback>:


// ---------------------------------Обработка прерывания от DMA---------------------------------------

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	 * и домножим на погрежность резисторов (выяснить экспериментально сейчас 1,0099).
	 * Всё это посчитаем заранее ((3,3*2/32767)*1.0099 = 0,00020341624195074313)и получим напряжение.
	 * Далее из этого напряжения вычтем 2,5В и разделим на чувствительность датчика(вместо деления сделаем умножение),
	 * и получим наш ток.
	 */
	rawVoltage = (float32_t) adcData[0] * 0.00019940794091616566f;
 800168c:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <HAL_ADC_ConvCpltCallback+0xc4>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	b29b      	uxth	r3, r3
 8001692:	0018      	movs	r0, r3
 8001694:	f7ff fbc4 	bl	8000e20 <__aeabi_ui2f>
 8001698:	1c03      	adds	r3, r0, #0
 800169a:	492c      	ldr	r1, [pc, #176]	; (800174c <HAL_ADC_ConvCpltCallback+0xc8>)
 800169c:	1c18      	adds	r0, r3, #0
 800169e:	f7ff f85f 	bl	8000760 <__aeabi_fmul>
 80016a2:	1c03      	adds	r3, r0, #0
 80016a4:	1c1a      	adds	r2, r3, #0
 80016a6:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <HAL_ADC_ConvCpltCallback+0xcc>)
 80016a8:	601a      	str	r2, [r3, #0]

	Current = (rawVoltage - 2.5f) * 10U;// измеренный ток ((rawVoltage - 2.5)/sensitivity = (rawVoltage - 2.5)*10)
 80016aa:	4b29      	ldr	r3, [pc, #164]	; (8001750 <HAL_ADC_ConvCpltCallback+0xcc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4929      	ldr	r1, [pc, #164]	; (8001754 <HAL_ADC_ConvCpltCallback+0xd0>)
 80016b0:	1c18      	adds	r0, r3, #0
 80016b2:	f7ff f9a3 	bl	80009fc <__aeabi_fsub>
 80016b6:	1c03      	adds	r3, r0, #0
 80016b8:	4927      	ldr	r1, [pc, #156]	; (8001758 <HAL_ADC_ConvCpltCallback+0xd4>)
 80016ba:	1c18      	adds	r0, r3, #0
 80016bc:	f7ff f850 	bl	8000760 <__aeabi_fmul>
 80016c0:	1c03      	adds	r3, r0, #0
 80016c2:	1c1a      	adds	r2, r3, #0
 80016c4:	4b25      	ldr	r3, [pc, #148]	; (800175c <HAL_ADC_ConvCpltCallback+0xd8>)
 80016c6:	601a      	str	r2, [r3, #0]
	Current_filtr = (1U - 0.05f) * Current_filtr + 0.05f * Current;// фильтр (скользящее среднее)
 80016c8:	4b25      	ldr	r3, [pc, #148]	; (8001760 <HAL_ADC_ConvCpltCallback+0xdc>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4925      	ldr	r1, [pc, #148]	; (8001764 <HAL_ADC_ConvCpltCallback+0xe0>)
 80016ce:	1c18      	adds	r0, r3, #0
 80016d0:	f7ff f846 	bl	8000760 <__aeabi_fmul>
 80016d4:	1c03      	adds	r3, r0, #0
 80016d6:	1c1c      	adds	r4, r3, #0
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <HAL_ADC_ConvCpltCallback+0xd8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4922      	ldr	r1, [pc, #136]	; (8001768 <HAL_ADC_ConvCpltCallback+0xe4>)
 80016de:	1c18      	adds	r0, r3, #0
 80016e0:	f7ff f83e 	bl	8000760 <__aeabi_fmul>
 80016e4:	1c03      	adds	r3, r0, #0
 80016e6:	1c19      	adds	r1, r3, #0
 80016e8:	1c20      	adds	r0, r4, #0
 80016ea:	f7fe fde9 	bl	80002c0 <__aeabi_fadd>
 80016ee:	1c03      	adds	r3, r0, #0
 80016f0:	1c1a      	adds	r2, r3, #0
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_ADC_ConvCpltCallback+0xdc>)
 80016f4:	601a      	str	r2, [r3, #0]

	refAlpha = (1U - 0.1f) * refAlpha + 0.1f * adcData[1]; //фильтрованное задание от потенциометра
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_ADC_ConvCpltCallback+0xe8>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	0018      	movs	r0, r3
 80016fc:	f7ff fb3e 	bl	8000d7c <__aeabi_i2f>
 8001700:	1c03      	adds	r3, r0, #0
 8001702:	491b      	ldr	r1, [pc, #108]	; (8001770 <HAL_ADC_ConvCpltCallback+0xec>)
 8001704:	1c18      	adds	r0, r3, #0
 8001706:	f7ff f82b 	bl	8000760 <__aeabi_fmul>
 800170a:	1c03      	adds	r3, r0, #0
 800170c:	1c1c      	adds	r4, r3, #0
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001710:	885b      	ldrh	r3, [r3, #2]
 8001712:	b29b      	uxth	r3, r3
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff fb31 	bl	8000d7c <__aeabi_i2f>
 800171a:	1c03      	adds	r3, r0, #0
 800171c:	4915      	ldr	r1, [pc, #84]	; (8001774 <HAL_ADC_ConvCpltCallback+0xf0>)
 800171e:	1c18      	adds	r0, r3, #0
 8001720:	f7ff f81e 	bl	8000760 <__aeabi_fmul>
 8001724:	1c03      	adds	r3, r0, #0
 8001726:	1c19      	adds	r1, r3, #0
 8001728:	1c20      	adds	r0, r4, #0
 800172a:	f7fe fdc9 	bl	80002c0 <__aeabi_fadd>
 800172e:	1c03      	adds	r3, r0, #0
 8001730:	1c18      	adds	r0, r3, #0
 8001732:	f7fe fdad 	bl	8000290 <__aeabi_f2uiz>
 8001736:	0003      	movs	r3, r0
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <HAL_ADC_ConvCpltCallback+0xe8>)
 800173c:	801a      	strh	r2, [r3, #0]

}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	b003      	add	sp, #12
 8001744:	bd90      	pop	{r4, r7, pc}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	2000018c 	.word	0x2000018c
 800174c:	39511829 	.word	0x39511829
 8001750:	20000190 	.word	0x20000190
 8001754:	40200000 	.word	0x40200000
 8001758:	41200000 	.word	0x41200000
 800175c:	20000194 	.word	0x20000194
 8001760:	20000198 	.word	0x20000198
 8001764:	3f733333 	.word	0x3f733333
 8001768:	3d4ccccd 	.word	0x3d4ccccd
 800176c:	20000006 	.word	0x20000006
 8001770:	3f666666 	.word	0x3f666666
 8001774:	3dcccccd 	.word	0x3dcccccd

08001778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177c:	b672      	cpsid	i
}
 800177e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001780:	e7fe      	b.n	8001780 <Error_Handler+0x8>
	...

08001784 <PID_init>:

pid_p pid;

// заполнение структуры для регулятора PI
void PID_init()
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
    pid.targetCurrent= 0.0f;		// заданное значение тока
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <PID_init+0x30>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
    pid.ActualCurrent= 0.0f;		// фактическое значение ADC тока
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <PID_init+0x30>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
    pid.err= 0.0f;				    // текущее ошибка фактического и заданного
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <PID_init+0x30>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
    pid.integral= 0.0f;			  	// значение интеграла
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <PID_init+0x30>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
    pid.Kp= 800.0f;				    // пропорциональный коэффициент
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <PID_init+0x30>)
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <PID_init+0x34>)
 80017a4:	60da      	str	r2, [r3, #12]
    pid.Ki= 7.4f;				    	// интегральный коэффициент
 80017a6:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <PID_init+0x30>)
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <PID_init+0x38>)
 80017aa:	611a      	str	r2, [r3, #16]

}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	200001a4 	.word	0x200001a4
 80017b8:	44480000 	.word	0x44480000
 80017bc:	40eccccd 	.word	0x40eccccd

080017c0 <PID_realize>:

float PID_realize( float32_t c, float32_t c_r)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
    pid.targetCurrent = c;									// задание на ток
 80017ca:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <PID_realize+0xe4>)
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	601a      	str	r2, [r3, #0]
    pid.ActualCurrent = c_r;								// измеренное значение тока
 80017d0:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <PID_realize+0xe4>)
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	605a      	str	r2, [r3, #4]
    pid.err = pid.targetCurrent - pid.ActualCurrent;		// расчёт ошибки
 80017d6:	4b33      	ldr	r3, [pc, #204]	; (80018a4 <PID_realize+0xe4>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <PID_realize+0xe4>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	1c19      	adds	r1, r3, #0
 80017e0:	1c10      	adds	r0, r2, #0
 80017e2:	f7ff f90b 	bl	80009fc <__aeabi_fsub>
 80017e6:	1c03      	adds	r3, r0, #0
 80017e8:	1c1a      	adds	r2, r3, #0
 80017ea:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <PID_realize+0xe4>)
 80017ec:	609a      	str	r2, [r3, #8]
    pid.integral += pid.err;								// накопление интеграла
 80017ee:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <PID_realize+0xe4>)
 80017f0:	699a      	ldr	r2, [r3, #24]
 80017f2:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <PID_realize+0xe4>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	1c19      	adds	r1, r3, #0
 80017f8:	1c10      	adds	r0, r2, #0
 80017fa:	f7fe fd61 	bl	80002c0 <__aeabi_fadd>
 80017fe:	1c03      	adds	r3, r0, #0
 8001800:	1c1a      	adds	r2, r3, #0
 8001802:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <PID_realize+0xe4>)
 8001804:	619a      	str	r2, [r3, #24]
        if (pid.integral > 1000U) {pid.integral = 1000U;}	// насыщение интеграла
 8001806:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <PID_realize+0xe4>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	4927      	ldr	r1, [pc, #156]	; (80018a8 <PID_realize+0xe8>)
 800180c:	1c18      	adds	r0, r3, #0
 800180e:	f7fe fd2b 	bl	8000268 <__aeabi_fcmpgt>
 8001812:	1e03      	subs	r3, r0, #0
 8001814:	d003      	beq.n	800181e <PID_realize+0x5e>
 8001816:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <PID_realize+0xe4>)
 8001818:	4a23      	ldr	r2, [pc, #140]	; (80018a8 <PID_realize+0xe8>)
 800181a:	619a      	str	r2, [r3, #24]
 800181c:	e00a      	b.n	8001834 <PID_realize+0x74>
    	else if (pid.integral < 0U) {pid.integral = 0U;}
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <PID_realize+0xe4>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2100      	movs	r1, #0
 8001824:	1c18      	adds	r0, r3, #0
 8001826:	f7fe fd0b 	bl	8000240 <__aeabi_fcmplt>
 800182a:	1e03      	subs	r3, r0, #0
 800182c:	d002      	beq.n	8001834 <PID_realize+0x74>
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <PID_realize+0xe4>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]

    pid.result = (pid.Kp * pid.err) + (pid.integral * pid.Ki);// формула ПИ
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <PID_realize+0xe4>)
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <PID_realize+0xe4>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	1c19      	adds	r1, r3, #0
 800183e:	1c10      	adds	r0, r2, #0
 8001840:	f7fe ff8e 	bl	8000760 <__aeabi_fmul>
 8001844:	1c03      	adds	r3, r0, #0
 8001846:	1c1c      	adds	r4, r3, #0
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <PID_realize+0xe4>)
 800184a:	699a      	ldr	r2, [r3, #24]
 800184c:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <PID_realize+0xe4>)
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	1c19      	adds	r1, r3, #0
 8001852:	1c10      	adds	r0, r2, #0
 8001854:	f7fe ff84 	bl	8000760 <__aeabi_fmul>
 8001858:	1c03      	adds	r3, r0, #0
 800185a:	1c19      	adds	r1, r3, #0
 800185c:	1c20      	adds	r0, r4, #0
 800185e:	f7fe fd2f 	bl	80002c0 <__aeabi_fadd>
 8001862:	1c03      	adds	r3, r0, #0
 8001864:	1c1a      	adds	r2, r3, #0
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <PID_realize+0xe4>)
 8001868:	615a      	str	r2, [r3, #20]
    if (pid.result > 10000U) {pid.result = 10000U;}				// ограничение регулятора
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <PID_realize+0xe4>)
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	490f      	ldr	r1, [pc, #60]	; (80018ac <PID_realize+0xec>)
 8001870:	1c18      	adds	r0, r3, #0
 8001872:	f7fe fcf9 	bl	8000268 <__aeabi_fcmpgt>
 8001876:	1e03      	subs	r3, r0, #0
 8001878:	d003      	beq.n	8001882 <PID_realize+0xc2>
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <PID_realize+0xe4>)
 800187c:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <PID_realize+0xec>)
 800187e:	615a      	str	r2, [r3, #20]
 8001880:	e00a      	b.n	8001898 <PID_realize+0xd8>
        else if (pid.result < 0U) {pid.result = 0U;}
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <PID_realize+0xe4>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	2100      	movs	r1, #0
 8001888:	1c18      	adds	r0, r3, #0
 800188a:	f7fe fcd9 	bl	8000240 <__aeabi_fcmplt>
 800188e:	1e03      	subs	r3, r0, #0
 8001890:	d002      	beq.n	8001898 <PID_realize+0xd8>
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <PID_realize+0xe4>)
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]

    return pid.result;
 8001898:	4b02      	ldr	r3, [pc, #8]	; (80018a4 <PID_realize+0xe4>)
 800189a:	695b      	ldr	r3, [r3, #20]
}
 800189c:	1c18      	adds	r0, r3, #0
 800189e:	46bd      	mov	sp, r7
 80018a0:	b003      	add	sp, #12
 80018a2:	bd90      	pop	{r4, r7, pc}
 80018a4:	200001a4 	.word	0x200001a4
 80018a8:	447a0000 	.word	0x447a0000
 80018ac:	461c4000 	.word	0x461c4000

080018b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <HAL_MspInit+0x44>)
 80018b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <HAL_MspInit+0x44>)
 80018bc:	2101      	movs	r1, #1
 80018be:	430a      	orrs	r2, r1
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_MspInit+0x44>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	2201      	movs	r2, #1
 80018c8:	4013      	ands	r3, r2
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_MspInit+0x44>)
 80018d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_MspInit+0x44>)
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	0549      	lsls	r1, r1, #21
 80018d8:	430a      	orrs	r2, r1
 80018da:	63da      	str	r2, [r3, #60]	; 0x3c
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_MspInit+0x44>)
 80018de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	055b      	lsls	r3, r3, #21
 80018e4:	4013      	ands	r3, r2
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b002      	add	sp, #8
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b08b      	sub	sp, #44	; 0x2c
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	2414      	movs	r4, #20
 8001902:	193b      	adds	r3, r7, r4
 8001904:	0018      	movs	r0, r3
 8001906:	2314      	movs	r3, #20
 8001908:	001a      	movs	r2, r3
 800190a:	2100      	movs	r1, #0
 800190c:	f003 fa24 	bl	8004d58 <memset>
  if(hadc->Instance==ADC1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a3b      	ldr	r2, [pc, #236]	; (8001a04 <HAL_ADC_MspInit+0x10c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d16f      	bne.n	80019fa <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800191a:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_ADC_MspInit+0x110>)
 800191c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800191e:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <HAL_ADC_MspInit+0x110>)
 8001920:	2180      	movs	r1, #128	; 0x80
 8001922:	0349      	lsls	r1, r1, #13
 8001924:	430a      	orrs	r2, r1
 8001926:	641a      	str	r2, [r3, #64]	; 0x40
 8001928:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <HAL_ADC_MspInit+0x110>)
 800192a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	035b      	lsls	r3, r3, #13
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <HAL_ADC_MspInit+0x110>)
 8001938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800193a:	4b33      	ldr	r3, [pc, #204]	; (8001a08 <HAL_ADC_MspInit+0x110>)
 800193c:	2101      	movs	r1, #1
 800193e:	430a      	orrs	r2, r1
 8001940:	635a      	str	r2, [r3, #52]	; 0x34
 8001942:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <HAL_ADC_MspInit+0x110>)
 8001944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001946:	2201      	movs	r2, #1
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <HAL_ADC_MspInit+0x110>)
 8001950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001952:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <HAL_ADC_MspInit+0x110>)
 8001954:	2102      	movs	r1, #2
 8001956:	430a      	orrs	r2, r1
 8001958:	635a      	str	r2, [r3, #52]	; 0x34
 800195a:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HAL_ADC_MspInit+0x110>)
 800195c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195e:	2202      	movs	r2, #2
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001966:	193b      	adds	r3, r7, r4
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196c:	193b      	adds	r3, r7, r4
 800196e:	2203      	movs	r2, #3
 8001970:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	193b      	adds	r3, r7, r4
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	193a      	adds	r2, r7, r4
 800197a:	23a0      	movs	r3, #160	; 0xa0
 800197c:	05db      	lsls	r3, r3, #23
 800197e:	0011      	movs	r1, r2
 8001980:	0018      	movs	r0, r3
 8001982:	f001 fd6f 	bl	8003464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Pot_Pin;
 8001986:	193b      	adds	r3, r7, r4
 8001988:	2201      	movs	r2, #1
 800198a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198c:	193b      	adds	r3, r7, r4
 800198e:	2203      	movs	r2, #3
 8001990:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	193b      	adds	r3, r7, r4
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Pot_GPIO_Port, &GPIO_InitStruct);
 8001998:	193b      	adds	r3, r7, r4
 800199a:	4a1c      	ldr	r2, [pc, #112]	; (8001a0c <HAL_ADC_MspInit+0x114>)
 800199c:	0019      	movs	r1, r3
 800199e:	0010      	movs	r0, r2
 80019a0:	f001 fd60 	bl	8003464 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <HAL_ADC_MspInit+0x118>)
 80019a6:	4a1b      	ldr	r2, [pc, #108]	; (8001a14 <HAL_ADC_MspInit+0x11c>)
 80019a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_ADC_MspInit+0x118>)
 80019ac:	2205      	movs	r2, #5
 80019ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_ADC_MspInit+0x118>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_ADC_MspInit+0x118>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_ADC_MspInit+0x118>)
 80019be:	2280      	movs	r2, #128	; 0x80
 80019c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HAL_ADC_MspInit+0x118>)
 80019c4:	2280      	movs	r2, #128	; 0x80
 80019c6:	0052      	lsls	r2, r2, #1
 80019c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_ADC_MspInit+0x118>)
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	00d2      	lsls	r2, r2, #3
 80019d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_ADC_MspInit+0x118>)
 80019d4:	2220      	movs	r2, #32
 80019d6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019d8:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <HAL_ADC_MspInit+0x118>)
 80019da:	2200      	movs	r2, #0
 80019dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <HAL_ADC_MspInit+0x118>)
 80019e0:	0018      	movs	r0, r3
 80019e2:	f001 faed 	bl	8002fc0 <HAL_DMA_Init>
 80019e6:	1e03      	subs	r3, r0, #0
 80019e8:	d001      	beq.n	80019ee <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80019ea:	f7ff fec5 	bl	8001778 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_ADC_MspInit+0x118>)
 80019f2:	651a      	str	r2, [r3, #80]	; 0x50
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_ADC_MspInit+0x118>)
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b00b      	add	sp, #44	; 0x2c
 8001a00:	bd90      	pop	{r4, r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	40012400 	.word	0x40012400
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	50000400 	.word	0x50000400
 8001a10:	20000098 	.word	0x20000098
 8001a14:	40020008 	.word	0x40020008

08001a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b08f      	sub	sp, #60	; 0x3c
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a20:	2410      	movs	r4, #16
 8001a22:	193b      	adds	r3, r7, r4
 8001a24:	0018      	movs	r0, r3
 8001a26:	2328      	movs	r3, #40	; 0x28
 8001a28:	001a      	movs	r2, r3
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	f003 f994 	bl	8004d58 <memset>
  if(htim_base->Instance==TIM1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1e      	ldr	r2, [pc, #120]	; (8001ab0 <HAL_TIM_Base_MspInit+0x98>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d125      	bne.n	8001a86 <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001a3a:	193b      	adds	r3, r7, r4
 8001a3c:	2280      	movs	r2, #128	; 0x80
 8001a3e:	0392      	lsls	r2, r2, #14
 8001a40:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001a42:	193b      	adds	r3, r7, r4
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a48:	193b      	adds	r3, r7, r4
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f002 fbc0 	bl	80041d0 <HAL_RCCEx_PeriphCLKConfig>
 8001a50:	1e03      	subs	r3, r0, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8001a54:	f7ff fe90 	bl	8001778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <HAL_TIM_Base_MspInit+0x9c>)
 8001a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a5c:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_TIM_Base_MspInit+0x9c>)
 8001a5e:	2180      	movs	r1, #128	; 0x80
 8001a60:	0109      	lsls	r1, r1, #4
 8001a62:	430a      	orrs	r2, r1
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <HAL_TIM_Base_MspInit+0x9c>)
 8001a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	4013      	ands	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2100      	movs	r1, #0
 8001a78:	200d      	movs	r0, #13
 8001a7a:	f001 fa5f 	bl	8002f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001a7e:	200d      	movs	r0, #13
 8001a80:	f001 fa71 	bl	8002f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a84:	e010      	b.n	8001aa8 <HAL_TIM_Base_MspInit+0x90>
  else if(htim_base->Instance==TIM3)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <HAL_TIM_Base_MspInit+0xa0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d10b      	bne.n	8001aa8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_TIM_Base_MspInit+0x9c>)
 8001a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <HAL_TIM_Base_MspInit+0x9c>)
 8001a96:	2102      	movs	r1, #2
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_TIM_Base_MspInit+0x9c>)
 8001a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b00f      	add	sp, #60	; 0x3c
 8001aae:	bd90      	pop	{r4, r7, pc}
 8001ab0:	40012c00 	.word	0x40012c00
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40000400 	.word	0x40000400

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <NMI_Handler+0x4>

08001ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <HardFault_Handler+0x4>

08001ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae0:	f000 f8c6 	bl	8001c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae4:	46c0      	nop			; (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Zero_positive_Pin);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f001 fe56 	bl	80037a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Zero_negative_Pin);
 8001afe:	2080      	movs	r0, #128	; 0x80
 8001b00:	f001 fe4e 	bl	80037a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001b04:	46c0      	nop			; (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <DMA1_Channel1_IRQHandler+0x14>)
 8001b12:	0018      	movs	r0, r3
 8001b14:	f001 fb64 	bl	80031e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b18:	46c0      	nop			; (mov r8, r8)
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	20000098 	.word	0x20000098

08001b24 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f002 fd6e 	bl	800460c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	200000f4 	.word	0x200000f4

08001b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b40:	46c0      	nop			; (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b48:	480d      	ldr	r0, [pc, #52]	; (8001b80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b4c:	f7ff fff6 	bl	8001b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b52:	490d      	ldr	r1, [pc, #52]	; (8001b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <LoopForever+0xe>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b68:	4c0a      	ldr	r4, [pc, #40]	; (8001b94 <LoopForever+0x16>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b76:	f003 f8f7 	bl	8004d68 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001b7a:	f7ff f9d3 	bl	8000f24 <main>

08001b7e <LoopForever>:

LoopForever:
  b LoopForever
 8001b7e:	e7fe      	b.n	8001b7e <LoopForever>
  ldr   r0, =_estack
 8001b80:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b88:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001b8c:	08004e10 	.word	0x08004e10
  ldr r2, =_sbss
 8001b90:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001b94:	200001c4 	.word	0x200001c4

08001b98 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <ADC1_IRQHandler>
	...

08001b9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ba2:	1dfb      	adds	r3, r7, #7
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_Init+0x3c>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_Init+0x3c>)
 8001bae:	2180      	movs	r1, #128	; 0x80
 8001bb0:	0049      	lsls	r1, r1, #1
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bb6:	2003      	movs	r0, #3
 8001bb8:	f000 f810 	bl	8001bdc <HAL_InitTick>
 8001bbc:	1e03      	subs	r3, r0, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001bc0:	1dfb      	adds	r3, r7, #7
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	e001      	b.n	8001bcc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001bc8:	f7ff fe72 	bl	80018b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bcc:	1dfb      	adds	r3, r7, #7
 8001bce:	781b      	ldrb	r3, [r3, #0]
}
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b002      	add	sp, #8
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40022000 	.word	0x40022000

08001bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001be4:	230f      	movs	r3, #15
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001bec:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_InitTick+0x88>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d02b      	beq.n	8001c4c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <HAL_InitTick+0x8c>)
 8001bf6:	681c      	ldr	r4, [r3, #0]
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <HAL_InitTick+0x88>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	23fa      	movs	r3, #250	; 0xfa
 8001c00:	0098      	lsls	r0, r3, #2
 8001c02:	f7fe fa7f 	bl	8000104 <__udivsi3>
 8001c06:	0003      	movs	r3, r0
 8001c08:	0019      	movs	r1, r3
 8001c0a:	0020      	movs	r0, r4
 8001c0c:	f7fe fa7a 	bl	8000104 <__udivsi3>
 8001c10:	0003      	movs	r3, r0
 8001c12:	0018      	movs	r0, r3
 8001c14:	f001 f9c7 	bl	8002fa6 <HAL_SYSTICK_Config>
 8001c18:	1e03      	subs	r3, r0, #0
 8001c1a:	d112      	bne.n	8001c42 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d80a      	bhi.n	8001c38 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	2301      	movs	r3, #1
 8001c26:	425b      	negs	r3, r3
 8001c28:	2200      	movs	r2, #0
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f001 f986 	bl	8002f3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c30:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <HAL_InitTick+0x90>)
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	e00d      	b.n	8001c54 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001c38:	230f      	movs	r3, #15
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	e008      	b.n	8001c54 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c42:	230f      	movs	r3, #15
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
 8001c4a:	e003      	b.n	8001c54 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001c54:	230f      	movs	r3, #15
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	781b      	ldrb	r3, [r3, #0]
}
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b005      	add	sp, #20
 8001c60:	bd90      	pop	{r4, r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	20000014 	.word	0x20000014
 8001c68:	2000000c 	.word	0x2000000c
 8001c6c:	20000010 	.word	0x20000010

08001c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_IncTick+0x1c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	001a      	movs	r2, r3
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_IncTick+0x20>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	18d2      	adds	r2, r2, r3
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_IncTick+0x20>)
 8001c82:	601a      	str	r2, [r3, #0]
}
 8001c84:	46c0      	nop			; (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	20000014 	.word	0x20000014
 8001c90:	200001c0 	.word	0x200001c0

08001c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b02      	ldr	r3, [pc, #8]	; (8001ca4 <HAL_GetTick+0x10>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	200001c0 	.word	0x200001c0

08001ca8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001cb8:	401a      	ands	r2, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	601a      	str	r2, [r3, #0]
}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b002      	add	sp, #8
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	fe3fffff 	.word	0xfe3fffff

08001cd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	23e0      	movs	r3, #224	; 0xe0
 8001cde:	045b      	lsls	r3, r3, #17
 8001ce0:	4013      	ands	r3, r2
}
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b002      	add	sp, #8
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	2104      	movs	r1, #4
 8001cfe:	400a      	ands	r2, r1
 8001d00:	2107      	movs	r1, #7
 8001d02:	4091      	lsls	r1, r2
 8001d04:	000a      	movs	r2, r1
 8001d06:	43d2      	mvns	r2, r2
 8001d08:	401a      	ands	r2, r3
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2104      	movs	r1, #4
 8001d0e:	400b      	ands	r3, r1
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4099      	lsls	r1, r3
 8001d14:	000b      	movs	r3, r1
 8001d16:	431a      	orrs	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001d1c:	46c0      	nop			; (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b004      	add	sp, #16
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	2104      	movs	r1, #4
 8001d36:	400a      	ands	r2, r1
 8001d38:	2107      	movs	r1, #7
 8001d3a:	4091      	lsls	r1, r2
 8001d3c:	000a      	movs	r2, r1
 8001d3e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	2104      	movs	r1, #4
 8001d44:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001d46:	40da      	lsrs	r2, r3
 8001d48:	0013      	movs	r3, r2
}
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b002      	add	sp, #8
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	23c0      	movs	r3, #192	; 0xc0
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	4013      	ands	r3, r2
 8001d64:	d101      	bne.n	8001d6a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	211f      	movs	r1, #31
 8001d88:	400a      	ands	r2, r1
 8001d8a:	210f      	movs	r1, #15
 8001d8c:	4091      	lsls	r1, r2
 8001d8e:	000a      	movs	r2, r1
 8001d90:	43d2      	mvns	r2, r2
 8001d92:	401a      	ands	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	0e9b      	lsrs	r3, r3, #26
 8001d98:	210f      	movs	r1, #15
 8001d9a:	4019      	ands	r1, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	201f      	movs	r0, #31
 8001da0:	4003      	ands	r3, r0
 8001da2:	4099      	lsls	r1, r3
 8001da4:	000b      	movs	r3, r1
 8001da6:	431a      	orrs	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b004      	add	sp, #16
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	035b      	lsls	r3, r3, #13
 8001dc6:	0b5b      	lsrs	r3, r3, #13
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b002      	add	sp, #8
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	0352      	lsls	r2, r2, #13
 8001de8:	0b52      	lsrs	r2, r2, #13
 8001dea:	43d2      	mvns	r2, r2
 8001dec:	401a      	ands	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b002      	add	sp, #8
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	0212      	lsls	r2, r2, #8
 8001e10:	43d2      	mvns	r2, r2
 8001e12:	401a      	ands	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
 8001e1c:	4904      	ldr	r1, [pc, #16]	; (8001e30 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001e1e:	400b      	ands	r3, r1
 8001e20:	431a      	orrs	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b004      	add	sp, #16
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	07ffff00 	.word	0x07ffff00

08001e34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <LL_ADC_EnableInternalRegulator+0x24>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	2280      	movs	r2, #128	; 0x80
 8001e46:	0552      	lsls	r2, r2, #21
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	46bd      	mov	sp, r7
 8001e52:	b002      	add	sp, #8
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	6fffffe8 	.word	0x6fffffe8

08001e5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	055b      	lsls	r3, r3, #21
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	055b      	lsls	r3, r3, #21
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d101      	bne.n	8001e7a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b002      	add	sp, #8
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <LL_ADC_Enable+0x20>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	2201      	movs	r2, #1
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e9c:	46c0      	nop			; (mov r8, r8)
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	7fffffe8 	.word	0x7fffffe8

08001ea8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <LL_ADC_Disable+0x20>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2202      	movs	r2, #2
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b002      	add	sp, #8
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	7fffffe8 	.word	0x7fffffe8

08001ecc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <LL_ADC_IsEnabled+0x18>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <LL_ADC_IsEnabled+0x1a>
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b002      	add	sp, #8
 8001eec:	bd80      	pop	{r7, pc}

08001eee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2202      	movs	r2, #2
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d101      	bne.n	8001f06 <LL_ADC_IsDisableOngoing+0x18>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <LL_ADC_IsDisableOngoing+0x1a>
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b002      	add	sp, #8
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <LL_ADC_REG_StartConversion+0x20>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2204      	movs	r2, #4
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f28:	46c0      	nop			; (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b002      	add	sp, #8
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	7fffffe8 	.word	0x7fffffe8

08001f34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2204      	movs	r2, #4
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d101      	bne.n	8001f4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b002      	add	sp, #8
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f60:	231f      	movs	r3, #31
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e17f      	b.n	800227e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10a      	bne.n	8001f9c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff fcb5 	bl	80018f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2254      	movs	r2, #84	; 0x54
 8001f98:	2100      	movs	r1, #0
 8001f9a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f7ff ff5b 	bl	8001e5c <LL_ADC_IsInternalRegulatorEnabled>
 8001fa6:	1e03      	subs	r3, r0, #0
 8001fa8:	d115      	bne.n	8001fd6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7ff ff40 	bl	8001e34 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fb4:	4bb4      	ldr	r3, [pc, #720]	; (8002288 <HAL_ADC_Init+0x330>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	49b4      	ldr	r1, [pc, #720]	; (800228c <HAL_ADC_Init+0x334>)
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f7fe f8a2 	bl	8000104 <__udivsi3>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fc8:	e002      	b.n	8001fd0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f9      	bne.n	8001fca <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f7ff ff3e 	bl	8001e5c <LL_ADC_IsInternalRegulatorEnabled>
 8001fe0:	1e03      	subs	r3, r0, #0
 8001fe2:	d10f      	bne.n	8002004 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	2210      	movs	r2, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ffc:	231f      	movs	r3, #31
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	0018      	movs	r0, r3
 800200a:	f7ff ff93 	bl	8001f34 <LL_ADC_REG_IsConversionOngoing>
 800200e:	0003      	movs	r3, r0
 8002010:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	2210      	movs	r2, #16
 8002018:	4013      	ands	r3, r2
 800201a:	d000      	beq.n	800201e <HAL_ADC_Init+0xc6>
 800201c:	e122      	b.n	8002264 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d000      	beq.n	8002026 <HAL_ADC_Init+0xce>
 8002024:	e11e      	b.n	8002264 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	4a99      	ldr	r2, [pc, #612]	; (8002290 <HAL_ADC_Init+0x338>)
 800202c:	4013      	ands	r3, r2
 800202e:	2202      	movs	r2, #2
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	0018      	movs	r0, r3
 800203c:	f7ff ff46 	bl	8001ecc <LL_ADC_IsEnabled>
 8002040:	1e03      	subs	r3, r0, #0
 8002042:	d000      	beq.n	8002046 <HAL_ADC_Init+0xee>
 8002044:	e0ad      	b.n	80021a2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7e1b      	ldrb	r3, [r3, #24]
 800204e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002050:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	7e5b      	ldrb	r3, [r3, #25]
 8002056:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002058:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	7e9b      	ldrb	r3, [r3, #26]
 800205e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002060:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_ADC_Init+0x118>
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	015b      	lsls	r3, r3, #5
 800206e:	e000      	b.n	8002072 <HAL_ADC_Init+0x11a>
 8002070:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002072:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002078:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b00      	cmp	r3, #0
 8002080:	da04      	bge.n	800208c <HAL_ADC_Init+0x134>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	085b      	lsrs	r3, r3, #1
 800208a:	e001      	b.n	8002090 <HAL_ADC_Init+0x138>
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002090:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	212c      	movs	r1, #44	; 0x2c
 8002096:	5c5b      	ldrb	r3, [r3, r1]
 8002098:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800209a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2220      	movs	r2, #32
 80020a6:	5c9b      	ldrb	r3, [r3, r2]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d115      	bne.n	80020d8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7e9b      	ldrb	r3, [r3, #26]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d105      	bne.n	80020c0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	0252      	lsls	r2, r2, #9
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	e00b      	b.n	80020d8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c4:	2220      	movs	r2, #32
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d0:	2201      	movs	r2, #1
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020e4:	23e0      	movs	r3, #224	; 0xe0
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80020ee:	4313      	orrs	r3, r2
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4a65      	ldr	r2, [pc, #404]	; (8002294 <HAL_ADC_Init+0x33c>)
 80020fe:	4013      	ands	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	430a      	orrs	r2, r1
 800210a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	0f9b      	lsrs	r3, r3, #30
 8002112:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002118:	4313      	orrs	r3, r2
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	223c      	movs	r2, #60	; 0x3c
 8002124:	5c9b      	ldrb	r3, [r3, r2]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d111      	bne.n	800214e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	0f9b      	lsrs	r3, r3, #30
 8002130:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002136:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 800213c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8002142:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	4313      	orrs	r3, r2
 8002148:	2201      	movs	r2, #1
 800214a:	4313      	orrs	r3, r2
 800214c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	4a50      	ldr	r2, [pc, #320]	; (8002298 <HAL_ADC_Init+0x340>)
 8002156:	4013      	ands	r3, r2
 8002158:	0019      	movs	r1, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	430a      	orrs	r2, r1
 8002162:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	23c0      	movs	r3, #192	; 0xc0
 800216a:	061b      	lsls	r3, r3, #24
 800216c:	429a      	cmp	r2, r3
 800216e:	d018      	beq.n	80021a2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	05db      	lsls	r3, r3, #23
 8002178:	429a      	cmp	r2, r3
 800217a:	d012      	beq.n	80021a2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	061b      	lsls	r3, r3, #24
 8002184:	429a      	cmp	r2, r3
 8002186:	d00c      	beq.n	80021a2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002188:	4b44      	ldr	r3, [pc, #272]	; (800229c <HAL_ADC_Init+0x344>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a44      	ldr	r2, [pc, #272]	; (80022a0 <HAL_ADC_Init+0x348>)
 800218e:	4013      	ands	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	23f0      	movs	r3, #240	; 0xf0
 8002198:	039b      	lsls	r3, r3, #14
 800219a:	401a      	ands	r2, r3
 800219c:	4b3f      	ldr	r3, [pc, #252]	; (800229c <HAL_ADC_Init+0x344>)
 800219e:	430a      	orrs	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021aa:	001a      	movs	r2, r3
 80021ac:	2100      	movs	r1, #0
 80021ae:	f7ff fd9c 	bl	8001cea <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ba:	493a      	ldr	r1, [pc, #232]	; (80022a4 <HAL_ADC_Init+0x34c>)
 80021bc:	001a      	movs	r2, r3
 80021be:	f7ff fd94 	bl	8001cea <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2110      	movs	r1, #16
 80021d6:	4249      	negs	r1, r1
 80021d8:	430a      	orrs	r2, r1
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
 80021dc:	e018      	b.n	8002210 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	039b      	lsls	r3, r3, #14
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d112      	bne.n	8002210 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	221c      	movs	r2, #28
 80021fa:	4013      	ands	r3, r2
 80021fc:	2210      	movs	r2, #16
 80021fe:	4252      	negs	r2, r2
 8002200:	409a      	lsls	r2, r3
 8002202:	0011      	movs	r1, r2
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2100      	movs	r1, #0
 8002216:	0018      	movs	r0, r3
 8002218:	f7ff fd84 	bl	8001d24 <LL_ADC_GetSamplingTimeCommonChannels>
 800221c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002222:	429a      	cmp	r2, r3
 8002224:	d10b      	bne.n	800223e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	2203      	movs	r2, #3
 8002232:	4393      	bics	r3, r2
 8002234:	2201      	movs	r2, #1
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800223c:	e01c      	b.n	8002278 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	2212      	movs	r2, #18
 8002244:	4393      	bics	r3, r2
 8002246:	2210      	movs	r2, #16
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002252:	2201      	movs	r2, #1
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800225a:	231f      	movs	r3, #31
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002262:	e009      	b.n	8002278 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	2210      	movs	r2, #16
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002270:	231f      	movs	r3, #31
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002278:	231f      	movs	r3, #31
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	781b      	ldrb	r3, [r3, #0]
}
 800227e:	0018      	movs	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	b008      	add	sp, #32
 8002284:	bd80      	pop	{r7, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	2000000c 	.word	0x2000000c
 800228c:	00030d40 	.word	0x00030d40
 8002290:	fffffefd 	.word	0xfffffefd
 8002294:	ffde0201 	.word	0xffde0201
 8002298:	1ffffc02 	.word	0x1ffffc02
 800229c:	40012708 	.word	0x40012708
 80022a0:	ffc3ffff 	.word	0xffc3ffff
 80022a4:	07ffff04 	.word	0x07ffff04

080022a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022a8:	b5b0      	push	{r4, r5, r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f7ff fe3b 	bl	8001f34 <LL_ADC_REG_IsConversionOngoing>
 80022be:	1e03      	subs	r3, r0, #0
 80022c0:	d16c      	bne.n	800239c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2254      	movs	r2, #84	; 0x54
 80022c6:	5c9b      	ldrb	r3, [r3, r2]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_Start_DMA+0x28>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e06c      	b.n	80023aa <HAL_ADC_Start_DMA+0x102>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2254      	movs	r2, #84	; 0x54
 80022d4:	2101      	movs	r1, #1
 80022d6:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	4013      	ands	r3, r2
 80022e2:	d113      	bne.n	800230c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0018      	movs	r0, r3
 80022ea:	f7ff fdef 	bl	8001ecc <LL_ADC_IsEnabled>
 80022ee:	1e03      	subs	r3, r0, #0
 80022f0:	d004      	beq.n	80022fc <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	0018      	movs	r0, r3
 80022f8:	f7ff fdd6 	bl	8001ea8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2101      	movs	r1, #1
 8002308:	430a      	orrs	r2, r1
 800230a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800230c:	2517      	movs	r5, #23
 800230e:	197c      	adds	r4, r7, r5
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	0018      	movs	r0, r3
 8002314:	f000 fa3e 	bl	8002794 <ADC_Enable>
 8002318:	0003      	movs	r3, r0
 800231a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800231c:	002c      	movs	r4, r5
 800231e:	193b      	adds	r3, r7, r4
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d13e      	bne.n	80023a4 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	4a22      	ldr	r2, [pc, #136]	; (80023b4 <HAL_ADC_Start_DMA+0x10c>)
 800232c:	4013      	ands	r3, r2
 800232e:	2280      	movs	r2, #128	; 0x80
 8002330:	0052      	lsls	r2, r2, #1
 8002332:	431a      	orrs	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002342:	4a1d      	ldr	r2, [pc, #116]	; (80023b8 <HAL_ADC_Start_DMA+0x110>)
 8002344:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234a:	4a1c      	ldr	r2, [pc, #112]	; (80023bc <HAL_ADC_Start_DMA+0x114>)
 800234c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002352:	4a1b      	ldr	r2, [pc, #108]	; (80023c0 <HAL_ADC_Start_DMA+0x118>)
 8002354:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	221c      	movs	r2, #28
 800235c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2254      	movs	r2, #84	; 0x54
 8002362:	2100      	movs	r1, #0
 8002364:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2110      	movs	r1, #16
 8002372:	430a      	orrs	r2, r1
 8002374:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3340      	adds	r3, #64	; 0x40
 8002380:	0019      	movs	r1, r3
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	193c      	adds	r4, r7, r4
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f000 fea4 	bl	80030d4 <HAL_DMA_Start_IT>
 800238c:	0003      	movs	r3, r0
 800238e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0018      	movs	r0, r3
 8002396:	f7ff fdbb 	bl	8001f10 <LL_ADC_REG_StartConversion>
 800239a:	e003      	b.n	80023a4 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800239c:	2317      	movs	r3, #23
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	2202      	movs	r2, #2
 80023a2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80023a4:	2317      	movs	r3, #23
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	781b      	ldrb	r3, [r3, #0]
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b006      	add	sp, #24
 80023b0:	bdb0      	pop	{r4, r5, r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	fffff0fe 	.word	0xfffff0fe
 80023b8:	0800295d 	.word	0x0800295d
 80023bc:	08002a25 	.word	0x08002a25
 80023c0:	08002a43 	.word	0x08002a43

080023c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b002      	add	sp, #8
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023dc:	46c0      	nop			; (mov r8, r8)
 80023de:	46bd      	mov	sp, r7
 80023e0:	b002      	add	sp, #8
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ee:	2317      	movs	r3, #23
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2254      	movs	r2, #84	; 0x54
 80023fe:	5c9b      	ldrb	r3, [r3, r2]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x24>
 8002404:	2302      	movs	r3, #2
 8002406:	e1c0      	b.n	800278a <HAL_ADC_ConfigChannel+0x3a6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2254      	movs	r2, #84	; 0x54
 800240c:	2101      	movs	r1, #1
 800240e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	0018      	movs	r0, r3
 8002416:	f7ff fd8d 	bl	8001f34 <LL_ADC_REG_IsConversionOngoing>
 800241a:	1e03      	subs	r3, r0, #0
 800241c:	d000      	beq.n	8002420 <HAL_ADC_ConfigChannel+0x3c>
 800241e:	e1a3      	b.n	8002768 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d100      	bne.n	800242a <HAL_ADC_ConfigChannel+0x46>
 8002428:	e143      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	061b      	lsls	r3, r3, #24
 8002432:	429a      	cmp	r2, r3
 8002434:	d004      	beq.n	8002440 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800243a:	4ac1      	ldr	r2, [pc, #772]	; (8002740 <HAL_ADC_ConfigChannel+0x35c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d108      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0019      	movs	r1, r3
 800244a:	0010      	movs	r0, r2
 800244c:	f7ff fcb2 	bl	8001db4 <LL_ADC_REG_SetSequencerChAdd>
 8002450:	e0c9      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	211f      	movs	r1, #31
 800245c:	400b      	ands	r3, r1
 800245e:	210f      	movs	r1, #15
 8002460:	4099      	lsls	r1, r3
 8002462:	000b      	movs	r3, r1
 8002464:	43db      	mvns	r3, r3
 8002466:	4013      	ands	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	035b      	lsls	r3, r3, #13
 8002470:	0b5b      	lsrs	r3, r3, #13
 8002472:	d105      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x9c>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	221f      	movs	r2, #31
 800247c:	4013      	ands	r3, r2
 800247e:	e098      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2201      	movs	r2, #1
 8002486:	4013      	ands	r3, r2
 8002488:	d000      	beq.n	800248c <HAL_ADC_ConfigChannel+0xa8>
 800248a:	e091      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x1cc>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2202      	movs	r2, #2
 8002492:	4013      	ands	r3, r2
 8002494:	d000      	beq.n	8002498 <HAL_ADC_ConfigChannel+0xb4>
 8002496:	e089      	b.n	80025ac <HAL_ADC_ConfigChannel+0x1c8>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2204      	movs	r2, #4
 800249e:	4013      	ands	r3, r2
 80024a0:	d000      	beq.n	80024a4 <HAL_ADC_ConfigChannel+0xc0>
 80024a2:	e081      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x1c4>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2208      	movs	r2, #8
 80024aa:	4013      	ands	r3, r2
 80024ac:	d000      	beq.n	80024b0 <HAL_ADC_ConfigChannel+0xcc>
 80024ae:	e079      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x1c0>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2210      	movs	r2, #16
 80024b6:	4013      	ands	r3, r2
 80024b8:	d000      	beq.n	80024bc <HAL_ADC_ConfigChannel+0xd8>
 80024ba:	e071      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x1bc>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2220      	movs	r2, #32
 80024c2:	4013      	ands	r3, r2
 80024c4:	d000      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0xe4>
 80024c6:	e069      	b.n	800259c <HAL_ADC_ConfigChannel+0x1b8>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2240      	movs	r2, #64	; 0x40
 80024ce:	4013      	ands	r3, r2
 80024d0:	d000      	beq.n	80024d4 <HAL_ADC_ConfigChannel+0xf0>
 80024d2:	e061      	b.n	8002598 <HAL_ADC_ConfigChannel+0x1b4>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2280      	movs	r2, #128	; 0x80
 80024da:	4013      	ands	r3, r2
 80024dc:	d000      	beq.n	80024e0 <HAL_ADC_ConfigChannel+0xfc>
 80024de:	e059      	b.n	8002594 <HAL_ADC_ConfigChannel+0x1b0>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4013      	ands	r3, r2
 80024ea:	d151      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x1ac>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4013      	ands	r3, r2
 80024f6:	d149      	bne.n	800258c <HAL_ADC_ConfigChannel+0x1a8>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4013      	ands	r3, r2
 8002502:	d141      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x1a4>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	4013      	ands	r3, r2
 800250e:	d139      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x1a0>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	015b      	lsls	r3, r3, #5
 8002518:	4013      	ands	r3, r2
 800251a:	d131      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x19c>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	019b      	lsls	r3, r3, #6
 8002524:	4013      	ands	r3, r2
 8002526:	d129      	bne.n	800257c <HAL_ADC_ConfigChannel+0x198>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	01db      	lsls	r3, r3, #7
 8002530:	4013      	ands	r3, r2
 8002532:	d121      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x194>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	4013      	ands	r3, r2
 800253e:	d119      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x190>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	025b      	lsls	r3, r3, #9
 8002548:	4013      	ands	r3, r2
 800254a:	d111      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x18c>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	029b      	lsls	r3, r3, #10
 8002554:	4013      	ands	r3, r2
 8002556:	d109      	bne.n	800256c <HAL_ADC_ConfigChannel+0x188>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	02db      	lsls	r3, r3, #11
 8002560:	4013      	ands	r3, r2
 8002562:	d001      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x184>
 8002564:	2312      	movs	r3, #18
 8002566:	e024      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002568:	2300      	movs	r3, #0
 800256a:	e022      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 800256c:	2311      	movs	r3, #17
 800256e:	e020      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002570:	2310      	movs	r3, #16
 8002572:	e01e      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002574:	230f      	movs	r3, #15
 8002576:	e01c      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002578:	230e      	movs	r3, #14
 800257a:	e01a      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 800257c:	230d      	movs	r3, #13
 800257e:	e018      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002580:	230c      	movs	r3, #12
 8002582:	e016      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002584:	230b      	movs	r3, #11
 8002586:	e014      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002588:	230a      	movs	r3, #10
 800258a:	e012      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 800258c:	2309      	movs	r3, #9
 800258e:	e010      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002590:	2308      	movs	r3, #8
 8002592:	e00e      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002594:	2307      	movs	r3, #7
 8002596:	e00c      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002598:	2306      	movs	r3, #6
 800259a:	e00a      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 800259c:	2305      	movs	r3, #5
 800259e:	e008      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 80025a0:	2304      	movs	r3, #4
 80025a2:	e006      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 80025a4:	2303      	movs	r3, #3
 80025a6:	e004      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e002      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 80025b0:	2300      	movs	r3, #0
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	6852      	ldr	r2, [r2, #4]
 80025b6:	201f      	movs	r0, #31
 80025b8:	4002      	ands	r2, r0
 80025ba:	4093      	lsls	r3, r2
 80025bc:	000a      	movs	r2, r1
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	089b      	lsrs	r3, r3, #2
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d808      	bhi.n	80025e6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	001a      	movs	r2, r3
 80025e2:	f7ff fbc7 	bl	8001d74 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	001a      	movs	r2, r3
 80025f4:	f7ff fc02 	bl	8001dfc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db00      	blt.n	8002602 <HAL_ADC_ConfigChannel+0x21e>
 8002600:	e0bc      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002602:	4b50      	ldr	r3, [pc, #320]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 8002604:	0018      	movs	r0, r3
 8002606:	f7ff fb63 	bl	8001cd0 <LL_ADC_GetCommonPathInternalCh>
 800260a:	0003      	movs	r3, r0
 800260c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a4d      	ldr	r2, [pc, #308]	; (8002748 <HAL_ADC_ConfigChannel+0x364>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d122      	bne.n	800265e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002620:	d11d      	bne.n	800265e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2280      	movs	r2, #128	; 0x80
 8002626:	0412      	lsls	r2, r2, #16
 8002628:	4313      	orrs	r3, r2
 800262a:	4a46      	ldr	r2, [pc, #280]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 800262c:	0019      	movs	r1, r3
 800262e:	0010      	movs	r0, r2
 8002630:	f7ff fb3a 	bl	8001ca8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002634:	4b45      	ldr	r3, [pc, #276]	; (800274c <HAL_ADC_ConfigChannel+0x368>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4945      	ldr	r1, [pc, #276]	; (8002750 <HAL_ADC_ConfigChannel+0x36c>)
 800263a:	0018      	movs	r0, r3
 800263c:	f7fd fd62 	bl	8000104 <__udivsi3>
 8002640:	0003      	movs	r3, r0
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	0013      	movs	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	189b      	adds	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800264e:	e002      	b.n	8002656 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3b01      	subs	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f9      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800265c:	e08e      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a3c      	ldr	r2, [pc, #240]	; (8002754 <HAL_ADC_ConfigChannel+0x370>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d10e      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	045b      	lsls	r3, r3, #17
 800266e:	4013      	ands	r3, r2
 8002670:	d109      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	0452      	lsls	r2, r2, #17
 8002678:	4313      	orrs	r3, r2
 800267a:	4a32      	ldr	r2, [pc, #200]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 800267c:	0019      	movs	r1, r3
 800267e:	0010      	movs	r0, r2
 8002680:	f7ff fb12 	bl	8001ca8 <LL_ADC_SetCommonPathInternalCh>
 8002684:	e07a      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a33      	ldr	r2, [pc, #204]	; (8002758 <HAL_ADC_ConfigChannel+0x374>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d000      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x2ae>
 8002690:	e074      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	03db      	lsls	r3, r3, #15
 8002698:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800269a:	d000      	beq.n	800269e <HAL_ADC_ConfigChannel+0x2ba>
 800269c:	e06e      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2280      	movs	r2, #128	; 0x80
 80026a2:	03d2      	lsls	r2, r2, #15
 80026a4:	4313      	orrs	r3, r2
 80026a6:	4a27      	ldr	r2, [pc, #156]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 80026a8:	0019      	movs	r1, r3
 80026aa:	0010      	movs	r0, r2
 80026ac:	f7ff fafc 	bl	8001ca8 <LL_ADC_SetCommonPathInternalCh>
 80026b0:	e064      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	061b      	lsls	r3, r3, #24
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d004      	beq.n	80026c8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026c2:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <HAL_ADC_ConfigChannel+0x35c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d107      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	0019      	movs	r1, r3
 80026d2:	0010      	movs	r0, r2
 80026d4:	f7ff fb7f 	bl	8001dd6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	da4d      	bge.n	800277c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026e0:	4b18      	ldr	r3, [pc, #96]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 80026e2:	0018      	movs	r0, r3
 80026e4:	f7ff faf4 	bl	8001cd0 <LL_ADC_GetCommonPathInternalCh>
 80026e8:	0003      	movs	r3, r0
 80026ea:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a15      	ldr	r2, [pc, #84]	; (8002748 <HAL_ADC_ConfigChannel+0x364>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d108      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4a18      	ldr	r2, [pc, #96]	; (800275c <HAL_ADC_ConfigChannel+0x378>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	4a11      	ldr	r2, [pc, #68]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 80026fe:	0019      	movs	r1, r3
 8002700:	0010      	movs	r0, r2
 8002702:	f7ff fad1 	bl	8001ca8 <LL_ADC_SetCommonPathInternalCh>
 8002706:	e039      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a11      	ldr	r2, [pc, #68]	; (8002754 <HAL_ADC_ConfigChannel+0x370>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d108      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4a12      	ldr	r2, [pc, #72]	; (8002760 <HAL_ADC_ConfigChannel+0x37c>)
 8002716:	4013      	ands	r3, r2
 8002718:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 800271a:	0019      	movs	r1, r3
 800271c:	0010      	movs	r0, r2
 800271e:	f7ff fac3 	bl	8001ca8 <LL_ADC_SetCommonPathInternalCh>
 8002722:	e02b      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <HAL_ADC_ConfigChannel+0x374>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d126      	bne.n	800277c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <HAL_ADC_ConfigChannel+0x380>)
 8002732:	4013      	ands	r3, r2
 8002734:	4a03      	ldr	r2, [pc, #12]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 8002736:	0019      	movs	r1, r3
 8002738:	0010      	movs	r0, r2
 800273a:	f7ff fab5 	bl	8001ca8 <LL_ADC_SetCommonPathInternalCh>
 800273e:	e01d      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
 8002740:	80000004 	.word	0x80000004
 8002744:	40012708 	.word	0x40012708
 8002748:	b0001000 	.word	0xb0001000
 800274c:	2000000c 	.word	0x2000000c
 8002750:	00030d40 	.word	0x00030d40
 8002754:	b8004000 	.word	0xb8004000
 8002758:	b4002000 	.word	0xb4002000
 800275c:	ff7fffff 	.word	0xff7fffff
 8002760:	feffffff 	.word	0xfeffffff
 8002764:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	2220      	movs	r2, #32
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002774:	2317      	movs	r3, #23
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2254      	movs	r2, #84	; 0x54
 8002780:	2100      	movs	r1, #0
 8002782:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002784:	2317      	movs	r3, #23
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	781b      	ldrb	r3, [r3, #0]
}
 800278a:	0018      	movs	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	b006      	add	sp, #24
 8002790:	bd80      	pop	{r7, pc}
 8002792:	46c0      	nop			; (mov r8, r8)

08002794 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7ff fb91 	bl	8001ecc <LL_ADC_IsEnabled>
 80027aa:	1e03      	subs	r3, r0, #0
 80027ac:	d000      	beq.n	80027b0 <ADC_Enable+0x1c>
 80027ae:	e069      	b.n	8002884 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4a36      	ldr	r2, [pc, #216]	; (8002890 <ADC_Enable+0xfc>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	d00d      	beq.n	80027d8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c0:	2210      	movs	r2, #16
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	2201      	movs	r2, #1
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e056      	b.n	8002886 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0018      	movs	r0, r3
 80027de:	f7ff fb51 	bl	8001e84 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80027e2:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <ADC_Enable+0x100>)
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7ff fa73 	bl	8001cd0 <LL_ADC_GetCommonPathInternalCh>
 80027ea:	0002      	movs	r2, r0
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	041b      	lsls	r3, r3, #16
 80027f0:	4013      	ands	r3, r2
 80027f2:	d00f      	beq.n	8002814 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f4:	4b28      	ldr	r3, [pc, #160]	; (8002898 <ADC_Enable+0x104>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4928      	ldr	r1, [pc, #160]	; (800289c <ADC_Enable+0x108>)
 80027fa:	0018      	movs	r0, r3
 80027fc:	f7fd fc82 	bl	8000104 <__udivsi3>
 8002800:	0003      	movs	r3, r0
 8002802:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002804:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002806:	e002      	b.n	800280e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	3b01      	subs	r3, #1
 800280c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f9      	bne.n	8002808 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7e5b      	ldrb	r3, [r3, #25]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d033      	beq.n	8002884 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800281c:	f7ff fa3a 	bl	8001c94 <HAL_GetTick>
 8002820:	0003      	movs	r3, r0
 8002822:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002824:	e027      	b.n	8002876 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	0018      	movs	r0, r3
 800282c:	f7ff fb4e 	bl	8001ecc <LL_ADC_IsEnabled>
 8002830:	1e03      	subs	r3, r0, #0
 8002832:	d104      	bne.n	800283e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0018      	movs	r0, r3
 800283a:	f7ff fb23 	bl	8001e84 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800283e:	f7ff fa29 	bl	8001c94 <HAL_GetTick>
 8002842:	0002      	movs	r2, r0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d914      	bls.n	8002876 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2201      	movs	r2, #1
 8002854:	4013      	ands	r3, r2
 8002856:	2b01      	cmp	r3, #1
 8002858:	d00d      	beq.n	8002876 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	2210      	movs	r2, #16
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	2201      	movs	r2, #1
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e007      	b.n	8002886 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2201      	movs	r2, #1
 800287e:	4013      	ands	r3, r2
 8002880:	2b01      	cmp	r3, #1
 8002882:	d1d0      	bne.n	8002826 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b004      	add	sp, #16
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	80000017 	.word	0x80000017
 8002894:	40012708 	.word	0x40012708
 8002898:	2000000c 	.word	0x2000000c
 800289c:	00030d40 	.word	0x00030d40

080028a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0018      	movs	r0, r3
 80028ae:	f7ff fb1e 	bl	8001eee <LL_ADC_IsDisableOngoing>
 80028b2:	0003      	movs	r3, r0
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	0018      	movs	r0, r3
 80028bc:	f7ff fb06 	bl	8001ecc <LL_ADC_IsEnabled>
 80028c0:	1e03      	subs	r3, r0, #0
 80028c2:	d046      	beq.n	8002952 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d143      	bne.n	8002952 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2205      	movs	r2, #5
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d10d      	bne.n	80028f4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	0018      	movs	r0, r3
 80028de:	f7ff fae3 	bl	8001ea8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2203      	movs	r2, #3
 80028e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028ea:	f7ff f9d3 	bl	8001c94 <HAL_GetTick>
 80028ee:	0003      	movs	r3, r0
 80028f0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028f2:	e028      	b.n	8002946 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	2210      	movs	r2, #16
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	2201      	movs	r2, #1
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e021      	b.n	8002954 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002910:	f7ff f9c0 	bl	8001c94 <HAL_GetTick>
 8002914:	0002      	movs	r2, r0
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d913      	bls.n	8002946 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2201      	movs	r2, #1
 8002926:	4013      	ands	r3, r2
 8002928:	d00d      	beq.n	8002946 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	2210      	movs	r2, #16
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	2201      	movs	r2, #1
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e006      	b.n	8002954 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2201      	movs	r2, #1
 800294e:	4013      	ands	r3, r2
 8002950:	d1de      	bne.n	8002910 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	0018      	movs	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	b004      	add	sp, #16
 800295a:	bd80      	pop	{r7, pc}

0800295c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	2250      	movs	r2, #80	; 0x50
 8002970:	4013      	ands	r3, r2
 8002972:	d141      	bne.n	80029f8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	0092      	lsls	r2, r2, #2
 800297c:	431a      	orrs	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0018      	movs	r0, r3
 8002988:	f7ff f9e3 	bl	8001d52 <LL_ADC_REG_IsTriggerSourceSWStart>
 800298c:	1e03      	subs	r3, r0, #0
 800298e:	d02e      	beq.n	80029ee <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	7e9b      	ldrb	r3, [r3, #26]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d12a      	bne.n	80029ee <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2208      	movs	r2, #8
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d123      	bne.n	80029ee <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f7ff fac2 	bl	8001f34 <LL_ADC_REG_IsConversionOngoing>
 80029b0:	1e03      	subs	r3, r0, #0
 80029b2:	d110      	bne.n	80029d6 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	210c      	movs	r1, #12
 80029c0:	438a      	bics	r2, r1
 80029c2:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	4a15      	ldr	r2, [pc, #84]	; (8002a20 <ADC_DMAConvCplt+0xc4>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	2201      	movs	r2, #1
 80029ce:	431a      	orrs	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	659a      	str	r2, [r3, #88]	; 0x58
 80029d4:	e00b      	b.n	80029ee <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029da:	2220      	movs	r2, #32
 80029dc:	431a      	orrs	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e6:	2201      	movs	r2, #1
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	0018      	movs	r0, r3
 80029f2:	f7fe fe47 	bl	8001684 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029f6:	e00f      	b.n	8002a18 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fc:	2210      	movs	r2, #16
 80029fe:	4013      	ands	r3, r2
 8002a00:	d004      	beq.n	8002a0c <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7ff fce5 	bl	80023d4 <HAL_ADC_ErrorCallback>
}
 8002a0a:	e005      	b.n	8002a18 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	0010      	movs	r0, r2
 8002a16:	4798      	blx	r3
}
 8002a18:	46c0      	nop			; (mov r8, r8)
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b004      	add	sp, #16
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	fffffefe 	.word	0xfffffefe

08002a24 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7ff fcc5 	bl	80023c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b004      	add	sp, #16
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	2240      	movs	r2, #64	; 0x40
 8002a56:	431a      	orrs	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	2204      	movs	r2, #4
 8002a62:	431a      	orrs	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f7ff fcb2 	bl	80023d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a70:	46c0      	nop			; (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b004      	add	sp, #16
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <LL_ADC_GetCommonClock>:
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	23f0      	movs	r3, #240	; 0xf0
 8002a86:	039b      	lsls	r3, r3, #14
 8002a88:	4013      	ands	r3, r2
}
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b002      	add	sp, #8
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <LL_ADC_GetClock>:
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	0f9b      	lsrs	r3, r3, #30
 8002aa0:	079b      	lsls	r3, r3, #30
}
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b002      	add	sp, #8
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <LL_ADC_SetCalibrationFactor>:
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	22b4      	movs	r2, #180	; 0xb4
 8002ab8:	589b      	ldr	r3, [r3, r2]
 8002aba:	227f      	movs	r2, #127	; 0x7f
 8002abc:	4393      	bics	r3, r2
 8002abe:	001a      	movs	r2, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	21b4      	movs	r1, #180	; 0xb4
 8002ac8:	505a      	str	r2, [r3, r1]
}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b002      	add	sp, #8
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <LL_ADC_GetCalibrationFactor>:
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	22b4      	movs	r2, #180	; 0xb4
 8002ade:	589b      	ldr	r3, [r3, r2]
 8002ae0:	227f      	movs	r2, #127	; 0x7f
 8002ae2:	4013      	ands	r3, r2
}
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b002      	add	sp, #8
 8002aea:	bd80      	pop	{r7, pc}

08002aec <LL_ADC_Enable>:
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4a04      	ldr	r2, [pc, #16]	; (8002b0c <LL_ADC_Enable+0x20>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	2201      	movs	r2, #1
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	609a      	str	r2, [r3, #8]
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b002      	add	sp, #8
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	7fffffe8 	.word	0x7fffffe8

08002b10 <LL_ADC_Disable>:
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <LL_ADC_Disable+0x20>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2202      	movs	r2, #2
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	609a      	str	r2, [r3, #8]
}
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b002      	add	sp, #8
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	7fffffe8 	.word	0x7fffffe8

08002b34 <LL_ADC_IsEnabled>:
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2201      	movs	r2, #1
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <LL_ADC_IsEnabled+0x18>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <LL_ADC_IsEnabled+0x1a>
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	0018      	movs	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b002      	add	sp, #8
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <LL_ADC_StartCalibration>:
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <LL_ADC_StartCalibration+0x24>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	2280      	movs	r2, #128	; 0x80
 8002b6a:	0612      	lsls	r2, r2, #24
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	609a      	str	r2, [r3, #8]
}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b002      	add	sp, #8
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	7fffffe8 	.word	0x7fffffe8

08002b80 <LL_ADC_IsCalibrationOnGoing>:
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	0fdb      	lsrs	r3, r3, #31
 8002b8e:	07da      	lsls	r2, r3, #31
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	061b      	lsls	r3, r3, #24
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d101      	bne.n	8002b9c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b002      	add	sp, #8
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b08b      	sub	sp, #44	; 0x2c
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2254      	movs	r2, #84	; 0x54
 8002bbc:	5c9b      	ldrb	r3, [r3, r2]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADCEx_Calibration_Start+0x1e>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e0dd      	b.n	8002d82 <HAL_ADCEx_Calibration_Start+0x1da>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2254      	movs	r2, #84	; 0x54
 8002bca:	2101      	movs	r1, #1
 8002bcc:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002bce:	231f      	movs	r3, #31
 8002bd0:	18fc      	adds	r4, r7, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f7ff fe63 	bl	80028a0 <ADC_Disable>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	0018      	movs	r0, r3
 8002be4:	f7ff ffa6 	bl	8002b34 <LL_ADC_IsEnabled>
 8002be8:	1e03      	subs	r3, r0, #0
 8002bea:	d000      	beq.n	8002bee <HAL_ADCEx_Calibration_Start+0x46>
 8002bec:	e0bc      	b.n	8002d68 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	4a66      	ldr	r2, [pc, #408]	; (8002d8c <HAL_ADCEx_Calibration_Start+0x1e4>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a62      	ldr	r2, [pc, #392]	; (8002d90 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	495f      	ldr	r1, [pc, #380]	; (8002d94 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8002c16:	400a      	ands	r2, r1
 8002c18:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1e:	e02d      	b.n	8002c7c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f7ff ff97 	bl	8002b58 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c2a:	e014      	b.n	8002c56 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4a58      	ldr	r2, [pc, #352]	; (8002d98 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d90d      	bls.n	8002c56 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	2212      	movs	r2, #18
 8002c40:	4393      	bics	r3, r2
 8002c42:	2210      	movs	r2, #16
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2254      	movs	r2, #84	; 0x54
 8002c4e:	2100      	movs	r1, #0
 8002c50:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e095      	b.n	8002d82 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f7ff ff90 	bl	8002b80 <LL_ADC_IsCalibrationOnGoing>
 8002c60:	1e03      	subs	r3, r0, #0
 8002c62:	d1e3      	bne.n	8002c2c <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7ff ff32 	bl	8002ad2 <LL_ADC_GetCalibrationFactor>
 8002c6e:	0002      	movs	r2, r0
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	189b      	adds	r3, r3, r2
 8002c74:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	3301      	adds	r3, #1
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	2b07      	cmp	r3, #7
 8002c80:	d9ce      	bls.n	8002c20 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002c82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c84:	6a38      	ldr	r0, [r7, #32]
 8002c86:	f7fd fa3d 	bl	8000104 <__udivsi3>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0018      	movs	r0, r3
 8002c94:	f7ff ff2a 	bl	8002aec <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff fef8 	bl	8002a92 <LL_ADC_GetClock>
 8002ca2:	1e03      	subs	r3, r0, #0
 8002ca4:	d11b      	bne.n	8002cde <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ca6:	4b3d      	ldr	r3, [pc, #244]	; (8002d9c <HAL_ADCEx_Calibration_Start+0x1f4>)
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7ff fee5 	bl	8002a78 <LL_ADC_GetCommonClock>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	23e0      	movs	r3, #224	; 0xe0
 8002cb6:	035b      	lsls	r3, r3, #13
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d310      	bcc.n	8002cde <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	0c9b      	lsrs	r3, r3, #18
 8002cc0:	3b03      	subs	r3, #3
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	0013      	movs	r3, r2
 8002cc8:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	085b      	lsrs	r3, r3, #1
 8002cce:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8002cd0:	e002      	b.n	8002cd8 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f9      	bne.n	8002cd2 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6a3a      	ldr	r2, [r7, #32]
 8002ce4:	0011      	movs	r1, r2
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f7ff fedf 	bl	8002aaa <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7ff ff0d 	bl	8002b10 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cf6:	f7fe ffcd 	bl	8001c94 <HAL_GetTick>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002cfe:	e01b      	b.n	8002d38 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d00:	f7fe ffc8 	bl	8001c94 <HAL_GetTick>
 8002d04:	0002      	movs	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d914      	bls.n	8002d38 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f7ff ff0e 	bl	8002b34 <LL_ADC_IsEnabled>
 8002d18:	1e03      	subs	r3, r0, #0
 8002d1a:	d00d      	beq.n	8002d38 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d20:	2210      	movs	r2, #16
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e024      	b.n	8002d82 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7ff fef9 	bl	8002b34 <LL_ADC_IsEnabled>
 8002d42:	1e03      	subs	r3, r0, #0
 8002d44:	d1dc      	bne.n	8002d00 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68d9      	ldr	r1, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	4393      	bics	r3, r2
 8002d5e:	2201      	movs	r2, #1
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	659a      	str	r2, [r3, #88]	; 0x58
 8002d66:	e005      	b.n	8002d74 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6c:	2210      	movs	r2, #16
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2254      	movs	r2, #84	; 0x54
 8002d78:	2100      	movs	r1, #0
 8002d7a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002d7c:	231f      	movs	r3, #31
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	781b      	ldrb	r3, [r3, #0]
}
 8002d82:	0018      	movs	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b00b      	add	sp, #44	; 0x2c
 8002d88:	bd90      	pop	{r4, r7, pc}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	fffffefd 	.word	0xfffffefd
 8002d90:	00008003 	.word	0x00008003
 8002d94:	ffff7ffc 	.word	0xffff7ffc
 8002d98:	0002f1ff 	.word	0x0002f1ff
 8002d9c:	40012708 	.word	0x40012708

08002da0 <__NVIC_EnableIRQ>:
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	0002      	movs	r2, r0
 8002da8:	1dfb      	adds	r3, r7, #7
 8002daa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002dac:	1dfb      	adds	r3, r7, #7
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b7f      	cmp	r3, #127	; 0x7f
 8002db2:	d809      	bhi.n	8002dc8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db4:	1dfb      	adds	r3, r7, #7
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	001a      	movs	r2, r3
 8002dba:	231f      	movs	r3, #31
 8002dbc:	401a      	ands	r2, r3
 8002dbe:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <__NVIC_EnableIRQ+0x30>)
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4091      	lsls	r1, r2
 8002dc4:	000a      	movs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]
}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b002      	add	sp, #8
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	e000e100 	.word	0xe000e100

08002dd4 <__NVIC_DisableIRQ>:
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	0002      	movs	r2, r0
 8002ddc:	1dfb      	adds	r3, r7, #7
 8002dde:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002de0:	1dfb      	adds	r3, r7, #7
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b7f      	cmp	r3, #127	; 0x7f
 8002de6:	d810      	bhi.n	8002e0a <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002de8:	1dfb      	adds	r3, r7, #7
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	001a      	movs	r2, r3
 8002dee:	231f      	movs	r3, #31
 8002df0:	4013      	ands	r3, r2
 8002df2:	4908      	ldr	r1, [pc, #32]	; (8002e14 <__NVIC_DisableIRQ+0x40>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	409a      	lsls	r2, r3
 8002df8:	0013      	movs	r3, r2
 8002dfa:	2280      	movs	r2, #128	; 0x80
 8002dfc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002dfe:	f3bf 8f4f 	dsb	sy
}
 8002e02:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002e04:	f3bf 8f6f 	isb	sy
}
 8002e08:	46c0      	nop			; (mov r8, r8)
}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b002      	add	sp, #8
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	e000e100 	.word	0xe000e100

08002e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e18:	b590      	push	{r4, r7, lr}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	0002      	movs	r2, r0
 8002e20:	6039      	str	r1, [r7, #0]
 8002e22:	1dfb      	adds	r3, r7, #7
 8002e24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e26:	1dfb      	adds	r3, r7, #7
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e2c:	d828      	bhi.n	8002e80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e2e:	4a2f      	ldr	r2, [pc, #188]	; (8002eec <__NVIC_SetPriority+0xd4>)
 8002e30:	1dfb      	adds	r3, r7, #7
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	b25b      	sxtb	r3, r3
 8002e36:	089b      	lsrs	r3, r3, #2
 8002e38:	33c0      	adds	r3, #192	; 0xc0
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	589b      	ldr	r3, [r3, r2]
 8002e3e:	1dfa      	adds	r2, r7, #7
 8002e40:	7812      	ldrb	r2, [r2, #0]
 8002e42:	0011      	movs	r1, r2
 8002e44:	2203      	movs	r2, #3
 8002e46:	400a      	ands	r2, r1
 8002e48:	00d2      	lsls	r2, r2, #3
 8002e4a:	21ff      	movs	r1, #255	; 0xff
 8002e4c:	4091      	lsls	r1, r2
 8002e4e:	000a      	movs	r2, r1
 8002e50:	43d2      	mvns	r2, r2
 8002e52:	401a      	ands	r2, r3
 8002e54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	019b      	lsls	r3, r3, #6
 8002e5a:	22ff      	movs	r2, #255	; 0xff
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	1dfb      	adds	r3, r7, #7
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	0018      	movs	r0, r3
 8002e64:	2303      	movs	r3, #3
 8002e66:	4003      	ands	r3, r0
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e6c:	481f      	ldr	r0, [pc, #124]	; (8002eec <__NVIC_SetPriority+0xd4>)
 8002e6e:	1dfb      	adds	r3, r7, #7
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	b25b      	sxtb	r3, r3
 8002e74:	089b      	lsrs	r3, r3, #2
 8002e76:	430a      	orrs	r2, r1
 8002e78:	33c0      	adds	r3, #192	; 0xc0
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e7e:	e031      	b.n	8002ee4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e80:	4a1b      	ldr	r2, [pc, #108]	; (8002ef0 <__NVIC_SetPriority+0xd8>)
 8002e82:	1dfb      	adds	r3, r7, #7
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	0019      	movs	r1, r3
 8002e88:	230f      	movs	r3, #15
 8002e8a:	400b      	ands	r3, r1
 8002e8c:	3b08      	subs	r3, #8
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	3306      	adds	r3, #6
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	18d3      	adds	r3, r2, r3
 8002e96:	3304      	adds	r3, #4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	1dfa      	adds	r2, r7, #7
 8002e9c:	7812      	ldrb	r2, [r2, #0]
 8002e9e:	0011      	movs	r1, r2
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	400a      	ands	r2, r1
 8002ea4:	00d2      	lsls	r2, r2, #3
 8002ea6:	21ff      	movs	r1, #255	; 0xff
 8002ea8:	4091      	lsls	r1, r2
 8002eaa:	000a      	movs	r2, r1
 8002eac:	43d2      	mvns	r2, r2
 8002eae:	401a      	ands	r2, r3
 8002eb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	019b      	lsls	r3, r3, #6
 8002eb6:	22ff      	movs	r2, #255	; 0xff
 8002eb8:	401a      	ands	r2, r3
 8002eba:	1dfb      	adds	r3, r7, #7
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	4003      	ands	r3, r0
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ec8:	4809      	ldr	r0, [pc, #36]	; (8002ef0 <__NVIC_SetPriority+0xd8>)
 8002eca:	1dfb      	adds	r3, r7, #7
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	001c      	movs	r4, r3
 8002ed0:	230f      	movs	r3, #15
 8002ed2:	4023      	ands	r3, r4
 8002ed4:	3b08      	subs	r3, #8
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	3306      	adds	r3, #6
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	18c3      	adds	r3, r0, r3
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	601a      	str	r2, [r3, #0]
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b003      	add	sp, #12
 8002eea:	bd90      	pop	{r4, r7, pc}
 8002eec:	e000e100 	.word	0xe000e100
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	1e5a      	subs	r2, r3, #1
 8002f00:	2380      	movs	r3, #128	; 0x80
 8002f02:	045b      	lsls	r3, r3, #17
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d301      	bcc.n	8002f0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e010      	b.n	8002f2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <SysTick_Config+0x44>)
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	3a01      	subs	r2, #1
 8002f12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f14:	2301      	movs	r3, #1
 8002f16:	425b      	negs	r3, r3
 8002f18:	2103      	movs	r1, #3
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7ff ff7c 	bl	8002e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <SysTick_Config+0x44>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f26:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <SysTick_Config+0x44>)
 8002f28:	2207      	movs	r2, #7
 8002f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	0018      	movs	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b002      	add	sp, #8
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	e000e010 	.word	0xe000e010

08002f3c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	210f      	movs	r1, #15
 8002f48:	187b      	adds	r3, r7, r1
 8002f4a:	1c02      	adds	r2, r0, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	187b      	adds	r3, r7, r1
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	b25b      	sxtb	r3, r3
 8002f56:	0011      	movs	r1, r2
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f7ff ff5d 	bl	8002e18 <__NVIC_SetPriority>
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b004      	add	sp, #16
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	0002      	movs	r2, r0
 8002f6e:	1dfb      	adds	r3, r7, #7
 8002f70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f72:	1dfb      	adds	r3, r7, #7
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	b25b      	sxtb	r3, r3
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f7ff ff11 	bl	8002da0 <__NVIC_EnableIRQ>
}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b002      	add	sp, #8
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	1dfb      	adds	r3, r7, #7
 8002f90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f92:	1dfb      	adds	r3, r7, #7
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	b25b      	sxtb	r3, r3
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f7ff ff1b 	bl	8002dd4 <__NVIC_DisableIRQ>
}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b002      	add	sp, #8
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7ff ff9f 	bl	8002ef4 <SysTick_Config>
 8002fb6:	0003      	movs	r3, r0
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e077      	b.n	80030c2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a3d      	ldr	r2, [pc, #244]	; (80030cc <HAL_DMA_Init+0x10c>)
 8002fd8:	4694      	mov	ip, r2
 8002fda:	4463      	add	r3, ip
 8002fdc:	2114      	movs	r1, #20
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7fd f890 	bl	8000104 <__udivsi3>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	009a      	lsls	r2, r3, #2
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2225      	movs	r2, #37	; 0x25
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4934      	ldr	r1, [pc, #208]	; (80030d0 <HAL_DMA_Init+0x110>)
 8003000:	400a      	ands	r2, r1
 8003002:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6819      	ldr	r1, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	0018      	movs	r0, r3
 800303e:	f000 f9c1 	bl	80033c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	01db      	lsls	r3, r3, #7
 800304a:	429a      	cmp	r2, r3
 800304c:	d102      	bne.n	8003054 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	213f      	movs	r1, #63	; 0x3f
 800305e:	400a      	ands	r2, r1
 8003060:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800306a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d011      	beq.n	8003098 <HAL_DMA_Init+0xd8>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b04      	cmp	r3, #4
 800307a:	d80d      	bhi.n	8003098 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	0018      	movs	r0, r3
 8003080:	f000 f9cc 	bl	800341c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	e008      	b.n	80030aa <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2225      	movs	r2, #37	; 0x25
 80030b4:	2101      	movs	r1, #1
 80030b6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2224      	movs	r2, #36	; 0x24
 80030bc:	2100      	movs	r1, #0
 80030be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	0018      	movs	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b002      	add	sp, #8
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	bffdfff8 	.word	0xbffdfff8
 80030d0:	ffff800f 	.word	0xffff800f

080030d4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
 80030e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030e2:	2317      	movs	r3, #23
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	2200      	movs	r2, #0
 80030e8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2224      	movs	r2, #36	; 0x24
 80030ee:	5c9b      	ldrb	r3, [r3, r2]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_DMA_Start_IT+0x24>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e06f      	b.n	80031d8 <HAL_DMA_Start_IT+0x104>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2224      	movs	r2, #36	; 0x24
 80030fc:	2101      	movs	r1, #1
 80030fe:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2225      	movs	r2, #37	; 0x25
 8003104:	5c9b      	ldrb	r3, [r3, r2]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d157      	bne.n	80031bc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2225      	movs	r2, #37	; 0x25
 8003110:	2102      	movs	r1, #2
 8003112:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2101      	movs	r1, #1
 8003126:	438a      	bics	r2, r1
 8003128:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f907 	bl	8003344 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	2b00      	cmp	r3, #0
 800313c:	d008      	beq.n	8003150 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	210e      	movs	r1, #14
 800314a:	430a      	orrs	r2, r1
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e00f      	b.n	8003170 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2104      	movs	r1, #4
 800315c:	438a      	bics	r2, r1
 800315e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	210a      	movs	r1, #10
 800316c:	430a      	orrs	r2, r1
 800316e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	025b      	lsls	r3, r3, #9
 800317a:	4013      	ands	r3, r2
 800317c:	d008      	beq.n	8003190 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	2180      	movs	r1, #128	; 0x80
 800318a:	0049      	lsls	r1, r1, #1
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a2:	2180      	movs	r1, #128	; 0x80
 80031a4:	0049      	lsls	r1, r1, #1
 80031a6:	430a      	orrs	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2101      	movs	r1, #1
 80031b6:	430a      	orrs	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	e00a      	b.n	80031d2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2280      	movs	r2, #128	; 0x80
 80031c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2224      	movs	r2, #36	; 0x24
 80031c6:	2100      	movs	r1, #0
 80031c8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80031ca:	2317      	movs	r3, #23
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	2201      	movs	r2, #1
 80031d0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80031d2:	2317      	movs	r3, #23
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	781b      	ldrb	r3, [r3, #0]
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b006      	add	sp, #24
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80031e8:	4b55      	ldr	r3, [pc, #340]	; (8003340 <HAL_DMA_IRQHandler+0x160>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	221c      	movs	r2, #28
 80031fc:	4013      	ands	r3, r2
 80031fe:	2204      	movs	r2, #4
 8003200:	409a      	lsls	r2, r3
 8003202:	0013      	movs	r3, r2
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4013      	ands	r3, r2
 8003208:	d027      	beq.n	800325a <HAL_DMA_IRQHandler+0x7a>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2204      	movs	r2, #4
 800320e:	4013      	ands	r3, r2
 8003210:	d023      	beq.n	800325a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2220      	movs	r2, #32
 800321a:	4013      	ands	r3, r2
 800321c:	d107      	bne.n	800322e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2104      	movs	r1, #4
 800322a:	438a      	bics	r2, r1
 800322c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800322e:	4b44      	ldr	r3, [pc, #272]	; (8003340 <HAL_DMA_IRQHandler+0x160>)
 8003230:	6859      	ldr	r1, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	221c      	movs	r2, #28
 8003238:	4013      	ands	r3, r2
 800323a:	2204      	movs	r2, #4
 800323c:	409a      	lsls	r2, r3
 800323e:	4b40      	ldr	r3, [pc, #256]	; (8003340 <HAL_DMA_IRQHandler+0x160>)
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	2b00      	cmp	r3, #0
 800324a:	d100      	bne.n	800324e <HAL_DMA_IRQHandler+0x6e>
 800324c:	e073      	b.n	8003336 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	0010      	movs	r0, r2
 8003256:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003258:	e06d      	b.n	8003336 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	221c      	movs	r2, #28
 8003260:	4013      	ands	r3, r2
 8003262:	2202      	movs	r2, #2
 8003264:	409a      	lsls	r2, r3
 8003266:	0013      	movs	r3, r2
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4013      	ands	r3, r2
 800326c:	d02e      	beq.n	80032cc <HAL_DMA_IRQHandler+0xec>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2202      	movs	r2, #2
 8003272:	4013      	ands	r3, r2
 8003274:	d02a      	beq.n	80032cc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2220      	movs	r2, #32
 800327e:	4013      	ands	r3, r2
 8003280:	d10b      	bne.n	800329a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	210a      	movs	r1, #10
 800328e:	438a      	bics	r2, r1
 8003290:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2225      	movs	r2, #37	; 0x25
 8003296:	2101      	movs	r1, #1
 8003298:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800329a:	4b29      	ldr	r3, [pc, #164]	; (8003340 <HAL_DMA_IRQHandler+0x160>)
 800329c:	6859      	ldr	r1, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	221c      	movs	r2, #28
 80032a4:	4013      	ands	r3, r2
 80032a6:	2202      	movs	r2, #2
 80032a8:	409a      	lsls	r2, r3
 80032aa:	4b25      	ldr	r3, [pc, #148]	; (8003340 <HAL_DMA_IRQHandler+0x160>)
 80032ac:	430a      	orrs	r2, r1
 80032ae:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2224      	movs	r2, #36	; 0x24
 80032b4:	2100      	movs	r1, #0
 80032b6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d03a      	beq.n	8003336 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	0010      	movs	r0, r2
 80032c8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80032ca:	e034      	b.n	8003336 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	221c      	movs	r2, #28
 80032d2:	4013      	ands	r3, r2
 80032d4:	2208      	movs	r2, #8
 80032d6:	409a      	lsls	r2, r3
 80032d8:	0013      	movs	r3, r2
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4013      	ands	r3, r2
 80032de:	d02b      	beq.n	8003338 <HAL_DMA_IRQHandler+0x158>
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2208      	movs	r2, #8
 80032e4:	4013      	ands	r3, r2
 80032e6:	d027      	beq.n	8003338 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	210e      	movs	r1, #14
 80032f4:	438a      	bics	r2, r1
 80032f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_DMA_IRQHandler+0x160>)
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	221c      	movs	r2, #28
 8003302:	4013      	ands	r3, r2
 8003304:	2201      	movs	r2, #1
 8003306:	409a      	lsls	r2, r3
 8003308:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <HAL_DMA_IRQHandler+0x160>)
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2225      	movs	r2, #37	; 0x25
 8003318:	2101      	movs	r1, #1
 800331a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2224      	movs	r2, #36	; 0x24
 8003320:	2100      	movs	r1, #0
 8003322:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	0010      	movs	r0, r2
 8003334:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	46c0      	nop			; (mov r8, r8)
}
 800333a:	46bd      	mov	sp, r7
 800333c:	b004      	add	sp, #16
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40020000 	.word	0x40020000

08003344 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800335a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003360:	2b00      	cmp	r3, #0
 8003362:	d004      	beq.n	800336e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800336c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800336e:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <DMA_SetConfig+0x7c>)
 8003370:	6859      	ldr	r1, [r3, #4]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	221c      	movs	r2, #28
 8003378:	4013      	ands	r3, r2
 800337a:	2201      	movs	r2, #1
 800337c:	409a      	lsls	r2, r3
 800337e:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <DMA_SetConfig+0x7c>)
 8003380:	430a      	orrs	r2, r1
 8003382:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b10      	cmp	r3, #16
 8003392:	d108      	bne.n	80033a6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033a4:	e007      	b.n	80033b6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	60da      	str	r2, [r3, #12]
}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b004      	add	sp, #16
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	40020000 	.word	0x40020000

080033c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	089b      	lsrs	r3, r3, #2
 80033d2:	4a10      	ldr	r2, [pc, #64]	; (8003414 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80033d4:	4694      	mov	ip, r2
 80033d6:	4463      	add	r3, ip
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	001a      	movs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	001a      	movs	r2, r3
 80033e6:	23ff      	movs	r3, #255	; 0xff
 80033e8:	4013      	ands	r3, r2
 80033ea:	3b08      	subs	r3, #8
 80033ec:	2114      	movs	r1, #20
 80033ee:	0018      	movs	r0, r3
 80033f0:	f7fc fe88 	bl	8000104 <__udivsi3>
 80033f4:	0003      	movs	r3, r0
 80033f6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a07      	ldr	r2, [pc, #28]	; (8003418 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80033fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	221f      	movs	r2, #31
 8003402:	4013      	ands	r3, r2
 8003404:	2201      	movs	r2, #1
 8003406:	409a      	lsls	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800340c:	46c0      	nop			; (mov r8, r8)
 800340e:	46bd      	mov	sp, r7
 8003410:	b004      	add	sp, #16
 8003412:	bd80      	pop	{r7, pc}
 8003414:	10008200 	.word	0x10008200
 8003418:	40020880 	.word	0x40020880

0800341c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	223f      	movs	r2, #63	; 0x3f
 800342a:	4013      	ands	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a0a      	ldr	r2, [pc, #40]	; (800345c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003432:	4694      	mov	ip, r2
 8003434:	4463      	add	r3, ip
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	001a      	movs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a07      	ldr	r2, [pc, #28]	; (8003460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003442:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3b01      	subs	r3, #1
 8003448:	2203      	movs	r2, #3
 800344a:	4013      	ands	r3, r2
 800344c:	2201      	movs	r2, #1
 800344e:	409a      	lsls	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b004      	add	sp, #16
 800345a:	bd80      	pop	{r7, pc}
 800345c:	1000823f 	.word	0x1000823f
 8003460:	40020940 	.word	0x40020940

08003464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003472:	e147      	b.n	8003704 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2101      	movs	r1, #1
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4091      	lsls	r1, r2
 800347e:	000a      	movs	r2, r1
 8003480:	4013      	ands	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d100      	bne.n	800348c <HAL_GPIO_Init+0x28>
 800348a:	e138      	b.n	80036fe <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2203      	movs	r2, #3
 8003492:	4013      	ands	r3, r2
 8003494:	2b01      	cmp	r3, #1
 8003496:	d005      	beq.n	80034a4 <HAL_GPIO_Init+0x40>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2203      	movs	r2, #3
 800349e:	4013      	ands	r3, r2
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d130      	bne.n	8003506 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	2203      	movs	r2, #3
 80034b0:	409a      	lsls	r2, r3
 80034b2:	0013      	movs	r3, r2
 80034b4:	43da      	mvns	r2, r3
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4013      	ands	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	409a      	lsls	r2, r3
 80034c6:	0013      	movs	r3, r2
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034da:	2201      	movs	r2, #1
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	409a      	lsls	r2, r3
 80034e0:	0013      	movs	r3, r2
 80034e2:	43da      	mvns	r2, r3
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4013      	ands	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	091b      	lsrs	r3, r3, #4
 80034f0:	2201      	movs	r2, #1
 80034f2:	401a      	ands	r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	409a      	lsls	r2, r3
 80034f8:	0013      	movs	r3, r2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2203      	movs	r2, #3
 800350c:	4013      	ands	r3, r2
 800350e:	2b03      	cmp	r3, #3
 8003510:	d017      	beq.n	8003542 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	2203      	movs	r2, #3
 800351e:	409a      	lsls	r2, r3
 8003520:	0013      	movs	r3, r2
 8003522:	43da      	mvns	r2, r3
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4013      	ands	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	409a      	lsls	r2, r3
 8003534:	0013      	movs	r3, r2
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2203      	movs	r2, #3
 8003548:	4013      	ands	r3, r2
 800354a:	2b02      	cmp	r3, #2
 800354c:	d123      	bne.n	8003596 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	08da      	lsrs	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3208      	adds	r2, #8
 8003556:	0092      	lsls	r2, r2, #2
 8003558:	58d3      	ldr	r3, [r2, r3]
 800355a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2207      	movs	r2, #7
 8003560:	4013      	ands	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	220f      	movs	r2, #15
 8003566:	409a      	lsls	r2, r3
 8003568:	0013      	movs	r3, r2
 800356a:	43da      	mvns	r2, r3
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2107      	movs	r1, #7
 800357a:	400b      	ands	r3, r1
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	409a      	lsls	r2, r3
 8003580:	0013      	movs	r3, r2
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	08da      	lsrs	r2, r3, #3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3208      	adds	r2, #8
 8003590:	0092      	lsls	r2, r2, #2
 8003592:	6939      	ldr	r1, [r7, #16]
 8003594:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	2203      	movs	r2, #3
 80035a2:	409a      	lsls	r2, r3
 80035a4:	0013      	movs	r3, r2
 80035a6:	43da      	mvns	r2, r3
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4013      	ands	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2203      	movs	r2, #3
 80035b4:	401a      	ands	r2, r3
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	409a      	lsls	r2, r3
 80035bc:	0013      	movs	r3, r2
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	23c0      	movs	r3, #192	; 0xc0
 80035d0:	029b      	lsls	r3, r3, #10
 80035d2:	4013      	ands	r3, r2
 80035d4:	d100      	bne.n	80035d8 <HAL_GPIO_Init+0x174>
 80035d6:	e092      	b.n	80036fe <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80035d8:	4a50      	ldr	r2, [pc, #320]	; (800371c <HAL_GPIO_Init+0x2b8>)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	089b      	lsrs	r3, r3, #2
 80035de:	3318      	adds	r3, #24
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	589b      	ldr	r3, [r3, r2]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2203      	movs	r2, #3
 80035ea:	4013      	ands	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	220f      	movs	r2, #15
 80035f0:	409a      	lsls	r2, r3
 80035f2:	0013      	movs	r3, r2
 80035f4:	43da      	mvns	r2, r3
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4013      	ands	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	23a0      	movs	r3, #160	; 0xa0
 8003600:	05db      	lsls	r3, r3, #23
 8003602:	429a      	cmp	r2, r3
 8003604:	d013      	beq.n	800362e <HAL_GPIO_Init+0x1ca>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a45      	ldr	r2, [pc, #276]	; (8003720 <HAL_GPIO_Init+0x2bc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00d      	beq.n	800362a <HAL_GPIO_Init+0x1c6>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a44      	ldr	r2, [pc, #272]	; (8003724 <HAL_GPIO_Init+0x2c0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d007      	beq.n	8003626 <HAL_GPIO_Init+0x1c2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a43      	ldr	r2, [pc, #268]	; (8003728 <HAL_GPIO_Init+0x2c4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_GPIO_Init+0x1be>
 800361e:	2303      	movs	r3, #3
 8003620:	e006      	b.n	8003630 <HAL_GPIO_Init+0x1cc>
 8003622:	2305      	movs	r3, #5
 8003624:	e004      	b.n	8003630 <HAL_GPIO_Init+0x1cc>
 8003626:	2302      	movs	r3, #2
 8003628:	e002      	b.n	8003630 <HAL_GPIO_Init+0x1cc>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_GPIO_Init+0x1cc>
 800362e:	2300      	movs	r3, #0
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	2103      	movs	r1, #3
 8003634:	400a      	ands	r2, r1
 8003636:	00d2      	lsls	r2, r2, #3
 8003638:	4093      	lsls	r3, r2
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003640:	4936      	ldr	r1, [pc, #216]	; (800371c <HAL_GPIO_Init+0x2b8>)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	089b      	lsrs	r3, r3, #2
 8003646:	3318      	adds	r3, #24
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800364e:	4b33      	ldr	r3, [pc, #204]	; (800371c <HAL_GPIO_Init+0x2b8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	43da      	mvns	r2, r3
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	035b      	lsls	r3, r3, #13
 8003666:	4013      	ands	r3, r2
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003672:	4b2a      	ldr	r3, [pc, #168]	; (800371c <HAL_GPIO_Init+0x2b8>)
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003678:	4b28      	ldr	r3, [pc, #160]	; (800371c <HAL_GPIO_Init+0x2b8>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	43da      	mvns	r2, r3
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4013      	ands	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	2380      	movs	r3, #128	; 0x80
 800368e:	039b      	lsls	r3, r3, #14
 8003690:	4013      	ands	r3, r2
 8003692:	d003      	beq.n	800369c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800369c:	4b1f      	ldr	r3, [pc, #124]	; (800371c <HAL_GPIO_Init+0x2b8>)
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036a2:	4a1e      	ldr	r2, [pc, #120]	; (800371c <HAL_GPIO_Init+0x2b8>)
 80036a4:	2384      	movs	r3, #132	; 0x84
 80036a6:	58d3      	ldr	r3, [r2, r3]
 80036a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	43da      	mvns	r2, r3
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	029b      	lsls	r3, r3, #10
 80036bc:	4013      	ands	r3, r2
 80036be:	d003      	beq.n	80036c8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036c8:	4914      	ldr	r1, [pc, #80]	; (800371c <HAL_GPIO_Init+0x2b8>)
 80036ca:	2284      	movs	r2, #132	; 0x84
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80036d0:	4a12      	ldr	r2, [pc, #72]	; (800371c <HAL_GPIO_Init+0x2b8>)
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	58d3      	ldr	r3, [r2, r3]
 80036d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	43da      	mvns	r2, r3
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	025b      	lsls	r3, r3, #9
 80036ea:	4013      	ands	r3, r2
 80036ec:	d003      	beq.n	80036f6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036f6:	4909      	ldr	r1, [pc, #36]	; (800371c <HAL_GPIO_Init+0x2b8>)
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	3301      	adds	r3, #1
 8003702:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	40da      	lsrs	r2, r3
 800370c:	1e13      	subs	r3, r2, #0
 800370e:	d000      	beq.n	8003712 <HAL_GPIO_Init+0x2ae>
 8003710:	e6b0      	b.n	8003474 <HAL_GPIO_Init+0x10>
  }
}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	46c0      	nop			; (mov r8, r8)
 8003716:	46bd      	mov	sp, r7
 8003718:	b006      	add	sp, #24
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021800 	.word	0x40021800
 8003720:	50000400 	.word	0x50000400
 8003724:	50000800 	.word	0x50000800
 8003728:	50000c00 	.word	0x50000c00

0800372c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	000a      	movs	r2, r1
 8003736:	1cbb      	adds	r3, r7, #2
 8003738:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	1cba      	adds	r2, r7, #2
 8003740:	8812      	ldrh	r2, [r2, #0]
 8003742:	4013      	ands	r3, r2
 8003744:	d004      	beq.n	8003750 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003746:	230f      	movs	r3, #15
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	2201      	movs	r2, #1
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	e003      	b.n	8003758 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003750:	230f      	movs	r3, #15
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003758:	230f      	movs	r3, #15
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	781b      	ldrb	r3, [r3, #0]
}
 800375e:	0018      	movs	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	b004      	add	sp, #16
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	0008      	movs	r0, r1
 8003770:	0011      	movs	r1, r2
 8003772:	1cbb      	adds	r3, r7, #2
 8003774:	1c02      	adds	r2, r0, #0
 8003776:	801a      	strh	r2, [r3, #0]
 8003778:	1c7b      	adds	r3, r7, #1
 800377a:	1c0a      	adds	r2, r1, #0
 800377c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800377e:	1c7b      	adds	r3, r7, #1
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d004      	beq.n	8003790 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003786:	1cbb      	adds	r3, r7, #2
 8003788:	881a      	ldrh	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800378e:	e003      	b.n	8003798 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003790:	1cbb      	adds	r3, r7, #2
 8003792:	881a      	ldrh	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	46bd      	mov	sp, r7
 800379c:	b002      	add	sp, #8
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	0002      	movs	r2, r0
 80037a8:	1dbb      	adds	r3, r7, #6
 80037aa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80037ac:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	1dba      	adds	r2, r7, #6
 80037b2:	8812      	ldrh	r2, [r2, #0]
 80037b4:	4013      	ands	r3, r2
 80037b6:	d008      	beq.n	80037ca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80037b8:	4b0d      	ldr	r3, [pc, #52]	; (80037f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80037ba:	1dba      	adds	r2, r7, #6
 80037bc:	8812      	ldrh	r2, [r2, #0]
 80037be:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80037c0:	1dbb      	adds	r3, r7, #6
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	0018      	movs	r0, r3
 80037c6:	f000 f815 	bl	80037f4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80037ca:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	1dba      	adds	r2, r7, #6
 80037d0:	8812      	ldrh	r2, [r2, #0]
 80037d2:	4013      	ands	r3, r2
 80037d4:	d008      	beq.n	80037e8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80037d6:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80037d8:	1dba      	adds	r2, r7, #6
 80037da:	8812      	ldrh	r2, [r2, #0]
 80037dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80037de:	1dbb      	adds	r3, r7, #6
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	0018      	movs	r0, r3
 80037e4:	f7fd feae 	bl	8001544 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80037e8:	46c0      	nop			; (mov r8, r8)
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b002      	add	sp, #8
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40021800 	.word	0x40021800

080037f4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	0002      	movs	r2, r0
 80037fc:	1dbb      	adds	r3, r7, #6
 80037fe:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003800:	46c0      	nop			; (mov r8, r8)
 8003802:	46bd      	mov	sp, r7
 8003804:	b002      	add	sp, #8
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003810:	4b19      	ldr	r3, [pc, #100]	; (8003878 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a19      	ldr	r2, [pc, #100]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003816:	4013      	ands	r3, r2
 8003818:	0019      	movs	r1, r3
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	430a      	orrs	r2, r1
 8003820:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	429a      	cmp	r2, r3
 800382a:	d11f      	bne.n	800386c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800382c:	4b14      	ldr	r3, [pc, #80]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	0013      	movs	r3, r2
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	189b      	adds	r3, r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4912      	ldr	r1, [pc, #72]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800383a:	0018      	movs	r0, r3
 800383c:	f7fc fc62 	bl	8000104 <__udivsi3>
 8003840:	0003      	movs	r3, r0
 8003842:	3301      	adds	r3, #1
 8003844:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003846:	e008      	b.n	800385a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3b01      	subs	r3, #1
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	e001      	b.n	800385a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e009      	b.n	800386e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800385a:	4b07      	ldr	r3, [pc, #28]	; (8003878 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	2380      	movs	r3, #128	; 0x80
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	401a      	ands	r2, r3
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	429a      	cmp	r2, r3
 800386a:	d0ed      	beq.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b004      	add	sp, #16
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	40007000 	.word	0x40007000
 800387c:	fffff9ff 	.word	0xfffff9ff
 8003880:	2000000c 	.word	0x2000000c
 8003884:	000f4240 	.word	0x000f4240

08003888 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e2fe      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2201      	movs	r2, #1
 80038a0:	4013      	ands	r3, r2
 80038a2:	d100      	bne.n	80038a6 <HAL_RCC_OscConfig+0x1e>
 80038a4:	e07c      	b.n	80039a0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038a6:	4bc3      	ldr	r3, [pc, #780]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2238      	movs	r2, #56	; 0x38
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038b0:	4bc0      	ldr	r3, [pc, #768]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2203      	movs	r2, #3
 80038b6:	4013      	ands	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d102      	bne.n	80038c6 <HAL_RCC_OscConfig+0x3e>
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d002      	beq.n	80038cc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d10b      	bne.n	80038e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038cc:	4bb9      	ldr	r3, [pc, #740]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	029b      	lsls	r3, r3, #10
 80038d4:	4013      	ands	r3, r2
 80038d6:	d062      	beq.n	800399e <HAL_RCC_OscConfig+0x116>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d15e      	bne.n	800399e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e2d9      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	2380      	movs	r3, #128	; 0x80
 80038ea:	025b      	lsls	r3, r3, #9
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d107      	bne.n	8003900 <HAL_RCC_OscConfig+0x78>
 80038f0:	4bb0      	ldr	r3, [pc, #704]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4baf      	ldr	r3, [pc, #700]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 80038f6:	2180      	movs	r1, #128	; 0x80
 80038f8:	0249      	lsls	r1, r1, #9
 80038fa:	430a      	orrs	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	e020      	b.n	8003942 <HAL_RCC_OscConfig+0xba>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	23a0      	movs	r3, #160	; 0xa0
 8003906:	02db      	lsls	r3, r3, #11
 8003908:	429a      	cmp	r2, r3
 800390a:	d10e      	bne.n	800392a <HAL_RCC_OscConfig+0xa2>
 800390c:	4ba9      	ldr	r3, [pc, #676]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4ba8      	ldr	r3, [pc, #672]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003912:	2180      	movs	r1, #128	; 0x80
 8003914:	02c9      	lsls	r1, r1, #11
 8003916:	430a      	orrs	r2, r1
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	4ba6      	ldr	r3, [pc, #664]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4ba5      	ldr	r3, [pc, #660]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003920:	2180      	movs	r1, #128	; 0x80
 8003922:	0249      	lsls	r1, r1, #9
 8003924:	430a      	orrs	r2, r1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e00b      	b.n	8003942 <HAL_RCC_OscConfig+0xba>
 800392a:	4ba2      	ldr	r3, [pc, #648]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4ba1      	ldr	r3, [pc, #644]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003930:	49a1      	ldr	r1, [pc, #644]	; (8003bb8 <HAL_RCC_OscConfig+0x330>)
 8003932:	400a      	ands	r2, r1
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	4b9f      	ldr	r3, [pc, #636]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b9e      	ldr	r3, [pc, #632]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 800393c:	499f      	ldr	r1, [pc, #636]	; (8003bbc <HAL_RCC_OscConfig+0x334>)
 800393e:	400a      	ands	r2, r1
 8003940:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d014      	beq.n	8003974 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394a:	f7fe f9a3 	bl	8001c94 <HAL_GetTick>
 800394e:	0003      	movs	r3, r0
 8003950:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003954:	f7fe f99e 	bl	8001c94 <HAL_GetTick>
 8003958:	0002      	movs	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b64      	cmp	r3, #100	; 0x64
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e298      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003966:	4b93      	ldr	r3, [pc, #588]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	2380      	movs	r3, #128	; 0x80
 800396c:	029b      	lsls	r3, r3, #10
 800396e:	4013      	ands	r3, r2
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0xcc>
 8003972:	e015      	b.n	80039a0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fe f98e 	bl	8001c94 <HAL_GetTick>
 8003978:	0003      	movs	r3, r0
 800397a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800397e:	f7fe f989 	bl	8001c94 <HAL_GetTick>
 8003982:	0002      	movs	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b64      	cmp	r3, #100	; 0x64
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e283      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003990:	4b88      	ldr	r3, [pc, #544]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	029b      	lsls	r3, r3, #10
 8003998:	4013      	ands	r3, r2
 800399a:	d1f0      	bne.n	800397e <HAL_RCC_OscConfig+0xf6>
 800399c:	e000      	b.n	80039a0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2202      	movs	r2, #2
 80039a6:	4013      	ands	r3, r2
 80039a8:	d100      	bne.n	80039ac <HAL_RCC_OscConfig+0x124>
 80039aa:	e099      	b.n	8003ae0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ac:	4b81      	ldr	r3, [pc, #516]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2238      	movs	r2, #56	; 0x38
 80039b2:	4013      	ands	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039b6:	4b7f      	ldr	r3, [pc, #508]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	2203      	movs	r2, #3
 80039bc:	4013      	ands	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2b10      	cmp	r3, #16
 80039c4:	d102      	bne.n	80039cc <HAL_RCC_OscConfig+0x144>
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d002      	beq.n	80039d2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d135      	bne.n	8003a3e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039d2:	4b78      	ldr	r3, [pc, #480]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4013      	ands	r3, r2
 80039dc:	d005      	beq.n	80039ea <HAL_RCC_OscConfig+0x162>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e256      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ea:	4b72      	ldr	r3, [pc, #456]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4a74      	ldr	r2, [pc, #464]	; (8003bc0 <HAL_RCC_OscConfig+0x338>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	0019      	movs	r1, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	021a      	lsls	r2, r3, #8
 80039fa:	4b6e      	ldr	r3, [pc, #440]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 80039fc:	430a      	orrs	r2, r1
 80039fe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d112      	bne.n	8003a2c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a06:	4b6b      	ldr	r3, [pc, #428]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a6e      	ldr	r2, [pc, #440]	; (8003bc4 <HAL_RCC_OscConfig+0x33c>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	0019      	movs	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	4b67      	ldr	r3, [pc, #412]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003a16:	430a      	orrs	r2, r1
 8003a18:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003a1a:	4b66      	ldr	r3, [pc, #408]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	0adb      	lsrs	r3, r3, #11
 8003a20:	2207      	movs	r2, #7
 8003a22:	4013      	ands	r3, r2
 8003a24:	4a68      	ldr	r2, [pc, #416]	; (8003bc8 <HAL_RCC_OscConfig+0x340>)
 8003a26:	40da      	lsrs	r2, r3
 8003a28:	4b68      	ldr	r3, [pc, #416]	; (8003bcc <HAL_RCC_OscConfig+0x344>)
 8003a2a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a2c:	4b68      	ldr	r3, [pc, #416]	; (8003bd0 <HAL_RCC_OscConfig+0x348>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	0018      	movs	r0, r3
 8003a32:	f7fe f8d3 	bl	8001bdc <HAL_InitTick>
 8003a36:	1e03      	subs	r3, r0, #0
 8003a38:	d051      	beq.n	8003ade <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e22c      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d030      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a46:	4b5b      	ldr	r3, [pc, #364]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a5e      	ldr	r2, [pc, #376]	; (8003bc4 <HAL_RCC_OscConfig+0x33c>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	0019      	movs	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	4b57      	ldr	r3, [pc, #348]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003a56:	430a      	orrs	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003a5a:	4b56      	ldr	r3, [pc, #344]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b55      	ldr	r3, [pc, #340]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003a60:	2180      	movs	r1, #128	; 0x80
 8003a62:	0049      	lsls	r1, r1, #1
 8003a64:	430a      	orrs	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fe f914 	bl	8001c94 <HAL_GetTick>
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fe f90f 	bl	8001c94 <HAL_GetTick>
 8003a76:	0002      	movs	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e209      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a84:	4b4b      	ldr	r3, [pc, #300]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b48      	ldr	r3, [pc, #288]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4a4a      	ldr	r2, [pc, #296]	; (8003bc0 <HAL_RCC_OscConfig+0x338>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	0019      	movs	r1, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	021a      	lsls	r2, r3, #8
 8003aa0:	4b44      	ldr	r3, [pc, #272]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	e01b      	b.n	8003ae0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003aa8:	4b42      	ldr	r3, [pc, #264]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4b41      	ldr	r3, [pc, #260]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003aae:	4949      	ldr	r1, [pc, #292]	; (8003bd4 <HAL_RCC_OscConfig+0x34c>)
 8003ab0:	400a      	ands	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab4:	f7fe f8ee 	bl	8001c94 <HAL_GetTick>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003abe:	f7fe f8e9 	bl	8001c94 <HAL_GetTick>
 8003ac2:	0002      	movs	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e1e3      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ad0:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d1f0      	bne.n	8003abe <HAL_RCC_OscConfig+0x236>
 8003adc:	e000      	b.n	8003ae0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ade:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d047      	beq.n	8003b7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003aea:	4b32      	ldr	r3, [pc, #200]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2238      	movs	r2, #56	; 0x38
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b18      	cmp	r3, #24
 8003af4:	d10a      	bne.n	8003b0c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003af6:	4b2f      	ldr	r3, [pc, #188]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afa:	2202      	movs	r2, #2
 8003afc:	4013      	ands	r3, r2
 8003afe:	d03c      	beq.n	8003b7a <HAL_RCC_OscConfig+0x2f2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d138      	bne.n	8003b7a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e1c5      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d019      	beq.n	8003b48 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003b14:	4b27      	ldr	r3, [pc, #156]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003b16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b18:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fe f8b8 	bl	8001c94 <HAL_GetTick>
 8003b24:	0003      	movs	r3, r0
 8003b26:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2a:	f7fe f8b3 	bl	8001c94 <HAL_GetTick>
 8003b2e:	0002      	movs	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e1ad      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b3c:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b40:	2202      	movs	r2, #2
 8003b42:	4013      	ands	r3, r2
 8003b44:	d0f1      	beq.n	8003b2a <HAL_RCC_OscConfig+0x2a2>
 8003b46:	e018      	b.n	8003b7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003b48:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003b4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b4c:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003b4e:	2101      	movs	r1, #1
 8003b50:	438a      	bics	r2, r1
 8003b52:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fe f89e 	bl	8001c94 <HAL_GetTick>
 8003b58:	0003      	movs	r3, r0
 8003b5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b5e:	f7fe f899 	bl	8001c94 <HAL_GetTick>
 8003b62:	0002      	movs	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e193      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b70:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b74:	2202      	movs	r2, #2
 8003b76:	4013      	ands	r3, r2
 8003b78:	d1f1      	bne.n	8003b5e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2204      	movs	r2, #4
 8003b80:	4013      	ands	r3, r2
 8003b82:	d100      	bne.n	8003b86 <HAL_RCC_OscConfig+0x2fe>
 8003b84:	e0c6      	b.n	8003d14 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b86:	231f      	movs	r3, #31
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b8e:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2238      	movs	r2, #56	; 0x38
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d11e      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_RCC_OscConfig+0x32c>)
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d100      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x31e>
 8003ba4:	e0b6      	b.n	8003d14 <HAL_RCC_OscConfig+0x48c>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d000      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x328>
 8003bae:	e0b1      	b.n	8003d14 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e171      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	fffeffff 	.word	0xfffeffff
 8003bbc:	fffbffff 	.word	0xfffbffff
 8003bc0:	ffff80ff 	.word	0xffff80ff
 8003bc4:	ffffc7ff 	.word	0xffffc7ff
 8003bc8:	00f42400 	.word	0x00f42400
 8003bcc:	2000000c 	.word	0x2000000c
 8003bd0:	20000010 	.word	0x20000010
 8003bd4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bd8:	4bb1      	ldr	r3, [pc, #708]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	055b      	lsls	r3, r3, #21
 8003be0:	4013      	ands	r3, r2
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_OscConfig+0x360>
 8003be4:	2301      	movs	r3, #1
 8003be6:	e000      	b.n	8003bea <HAL_RCC_OscConfig+0x362>
 8003be8:	2300      	movs	r3, #0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d011      	beq.n	8003c12 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003bee:	4bac      	ldr	r3, [pc, #688]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf2:	4bab      	ldr	r3, [pc, #684]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003bf4:	2180      	movs	r1, #128	; 0x80
 8003bf6:	0549      	lsls	r1, r1, #21
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8003bfc:	4ba8      	ldr	r3, [pc, #672]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	055b      	lsls	r3, r3, #21
 8003c04:	4013      	ands	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003c0a:	231f      	movs	r3, #31
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	2201      	movs	r2, #1
 8003c10:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c12:	4ba4      	ldr	r3, [pc, #656]	; (8003ea4 <HAL_RCC_OscConfig+0x61c>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d11a      	bne.n	8003c54 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c1e:	4ba1      	ldr	r3, [pc, #644]	; (8003ea4 <HAL_RCC_OscConfig+0x61c>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4ba0      	ldr	r3, [pc, #640]	; (8003ea4 <HAL_RCC_OscConfig+0x61c>)
 8003c24:	2180      	movs	r1, #128	; 0x80
 8003c26:	0049      	lsls	r1, r1, #1
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003c2c:	f7fe f832 	bl	8001c94 <HAL_GetTick>
 8003c30:	0003      	movs	r3, r0
 8003c32:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c36:	f7fe f82d 	bl	8001c94 <HAL_GetTick>
 8003c3a:	0002      	movs	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e127      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c48:	4b96      	ldr	r3, [pc, #600]	; (8003ea4 <HAL_RCC_OscConfig+0x61c>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4013      	ands	r3, r2
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d106      	bne.n	8003c6a <HAL_RCC_OscConfig+0x3e2>
 8003c5c:	4b90      	ldr	r3, [pc, #576]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003c5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c60:	4b8f      	ldr	r3, [pc, #572]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003c62:	2101      	movs	r1, #1
 8003c64:	430a      	orrs	r2, r1
 8003c66:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c68:	e01c      	b.n	8003ca4 <HAL_RCC_OscConfig+0x41c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b05      	cmp	r3, #5
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x404>
 8003c72:	4b8b      	ldr	r3, [pc, #556]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003c74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c76:	4b8a      	ldr	r3, [pc, #552]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003c78:	2104      	movs	r1, #4
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c7e:	4b88      	ldr	r3, [pc, #544]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003c80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c82:	4b87      	ldr	r3, [pc, #540]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003c84:	2101      	movs	r1, #1
 8003c86:	430a      	orrs	r2, r1
 8003c88:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0x41c>
 8003c8c:	4b84      	ldr	r3, [pc, #528]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003c8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c90:	4b83      	ldr	r3, [pc, #524]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003c92:	2101      	movs	r1, #1
 8003c94:	438a      	bics	r2, r1
 8003c96:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c98:	4b81      	ldr	r3, [pc, #516]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003c9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c9c:	4b80      	ldr	r3, [pc, #512]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003c9e:	2104      	movs	r1, #4
 8003ca0:	438a      	bics	r2, r1
 8003ca2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d014      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fd fff2 	bl	8001c94 <HAL_GetTick>
 8003cb0:	0003      	movs	r3, r0
 8003cb2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb4:	e009      	b.n	8003cca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb6:	f7fd ffed 	bl	8001c94 <HAL_GetTick>
 8003cba:	0002      	movs	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	4a79      	ldr	r2, [pc, #484]	; (8003ea8 <HAL_RCC_OscConfig+0x620>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e0e6      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cca:	4b75      	ldr	r3, [pc, #468]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cce:	2202      	movs	r2, #2
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x42e>
 8003cd4:	e013      	b.n	8003cfe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fd ffdd 	bl	8001c94 <HAL_GetTick>
 8003cda:	0003      	movs	r3, r0
 8003cdc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cde:	e009      	b.n	8003cf4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce0:	f7fd ffd8 	bl	8001c94 <HAL_GetTick>
 8003ce4:	0002      	movs	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	4a6f      	ldr	r2, [pc, #444]	; (8003ea8 <HAL_RCC_OscConfig+0x620>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e0d1      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cf4:	4b6a      	ldr	r3, [pc, #424]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003cfe:	231f      	movs	r3, #31
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003d08:	4b65      	ldr	r3, [pc, #404]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d0c:	4b64      	ldr	r3, [pc, #400]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003d0e:	4967      	ldr	r1, [pc, #412]	; (8003eac <HAL_RCC_OscConfig+0x624>)
 8003d10:	400a      	ands	r2, r1
 8003d12:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d100      	bne.n	8003d1e <HAL_RCC_OscConfig+0x496>
 8003d1c:	e0bb      	b.n	8003e96 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d1e:	4b60      	ldr	r3, [pc, #384]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2238      	movs	r2, #56	; 0x38
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b10      	cmp	r3, #16
 8003d28:	d100      	bne.n	8003d2c <HAL_RCC_OscConfig+0x4a4>
 8003d2a:	e07b      	b.n	8003e24 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d156      	bne.n	8003de2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d34:	4b5a      	ldr	r3, [pc, #360]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b59      	ldr	r3, [pc, #356]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003d3a:	495d      	ldr	r1, [pc, #372]	; (8003eb0 <HAL_RCC_OscConfig+0x628>)
 8003d3c:	400a      	ands	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fd ffa8 	bl	8001c94 <HAL_GetTick>
 8003d44:	0003      	movs	r3, r0
 8003d46:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4a:	f7fd ffa3 	bl	8001c94 <HAL_GetTick>
 8003d4e:	0002      	movs	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e09d      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d5c:	4b50      	ldr	r3, [pc, #320]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	049b      	lsls	r3, r3, #18
 8003d64:	4013      	ands	r3, r2
 8003d66:	d1f0      	bne.n	8003d4a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d68:	4b4d      	ldr	r3, [pc, #308]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4a51      	ldr	r2, [pc, #324]	; (8003eb4 <HAL_RCC_OscConfig+0x62c>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	0019      	movs	r1, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1a      	ldr	r2, [r3, #32]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d94:	431a      	orrs	r2, r3
 8003d96:	4b42      	ldr	r3, [pc, #264]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d9c:	4b40      	ldr	r3, [pc, #256]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b3f      	ldr	r3, [pc, #252]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003da2:	2180      	movs	r1, #128	; 0x80
 8003da4:	0449      	lsls	r1, r1, #17
 8003da6:	430a      	orrs	r2, r1
 8003da8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003daa:	4b3d      	ldr	r3, [pc, #244]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	4b3c      	ldr	r3, [pc, #240]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003db0:	2180      	movs	r1, #128	; 0x80
 8003db2:	0549      	lsls	r1, r1, #21
 8003db4:	430a      	orrs	r2, r1
 8003db6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fd ff6c 	bl	8001c94 <HAL_GetTick>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc2:	f7fd ff67 	bl	8001c94 <HAL_GetTick>
 8003dc6:	0002      	movs	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e061      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd4:	4b32      	ldr	r3, [pc, #200]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	2380      	movs	r3, #128	; 0x80
 8003dda:	049b      	lsls	r3, r3, #18
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d0f0      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x53a>
 8003de0:	e059      	b.n	8003e96 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de2:	4b2f      	ldr	r3, [pc, #188]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	4b2e      	ldr	r3, [pc, #184]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003de8:	4931      	ldr	r1, [pc, #196]	; (8003eb0 <HAL_RCC_OscConfig+0x628>)
 8003dea:	400a      	ands	r2, r1
 8003dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dee:	f7fd ff51 	bl	8001c94 <HAL_GetTick>
 8003df2:	0003      	movs	r3, r0
 8003df4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df8:	f7fd ff4c 	bl	8001c94 <HAL_GetTick>
 8003dfc:	0002      	movs	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e046      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e0a:	4b25      	ldr	r3, [pc, #148]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	2380      	movs	r3, #128	; 0x80
 8003e10:	049b      	lsls	r3, r3, #18
 8003e12:	4013      	ands	r3, r2
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003e16:	4b22      	ldr	r3, [pc, #136]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003e1c:	4926      	ldr	r1, [pc, #152]	; (8003eb8 <HAL_RCC_OscConfig+0x630>)
 8003e1e:	400a      	ands	r2, r1
 8003e20:	60da      	str	r2, [r3, #12]
 8003e22:	e038      	b.n	8003e96 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e033      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003e30:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <HAL_RCC_OscConfig+0x618>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2203      	movs	r2, #3
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d126      	bne.n	8003e92 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2270      	movs	r2, #112	; 0x70
 8003e48:	401a      	ands	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d11f      	bne.n	8003e92 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	23fe      	movs	r3, #254	; 0xfe
 8003e56:	01db      	lsls	r3, r3, #7
 8003e58:	401a      	ands	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d116      	bne.n	8003e92 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	23f8      	movs	r3, #248	; 0xf8
 8003e68:	039b      	lsls	r3, r3, #14
 8003e6a:	401a      	ands	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d10e      	bne.n	8003e92 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	23e0      	movs	r3, #224	; 0xe0
 8003e78:	051b      	lsls	r3, r3, #20
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d106      	bne.n	8003e92 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	0f5b      	lsrs	r3, r3, #29
 8003e88:	075a      	lsls	r2, r3, #29
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d001      	beq.n	8003e96 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	0018      	movs	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b008      	add	sp, #32
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	40007000 	.word	0x40007000
 8003ea8:	00001388 	.word	0x00001388
 8003eac:	efffffff 	.word	0xefffffff
 8003eb0:	feffffff 	.word	0xfeffffff
 8003eb4:	11c1808c 	.word	0x11c1808c
 8003eb8:	eefefffc 	.word	0xeefefffc

08003ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0e9      	b.n	80040a4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b76      	ldr	r3, [pc, #472]	; (80040ac <HAL_RCC_ClockConfig+0x1f0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2207      	movs	r2, #7
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d91e      	bls.n	8003f1c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b73      	ldr	r3, [pc, #460]	; (80040ac <HAL_RCC_ClockConfig+0x1f0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2207      	movs	r2, #7
 8003ee4:	4393      	bics	r3, r2
 8003ee6:	0019      	movs	r1, r3
 8003ee8:	4b70      	ldr	r3, [pc, #448]	; (80040ac <HAL_RCC_ClockConfig+0x1f0>)
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ef0:	f7fd fed0 	bl	8001c94 <HAL_GetTick>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ef8:	e009      	b.n	8003f0e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efa:	f7fd fecb 	bl	8001c94 <HAL_GetTick>
 8003efe:	0002      	movs	r2, r0
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	4a6a      	ldr	r2, [pc, #424]	; (80040b0 <HAL_RCC_ClockConfig+0x1f4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e0ca      	b.n	80040a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f0e:	4b67      	ldr	r3, [pc, #412]	; (80040ac <HAL_RCC_ClockConfig+0x1f0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2207      	movs	r2, #7
 8003f14:	4013      	ands	r3, r2
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d1ee      	bne.n	8003efa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2202      	movs	r2, #2
 8003f22:	4013      	ands	r3, r2
 8003f24:	d015      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d006      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003f30:	4b60      	ldr	r3, [pc, #384]	; (80040b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	4b5f      	ldr	r3, [pc, #380]	; (80040b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f36:	21e0      	movs	r1, #224	; 0xe0
 8003f38:	01c9      	lsls	r1, r1, #7
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3e:	4b5d      	ldr	r3, [pc, #372]	; (80040b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	4a5d      	ldr	r2, [pc, #372]	; (80040b8 <HAL_RCC_ClockConfig+0x1fc>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	0019      	movs	r1, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	4b59      	ldr	r3, [pc, #356]	; (80040b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2201      	movs	r2, #1
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d057      	beq.n	800400c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d107      	bne.n	8003f74 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f64:	4b53      	ldr	r3, [pc, #332]	; (80040b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	029b      	lsls	r3, r3, #10
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d12b      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e097      	b.n	80040a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d107      	bne.n	8003f8c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f7c:	4b4d      	ldr	r3, [pc, #308]	; (80040b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	049b      	lsls	r3, r3, #18
 8003f84:	4013      	ands	r3, r2
 8003f86:	d11f      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e08b      	b.n	80040a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d107      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f94:	4b47      	ldr	r3, [pc, #284]	; (80040b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d113      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e07f      	b.n	80040a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d106      	bne.n	8003fba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fac:	4b41      	ldr	r3, [pc, #260]	; (80040b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d108      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e074      	b.n	80040a4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fba:	4b3e      	ldr	r3, [pc, #248]	; (80040b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e06d      	b.n	80040a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fc8:	4b3a      	ldr	r3, [pc, #232]	; (80040b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2207      	movs	r2, #7
 8003fce:	4393      	bics	r3, r2
 8003fd0:	0019      	movs	r1, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	4b37      	ldr	r3, [pc, #220]	; (80040b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fdc:	f7fd fe5a 	bl	8001c94 <HAL_GetTick>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe4:	e009      	b.n	8003ffa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe6:	f7fd fe55 	bl	8001c94 <HAL_GetTick>
 8003fea:	0002      	movs	r2, r0
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	4a2f      	ldr	r2, [pc, #188]	; (80040b0 <HAL_RCC_ClockConfig+0x1f4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e054      	b.n	80040a4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffa:	4b2e      	ldr	r3, [pc, #184]	; (80040b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2238      	movs	r2, #56	; 0x38
 8004000:	401a      	ands	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	429a      	cmp	r2, r3
 800400a:	d1ec      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800400c:	4b27      	ldr	r3, [pc, #156]	; (80040ac <HAL_RCC_ClockConfig+0x1f0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2207      	movs	r2, #7
 8004012:	4013      	ands	r3, r2
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d21e      	bcs.n	8004058 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401a:	4b24      	ldr	r3, [pc, #144]	; (80040ac <HAL_RCC_ClockConfig+0x1f0>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2207      	movs	r2, #7
 8004020:	4393      	bics	r3, r2
 8004022:	0019      	movs	r1, r3
 8004024:	4b21      	ldr	r3, [pc, #132]	; (80040ac <HAL_RCC_ClockConfig+0x1f0>)
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800402c:	f7fd fe32 	bl	8001c94 <HAL_GetTick>
 8004030:	0003      	movs	r3, r0
 8004032:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004034:	e009      	b.n	800404a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004036:	f7fd fe2d 	bl	8001c94 <HAL_GetTick>
 800403a:	0002      	movs	r2, r0
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	4a1b      	ldr	r2, [pc, #108]	; (80040b0 <HAL_RCC_ClockConfig+0x1f4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e02c      	b.n	80040a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800404a:	4b18      	ldr	r3, [pc, #96]	; (80040ac <HAL_RCC_ClockConfig+0x1f0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2207      	movs	r2, #7
 8004050:	4013      	ands	r3, r2
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d1ee      	bne.n	8004036 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2204      	movs	r2, #4
 800405e:	4013      	ands	r3, r2
 8004060:	d009      	beq.n	8004076 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004062:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <HAL_RCC_ClockConfig+0x1f8>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	4a15      	ldr	r2, [pc, #84]	; (80040bc <HAL_RCC_ClockConfig+0x200>)
 8004068:	4013      	ands	r3, r2
 800406a:	0019      	movs	r1, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <HAL_RCC_ClockConfig+0x1f8>)
 8004072:	430a      	orrs	r2, r1
 8004074:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004076:	f000 f829 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 800407a:	0001      	movs	r1, r0
 800407c:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <HAL_RCC_ClockConfig+0x1f8>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	0a1b      	lsrs	r3, r3, #8
 8004082:	220f      	movs	r2, #15
 8004084:	401a      	ands	r2, r3
 8004086:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <HAL_RCC_ClockConfig+0x204>)
 8004088:	0092      	lsls	r2, r2, #2
 800408a:	58d3      	ldr	r3, [r2, r3]
 800408c:	221f      	movs	r2, #31
 800408e:	4013      	ands	r3, r2
 8004090:	000a      	movs	r2, r1
 8004092:	40da      	lsrs	r2, r3
 8004094:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <HAL_RCC_ClockConfig+0x208>)
 8004096:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004098:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <HAL_RCC_ClockConfig+0x20c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	0018      	movs	r0, r3
 800409e:	f7fd fd9d 	bl	8001bdc <HAL_InitTick>
 80040a2:	0003      	movs	r3, r0
}
 80040a4:	0018      	movs	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b004      	add	sp, #16
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40022000 	.word	0x40022000
 80040b0:	00001388 	.word	0x00001388
 80040b4:	40021000 	.word	0x40021000
 80040b8:	fffff0ff 	.word	0xfffff0ff
 80040bc:	ffff8fff 	.word	0xffff8fff
 80040c0:	08004dc8 	.word	0x08004dc8
 80040c4:	2000000c 	.word	0x2000000c
 80040c8:	20000010 	.word	0x20000010

080040cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040d2:	4b3c      	ldr	r3, [pc, #240]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2238      	movs	r2, #56	; 0x38
 80040d8:	4013      	ands	r3, r2
 80040da:	d10f      	bne.n	80040fc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80040dc:	4b39      	ldr	r3, [pc, #228]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	0adb      	lsrs	r3, r3, #11
 80040e2:	2207      	movs	r2, #7
 80040e4:	4013      	ands	r3, r2
 80040e6:	2201      	movs	r2, #1
 80040e8:	409a      	lsls	r2, r3
 80040ea:	0013      	movs	r3, r2
 80040ec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80040ee:	6839      	ldr	r1, [r7, #0]
 80040f0:	4835      	ldr	r0, [pc, #212]	; (80041c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80040f2:	f7fc f807 	bl	8000104 <__udivsi3>
 80040f6:	0003      	movs	r3, r0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	e05d      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040fc:	4b31      	ldr	r3, [pc, #196]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2238      	movs	r2, #56	; 0x38
 8004102:	4013      	ands	r3, r2
 8004104:	2b08      	cmp	r3, #8
 8004106:	d102      	bne.n	800410e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004108:	4b30      	ldr	r3, [pc, #192]	; (80041cc <HAL_RCC_GetSysClockFreq+0x100>)
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	e054      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800410e:	4b2d      	ldr	r3, [pc, #180]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2238      	movs	r2, #56	; 0x38
 8004114:	4013      	ands	r3, r2
 8004116:	2b10      	cmp	r3, #16
 8004118:	d138      	bne.n	800418c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800411a:	4b2a      	ldr	r3, [pc, #168]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2203      	movs	r2, #3
 8004120:	4013      	ands	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004124:	4b27      	ldr	r3, [pc, #156]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	091b      	lsrs	r3, r3, #4
 800412a:	2207      	movs	r2, #7
 800412c:	4013      	ands	r3, r2
 800412e:	3301      	adds	r3, #1
 8004130:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b03      	cmp	r3, #3
 8004136:	d10d      	bne.n	8004154 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	4824      	ldr	r0, [pc, #144]	; (80041cc <HAL_RCC_GetSysClockFreq+0x100>)
 800413c:	f7fb ffe2 	bl	8000104 <__udivsi3>
 8004140:	0003      	movs	r3, r0
 8004142:	0019      	movs	r1, r3
 8004144:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	0a1b      	lsrs	r3, r3, #8
 800414a:	227f      	movs	r2, #127	; 0x7f
 800414c:	4013      	ands	r3, r2
 800414e:	434b      	muls	r3, r1
 8004150:	617b      	str	r3, [r7, #20]
        break;
 8004152:	e00d      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	481c      	ldr	r0, [pc, #112]	; (80041c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004158:	f7fb ffd4 	bl	8000104 <__udivsi3>
 800415c:	0003      	movs	r3, r0
 800415e:	0019      	movs	r1, r3
 8004160:	4b18      	ldr	r3, [pc, #96]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	0a1b      	lsrs	r3, r3, #8
 8004166:	227f      	movs	r2, #127	; 0x7f
 8004168:	4013      	ands	r3, r2
 800416a:	434b      	muls	r3, r1
 800416c:	617b      	str	r3, [r7, #20]
        break;
 800416e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	0f5b      	lsrs	r3, r3, #29
 8004176:	2207      	movs	r2, #7
 8004178:	4013      	ands	r3, r2
 800417a:	3301      	adds	r3, #1
 800417c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	6978      	ldr	r0, [r7, #20]
 8004182:	f7fb ffbf 	bl	8000104 <__udivsi3>
 8004186:	0003      	movs	r3, r0
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	e015      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800418c:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2238      	movs	r2, #56	; 0x38
 8004192:	4013      	ands	r3, r2
 8004194:	2b20      	cmp	r3, #32
 8004196:	d103      	bne.n	80041a0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	021b      	lsls	r3, r3, #8
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	e00b      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80041a0:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	2238      	movs	r2, #56	; 0x38
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b18      	cmp	r3, #24
 80041aa:	d103      	bne.n	80041b4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80041ac:	23fa      	movs	r3, #250	; 0xfa
 80041ae:	01db      	lsls	r3, r3, #7
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	e001      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80041b8:	693b      	ldr	r3, [r7, #16]
}
 80041ba:	0018      	movs	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	b006      	add	sp, #24
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	40021000 	.word	0x40021000
 80041c8:	00f42400 	.word	0x00f42400
 80041cc:	007a1200 	.word	0x007a1200

080041d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80041d8:	2313      	movs	r3, #19
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	2200      	movs	r2, #0
 80041de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041e0:	2312      	movs	r3, #18
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	029b      	lsls	r3, r3, #10
 80041f0:	4013      	ands	r3, r2
 80041f2:	d100      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80041f4:	e0a3      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f6:	2011      	movs	r0, #17
 80041f8:	183b      	adds	r3, r7, r0
 80041fa:	2200      	movs	r2, #0
 80041fc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fe:	4ba5      	ldr	r3, [pc, #660]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004202:	2380      	movs	r3, #128	; 0x80
 8004204:	055b      	lsls	r3, r3, #21
 8004206:	4013      	ands	r3, r2
 8004208:	d110      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420a:	4ba2      	ldr	r3, [pc, #648]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800420c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800420e:	4ba1      	ldr	r3, [pc, #644]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004210:	2180      	movs	r1, #128	; 0x80
 8004212:	0549      	lsls	r1, r1, #21
 8004214:	430a      	orrs	r2, r1
 8004216:	63da      	str	r2, [r3, #60]	; 0x3c
 8004218:	4b9e      	ldr	r3, [pc, #632]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800421a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	055b      	lsls	r3, r3, #21
 8004220:	4013      	ands	r3, r2
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004226:	183b      	adds	r3, r7, r0
 8004228:	2201      	movs	r2, #1
 800422a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800422c:	4b9a      	ldr	r3, [pc, #616]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4b99      	ldr	r3, [pc, #612]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004232:	2180      	movs	r1, #128	; 0x80
 8004234:	0049      	lsls	r1, r1, #1
 8004236:	430a      	orrs	r2, r1
 8004238:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800423a:	f7fd fd2b 	bl	8001c94 <HAL_GetTick>
 800423e:	0003      	movs	r3, r0
 8004240:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004242:	e00b      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004244:	f7fd fd26 	bl	8001c94 <HAL_GetTick>
 8004248:	0002      	movs	r2, r0
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d904      	bls.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004252:	2313      	movs	r3, #19
 8004254:	18fb      	adds	r3, r7, r3
 8004256:	2203      	movs	r2, #3
 8004258:	701a      	strb	r2, [r3, #0]
        break;
 800425a:	e005      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800425c:	4b8e      	ldr	r3, [pc, #568]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	2380      	movs	r3, #128	; 0x80
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4013      	ands	r3, r2
 8004266:	d0ed      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004268:	2313      	movs	r3, #19
 800426a:	18fb      	adds	r3, r7, r3
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d154      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004272:	4b88      	ldr	r3, [pc, #544]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004274:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004276:	23c0      	movs	r3, #192	; 0xc0
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4013      	ands	r3, r2
 800427c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d019      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	429a      	cmp	r2, r3
 800428c:	d014      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800428e:	4b81      	ldr	r3, [pc, #516]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004292:	4a82      	ldr	r2, [pc, #520]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004294:	4013      	ands	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004298:	4b7e      	ldr	r3, [pc, #504]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800429a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800429c:	4b7d      	ldr	r3, [pc, #500]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800429e:	2180      	movs	r1, #128	; 0x80
 80042a0:	0249      	lsls	r1, r1, #9
 80042a2:	430a      	orrs	r2, r1
 80042a4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042a6:	4b7b      	ldr	r3, [pc, #492]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042aa:	4b7a      	ldr	r3, [pc, #488]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042ac:	497c      	ldr	r1, [pc, #496]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80042ae:	400a      	ands	r2, r1
 80042b0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042b2:	4b78      	ldr	r3, [pc, #480]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2201      	movs	r2, #1
 80042bc:	4013      	ands	r3, r2
 80042be:	d016      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fd fce8 	bl	8001c94 <HAL_GetTick>
 80042c4:	0003      	movs	r3, r0
 80042c6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c8:	e00c      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ca:	f7fd fce3 	bl	8001c94 <HAL_GetTick>
 80042ce:	0002      	movs	r2, r0
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	4a73      	ldr	r2, [pc, #460]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d904      	bls.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80042da:	2313      	movs	r3, #19
 80042dc:	18fb      	adds	r3, r7, r3
 80042de:	2203      	movs	r2, #3
 80042e0:	701a      	strb	r2, [r3, #0]
            break;
 80042e2:	e004      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e4:	4b6b      	ldr	r3, [pc, #428]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e8:	2202      	movs	r2, #2
 80042ea:	4013      	ands	r3, r2
 80042ec:	d0ed      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80042ee:	2313      	movs	r3, #19
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f8:	4b66      	ldr	r3, [pc, #408]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fc:	4a67      	ldr	r2, [pc, #412]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80042fe:	4013      	ands	r3, r2
 8004300:	0019      	movs	r1, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004306:	4b63      	ldr	r3, [pc, #396]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004308:	430a      	orrs	r2, r1
 800430a:	65da      	str	r2, [r3, #92]	; 0x5c
 800430c:	e00c      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800430e:	2312      	movs	r3, #18
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	2213      	movs	r2, #19
 8004314:	18ba      	adds	r2, r7, r2
 8004316:	7812      	ldrb	r2, [r2, #0]
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	e005      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431c:	2312      	movs	r3, #18
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	2213      	movs	r2, #19
 8004322:	18ba      	adds	r2, r7, r2
 8004324:	7812      	ldrb	r2, [r2, #0]
 8004326:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004328:	2311      	movs	r3, #17
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d105      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004332:	4b58      	ldr	r3, [pc, #352]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004336:	4b57      	ldr	r3, [pc, #348]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004338:	495b      	ldr	r1, [pc, #364]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800433a:	400a      	ands	r2, r1
 800433c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2201      	movs	r2, #1
 8004344:	4013      	ands	r3, r2
 8004346:	d009      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004348:	4b52      	ldr	r3, [pc, #328]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800434a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434c:	2203      	movs	r2, #3
 800434e:	4393      	bics	r3, r2
 8004350:	0019      	movs	r1, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	4b4f      	ldr	r3, [pc, #316]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004358:	430a      	orrs	r2, r1
 800435a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2210      	movs	r2, #16
 8004362:	4013      	ands	r3, r2
 8004364:	d009      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004366:	4b4b      	ldr	r3, [pc, #300]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436a:	4a50      	ldr	r2, [pc, #320]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800436c:	4013      	ands	r3, r2
 800436e:	0019      	movs	r1, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	4b47      	ldr	r3, [pc, #284]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004376:	430a      	orrs	r2, r1
 8004378:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	2380      	movs	r3, #128	; 0x80
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4013      	ands	r3, r2
 8004384:	d009      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004386:	4b43      	ldr	r3, [pc, #268]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	4a49      	ldr	r2, [pc, #292]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800438c:	4013      	ands	r3, r2
 800438e:	0019      	movs	r1, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	4b3f      	ldr	r3, [pc, #252]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004396:	430a      	orrs	r2, r1
 8004398:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	4013      	ands	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043a6:	4b3b      	ldr	r3, [pc, #236]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	4a42      	ldr	r2, [pc, #264]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	0019      	movs	r1, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699a      	ldr	r2, [r3, #24]
 80043b4:	4b37      	ldr	r3, [pc, #220]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043b6:	430a      	orrs	r2, r1
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2220      	movs	r2, #32
 80043c0:	4013      	ands	r3, r2
 80043c2:	d009      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043c4:	4b33      	ldr	r3, [pc, #204]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c8:	4a3b      	ldr	r2, [pc, #236]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	0019      	movs	r1, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	4b30      	ldr	r3, [pc, #192]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043d4:	430a      	orrs	r2, r1
 80043d6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	01db      	lsls	r3, r3, #7
 80043e0:	4013      	ands	r3, r2
 80043e2:	d015      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043e4:	4b2b      	ldr	r3, [pc, #172]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	0899      	lsrs	r1, r3, #2
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69da      	ldr	r2, [r3, #28]
 80043f0:	4b28      	ldr	r3, [pc, #160]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043f2:	430a      	orrs	r2, r1
 80043f4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69da      	ldr	r2, [r3, #28]
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	05db      	lsls	r3, r3, #23
 80043fe:	429a      	cmp	r2, r3
 8004400:	d106      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004402:	4b24      	ldr	r3, [pc, #144]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	4b23      	ldr	r3, [pc, #140]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004408:	2180      	movs	r1, #128	; 0x80
 800440a:	0249      	lsls	r1, r1, #9
 800440c:	430a      	orrs	r2, r1
 800440e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	039b      	lsls	r3, r3, #14
 8004418:	4013      	ands	r3, r2
 800441a:	d016      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800441c:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800441e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004420:	4a26      	ldr	r2, [pc, #152]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004422:	4013      	ands	r3, r2
 8004424:	0019      	movs	r1, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1a      	ldr	r2, [r3, #32]
 800442a:	4b1a      	ldr	r3, [pc, #104]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800442c:	430a      	orrs	r2, r1
 800442e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1a      	ldr	r2, [r3, #32]
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	03db      	lsls	r3, r3, #15
 8004438:	429a      	cmp	r2, r3
 800443a:	d106      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800443c:	4b15      	ldr	r3, [pc, #84]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	4b14      	ldr	r3, [pc, #80]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004442:	2180      	movs	r1, #128	; 0x80
 8004444:	0449      	lsls	r1, r1, #17
 8004446:	430a      	orrs	r2, r1
 8004448:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	4013      	ands	r3, r2
 8004454:	d016      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004456:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	4a19      	ldr	r2, [pc, #100]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800445c:	4013      	ands	r3, r2
 800445e:	0019      	movs	r1, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004466:	430a      	orrs	r2, r1
 8004468:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	01db      	lsls	r3, r3, #7
 8004472:	429a      	cmp	r2, r3
 8004474:	d106      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004476:	4b07      	ldr	r3, [pc, #28]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	4b06      	ldr	r3, [pc, #24]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800447c:	2180      	movs	r1, #128	; 0x80
 800447e:	0249      	lsls	r1, r1, #9
 8004480:	430a      	orrs	r2, r1
 8004482:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004484:	2312      	movs	r3, #18
 8004486:	18fb      	adds	r3, r7, r3
 8004488:	781b      	ldrb	r3, [r3, #0]
}
 800448a:	0018      	movs	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	b006      	add	sp, #24
 8004490:	bd80      	pop	{r7, pc}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	40021000 	.word	0x40021000
 8004498:	40007000 	.word	0x40007000
 800449c:	fffffcff 	.word	0xfffffcff
 80044a0:	fffeffff 	.word	0xfffeffff
 80044a4:	00001388 	.word	0x00001388
 80044a8:	efffffff 	.word	0xefffffff
 80044ac:	fffff3ff 	.word	0xfffff3ff
 80044b0:	fff3ffff 	.word	0xfff3ffff
 80044b4:	ffcfffff 	.word	0xffcfffff
 80044b8:	ffffcfff 	.word	0xffffcfff
 80044bc:	ffbfffff 	.word	0xffbfffff
 80044c0:	ffff3fff 	.word	0xffff3fff

080044c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e04a      	b.n	800456c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	223d      	movs	r2, #61	; 0x3d
 80044da:	5c9b      	ldrb	r3, [r3, r2]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d107      	bne.n	80044f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	223c      	movs	r2, #60	; 0x3c
 80044e6:	2100      	movs	r1, #0
 80044e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f7fd fa93 	bl	8001a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	223d      	movs	r2, #61	; 0x3d
 80044f6:	2102      	movs	r1, #2
 80044f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3304      	adds	r3, #4
 8004502:	0019      	movs	r1, r3
 8004504:	0010      	movs	r0, r2
 8004506:	f000 fa87 	bl	8004a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2248      	movs	r2, #72	; 0x48
 800450e:	2101      	movs	r1, #1
 8004510:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	223e      	movs	r2, #62	; 0x3e
 8004516:	2101      	movs	r1, #1
 8004518:	5499      	strb	r1, [r3, r2]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	223f      	movs	r2, #63	; 0x3f
 800451e:	2101      	movs	r1, #1
 8004520:	5499      	strb	r1, [r3, r2]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2240      	movs	r2, #64	; 0x40
 8004526:	2101      	movs	r1, #1
 8004528:	5499      	strb	r1, [r3, r2]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2241      	movs	r2, #65	; 0x41
 800452e:	2101      	movs	r1, #1
 8004530:	5499      	strb	r1, [r3, r2]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2242      	movs	r2, #66	; 0x42
 8004536:	2101      	movs	r1, #1
 8004538:	5499      	strb	r1, [r3, r2]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2243      	movs	r2, #67	; 0x43
 800453e:	2101      	movs	r1, #1
 8004540:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2244      	movs	r2, #68	; 0x44
 8004546:	2101      	movs	r1, #1
 8004548:	5499      	strb	r1, [r3, r2]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2245      	movs	r2, #69	; 0x45
 800454e:	2101      	movs	r1, #1
 8004550:	5499      	strb	r1, [r3, r2]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2246      	movs	r2, #70	; 0x46
 8004556:	2101      	movs	r1, #1
 8004558:	5499      	strb	r1, [r3, r2]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2247      	movs	r2, #71	; 0x47
 800455e:	2101      	movs	r1, #1
 8004560:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	223d      	movs	r2, #61	; 0x3d
 8004566:	2101      	movs	r1, #1
 8004568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	0018      	movs	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	b002      	add	sp, #8
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	223d      	movs	r2, #61	; 0x3d
 8004580:	5c9b      	ldrb	r3, [r3, r2]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	d001      	beq.n	800458c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e035      	b.n	80045f8 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	223d      	movs	r2, #61	; 0x3d
 8004590:	2102      	movs	r1, #2
 8004592:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a19      	ldr	r2, [pc, #100]	; (8004600 <HAL_TIM_Base_Start+0x8c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00a      	beq.n	80045b4 <HAL_TIM_Base_Start+0x40>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	2380      	movs	r3, #128	; 0x80
 80045a4:	05db      	lsls	r3, r3, #23
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d004      	beq.n	80045b4 <HAL_TIM_Base_Start+0x40>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a15      	ldr	r2, [pc, #84]	; (8004604 <HAL_TIM_Base_Start+0x90>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d116      	bne.n	80045e2 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	4a13      	ldr	r2, [pc, #76]	; (8004608 <HAL_TIM_Base_Start+0x94>)
 80045bc:	4013      	ands	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b06      	cmp	r3, #6
 80045c4:	d016      	beq.n	80045f4 <HAL_TIM_Base_Start+0x80>
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	2380      	movs	r3, #128	; 0x80
 80045ca:	025b      	lsls	r3, r3, #9
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d011      	beq.n	80045f4 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2101      	movs	r1, #1
 80045dc:	430a      	orrs	r2, r1
 80045de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e0:	e008      	b.n	80045f4 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2101      	movs	r1, #1
 80045ee:	430a      	orrs	r2, r1
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	e000      	b.n	80045f6 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	0018      	movs	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	b004      	add	sp, #16
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40012c00 	.word	0x40012c00
 8004604:	40000400 	.word	0x40000400
 8004608:	00010007 	.word	0x00010007

0800460c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2202      	movs	r2, #2
 8004628:	4013      	ands	r3, r2
 800462a:	d021      	beq.n	8004670 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2202      	movs	r2, #2
 8004630:	4013      	ands	r3, r2
 8004632:	d01d      	beq.n	8004670 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2203      	movs	r2, #3
 800463a:	4252      	negs	r2, r2
 800463c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	2203      	movs	r2, #3
 800464c:	4013      	ands	r3, r2
 800464e:	d004      	beq.n	800465a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	0018      	movs	r0, r3
 8004654:	f000 f9c8 	bl	80049e8 <HAL_TIM_IC_CaptureCallback>
 8004658:	e007      	b.n	800466a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	0018      	movs	r0, r3
 800465e:	f000 f9bb 	bl	80049d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	0018      	movs	r0, r3
 8004666:	f000 f9c7 	bl	80049f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2204      	movs	r2, #4
 8004674:	4013      	ands	r3, r2
 8004676:	d022      	beq.n	80046be <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2204      	movs	r2, #4
 800467c:	4013      	ands	r3, r2
 800467e:	d01e      	beq.n	80046be <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2205      	movs	r2, #5
 8004686:	4252      	negs	r2, r2
 8004688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699a      	ldr	r2, [r3, #24]
 8004696:	23c0      	movs	r3, #192	; 0xc0
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4013      	ands	r3, r2
 800469c:	d004      	beq.n	80046a8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	0018      	movs	r0, r3
 80046a2:	f000 f9a1 	bl	80049e8 <HAL_TIM_IC_CaptureCallback>
 80046a6:	e007      	b.n	80046b8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	0018      	movs	r0, r3
 80046ac:	f000 f994 	bl	80049d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	0018      	movs	r0, r3
 80046b4:	f000 f9a0 	bl	80049f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2208      	movs	r2, #8
 80046c2:	4013      	ands	r3, r2
 80046c4:	d021      	beq.n	800470a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2208      	movs	r2, #8
 80046ca:	4013      	ands	r3, r2
 80046cc:	d01d      	beq.n	800470a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2209      	movs	r2, #9
 80046d4:	4252      	negs	r2, r2
 80046d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2204      	movs	r2, #4
 80046dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	2203      	movs	r2, #3
 80046e6:	4013      	ands	r3, r2
 80046e8:	d004      	beq.n	80046f4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	0018      	movs	r0, r3
 80046ee:	f000 f97b 	bl	80049e8 <HAL_TIM_IC_CaptureCallback>
 80046f2:	e007      	b.n	8004704 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	0018      	movs	r0, r3
 80046f8:	f000 f96e 	bl	80049d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	0018      	movs	r0, r3
 8004700:	f000 f97a 	bl	80049f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2210      	movs	r2, #16
 800470e:	4013      	ands	r3, r2
 8004710:	d022      	beq.n	8004758 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2210      	movs	r2, #16
 8004716:	4013      	ands	r3, r2
 8004718:	d01e      	beq.n	8004758 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2211      	movs	r2, #17
 8004720:	4252      	negs	r2, r2
 8004722:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2208      	movs	r2, #8
 8004728:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	23c0      	movs	r3, #192	; 0xc0
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4013      	ands	r3, r2
 8004736:	d004      	beq.n	8004742 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	0018      	movs	r0, r3
 800473c:	f000 f954 	bl	80049e8 <HAL_TIM_IC_CaptureCallback>
 8004740:	e007      	b.n	8004752 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	0018      	movs	r0, r3
 8004746:	f000 f947 	bl	80049d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	0018      	movs	r0, r3
 800474e:	f000 f953 	bl	80049f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2201      	movs	r2, #1
 800475c:	4013      	ands	r3, r2
 800475e:	d00c      	beq.n	800477a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	4013      	ands	r3, r2
 8004766:	d008      	beq.n	800477a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2202      	movs	r2, #2
 800476e:	4252      	negs	r2, r2
 8004770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	0018      	movs	r0, r3
 8004776:	f000 f927 	bl	80049c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2280      	movs	r2, #128	; 0x80
 800477e:	4013      	ands	r3, r2
 8004780:	d104      	bne.n	800478c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	2380      	movs	r3, #128	; 0x80
 8004786:	019b      	lsls	r3, r3, #6
 8004788:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800478a:	d00b      	beq.n	80047a4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2280      	movs	r2, #128	; 0x80
 8004790:	4013      	ands	r3, r2
 8004792:	d007      	beq.n	80047a4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1e      	ldr	r2, [pc, #120]	; (8004814 <HAL_TIM_IRQHandler+0x208>)
 800479a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	0018      	movs	r0, r3
 80047a0:	f000 faca 	bl	8004d38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	2380      	movs	r3, #128	; 0x80
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	4013      	ands	r3, r2
 80047ac:	d00b      	beq.n	80047c6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2280      	movs	r2, #128	; 0x80
 80047b2:	4013      	ands	r3, r2
 80047b4:	d007      	beq.n	80047c6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a17      	ldr	r2, [pc, #92]	; (8004818 <HAL_TIM_IRQHandler+0x20c>)
 80047bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0018      	movs	r0, r3
 80047c2:	f000 fac1 	bl	8004d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2240      	movs	r2, #64	; 0x40
 80047ca:	4013      	ands	r3, r2
 80047cc:	d00c      	beq.n	80047e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2240      	movs	r2, #64	; 0x40
 80047d2:	4013      	ands	r3, r2
 80047d4:	d008      	beq.n	80047e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2241      	movs	r2, #65	; 0x41
 80047dc:	4252      	negs	r2, r2
 80047de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	0018      	movs	r0, r3
 80047e4:	f000 f910 	bl	8004a08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2220      	movs	r2, #32
 80047ec:	4013      	ands	r3, r2
 80047ee:	d00c      	beq.n	800480a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	4013      	ands	r3, r2
 80047f6:	d008      	beq.n	800480a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2221      	movs	r2, #33	; 0x21
 80047fe:	4252      	negs	r2, r2
 8004800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	0018      	movs	r0, r3
 8004806:	f000 fa8f 	bl	8004d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	46bd      	mov	sp, r7
 800480e:	b004      	add	sp, #16
 8004810:	bd80      	pop	{r7, pc}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	ffffdf7f 	.word	0xffffdf7f
 8004818:	fffffeff 	.word	0xfffffeff

0800481c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004826:	230f      	movs	r3, #15
 8004828:	18fb      	adds	r3, r7, r3
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	223c      	movs	r2, #60	; 0x3c
 8004832:	5c9b      	ldrb	r3, [r3, r2]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_TIM_ConfigClockSource+0x20>
 8004838:	2302      	movs	r3, #2
 800483a:	e0bc      	b.n	80049b6 <HAL_TIM_ConfigClockSource+0x19a>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	223c      	movs	r2, #60	; 0x3c
 8004840:	2101      	movs	r1, #1
 8004842:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	223d      	movs	r2, #61	; 0x3d
 8004848:	2102      	movs	r1, #2
 800484a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4a5a      	ldr	r2, [pc, #360]	; (80049c0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004858:	4013      	ands	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4a59      	ldr	r2, [pc, #356]	; (80049c4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004860:	4013      	ands	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2280      	movs	r2, #128	; 0x80
 8004872:	0192      	lsls	r2, r2, #6
 8004874:	4293      	cmp	r3, r2
 8004876:	d040      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0xde>
 8004878:	2280      	movs	r2, #128	; 0x80
 800487a:	0192      	lsls	r2, r2, #6
 800487c:	4293      	cmp	r3, r2
 800487e:	d900      	bls.n	8004882 <HAL_TIM_ConfigClockSource+0x66>
 8004880:	e088      	b.n	8004994 <HAL_TIM_ConfigClockSource+0x178>
 8004882:	2280      	movs	r2, #128	; 0x80
 8004884:	0152      	lsls	r2, r2, #5
 8004886:	4293      	cmp	r3, r2
 8004888:	d100      	bne.n	800488c <HAL_TIM_ConfigClockSource+0x70>
 800488a:	e088      	b.n	800499e <HAL_TIM_ConfigClockSource+0x182>
 800488c:	2280      	movs	r2, #128	; 0x80
 800488e:	0152      	lsls	r2, r2, #5
 8004890:	4293      	cmp	r3, r2
 8004892:	d900      	bls.n	8004896 <HAL_TIM_ConfigClockSource+0x7a>
 8004894:	e07e      	b.n	8004994 <HAL_TIM_ConfigClockSource+0x178>
 8004896:	2b70      	cmp	r3, #112	; 0x70
 8004898:	d018      	beq.n	80048cc <HAL_TIM_ConfigClockSource+0xb0>
 800489a:	d900      	bls.n	800489e <HAL_TIM_ConfigClockSource+0x82>
 800489c:	e07a      	b.n	8004994 <HAL_TIM_ConfigClockSource+0x178>
 800489e:	2b60      	cmp	r3, #96	; 0x60
 80048a0:	d04f      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x126>
 80048a2:	d900      	bls.n	80048a6 <HAL_TIM_ConfigClockSource+0x8a>
 80048a4:	e076      	b.n	8004994 <HAL_TIM_ConfigClockSource+0x178>
 80048a6:	2b50      	cmp	r3, #80	; 0x50
 80048a8:	d03b      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x106>
 80048aa:	d900      	bls.n	80048ae <HAL_TIM_ConfigClockSource+0x92>
 80048ac:	e072      	b.n	8004994 <HAL_TIM_ConfigClockSource+0x178>
 80048ae:	2b40      	cmp	r3, #64	; 0x40
 80048b0:	d057      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x146>
 80048b2:	d900      	bls.n	80048b6 <HAL_TIM_ConfigClockSource+0x9a>
 80048b4:	e06e      	b.n	8004994 <HAL_TIM_ConfigClockSource+0x178>
 80048b6:	2b30      	cmp	r3, #48	; 0x30
 80048b8:	d063      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x166>
 80048ba:	d86b      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x178>
 80048bc:	2b20      	cmp	r3, #32
 80048be:	d060      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x166>
 80048c0:	d868      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x178>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d05d      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x166>
 80048c6:	2b10      	cmp	r3, #16
 80048c8:	d05b      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x166>
 80048ca:	e063      	b.n	8004994 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048dc:	f000 f99c 	bl	8004c18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2277      	movs	r2, #119	; 0x77
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	609a      	str	r2, [r3, #8]
      break;
 80048f8:	e052      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800490a:	f000 f985 	bl	8004c18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2180      	movs	r1, #128	; 0x80
 800491a:	01c9      	lsls	r1, r1, #7
 800491c:	430a      	orrs	r2, r1
 800491e:	609a      	str	r2, [r3, #8]
      break;
 8004920:	e03e      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800492e:	001a      	movs	r2, r3
 8004930:	f000 f8f6 	bl	8004b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2150      	movs	r1, #80	; 0x50
 800493a:	0018      	movs	r0, r3
 800493c:	f000 f950 	bl	8004be0 <TIM_ITRx_SetConfig>
      break;
 8004940:	e02e      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800494e:	001a      	movs	r2, r3
 8004950:	f000 f914 	bl	8004b7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2160      	movs	r1, #96	; 0x60
 800495a:	0018      	movs	r0, r3
 800495c:	f000 f940 	bl	8004be0 <TIM_ITRx_SetConfig>
      break;
 8004960:	e01e      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800496e:	001a      	movs	r2, r3
 8004970:	f000 f8d6 	bl	8004b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2140      	movs	r1, #64	; 0x40
 800497a:	0018      	movs	r0, r3
 800497c:	f000 f930 	bl	8004be0 <TIM_ITRx_SetConfig>
      break;
 8004980:	e00e      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	0019      	movs	r1, r3
 800498c:	0010      	movs	r0, r2
 800498e:	f000 f927 	bl	8004be0 <TIM_ITRx_SetConfig>
      break;
 8004992:	e005      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004994:	230f      	movs	r3, #15
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	2201      	movs	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]
      break;
 800499c:	e000      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800499e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	223d      	movs	r2, #61	; 0x3d
 80049a4:	2101      	movs	r1, #1
 80049a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	223c      	movs	r2, #60	; 0x3c
 80049ac:	2100      	movs	r1, #0
 80049ae:	5499      	strb	r1, [r3, r2]

  return status;
 80049b0:	230f      	movs	r3, #15
 80049b2:	18fb      	adds	r3, r7, r3
 80049b4:	781b      	ldrb	r3, [r3, #0]
}
 80049b6:	0018      	movs	r0, r3
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b004      	add	sp, #16
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	ffceff88 	.word	0xffceff88
 80049c4:	ffff00ff 	.word	0xffff00ff

080049c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80049d0:	46c0      	nop			; (mov r8, r8)
 80049d2:	46bd      	mov	sp, r7
 80049d4:	b002      	add	sp, #8
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b002      	add	sp, #8
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049f0:	46c0      	nop			; (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b002      	add	sp, #8
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b002      	add	sp, #8
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a10:	46c0      	nop			; (mov r8, r8)
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b002      	add	sp, #8
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a37      	ldr	r2, [pc, #220]	; (8004b08 <TIM_Base_SetConfig+0xf0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d008      	beq.n	8004a42 <TIM_Base_SetConfig+0x2a>
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	2380      	movs	r3, #128	; 0x80
 8004a34:	05db      	lsls	r3, r3, #23
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d003      	beq.n	8004a42 <TIM_Base_SetConfig+0x2a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a33      	ldr	r2, [pc, #204]	; (8004b0c <TIM_Base_SetConfig+0xf4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d108      	bne.n	8004a54 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2270      	movs	r2, #112	; 0x70
 8004a46:	4393      	bics	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a2c      	ldr	r2, [pc, #176]	; (8004b08 <TIM_Base_SetConfig+0xf0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d014      	beq.n	8004a86 <TIM_Base_SetConfig+0x6e>
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	2380      	movs	r3, #128	; 0x80
 8004a60:	05db      	lsls	r3, r3, #23
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d00f      	beq.n	8004a86 <TIM_Base_SetConfig+0x6e>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a28      	ldr	r2, [pc, #160]	; (8004b0c <TIM_Base_SetConfig+0xf4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00b      	beq.n	8004a86 <TIM_Base_SetConfig+0x6e>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a27      	ldr	r2, [pc, #156]	; (8004b10 <TIM_Base_SetConfig+0xf8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d007      	beq.n	8004a86 <TIM_Base_SetConfig+0x6e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a26      	ldr	r2, [pc, #152]	; (8004b14 <TIM_Base_SetConfig+0xfc>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d003      	beq.n	8004a86 <TIM_Base_SetConfig+0x6e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a25      	ldr	r2, [pc, #148]	; (8004b18 <TIM_Base_SetConfig+0x100>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d108      	bne.n	8004a98 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4a24      	ldr	r2, [pc, #144]	; (8004b1c <TIM_Base_SetConfig+0x104>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2280      	movs	r2, #128	; 0x80
 8004a9c:	4393      	bics	r3, r2
 8004a9e:	001a      	movs	r2, r3
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a11      	ldr	r2, [pc, #68]	; (8004b08 <TIM_Base_SetConfig+0xf0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d007      	beq.n	8004ad6 <TIM_Base_SetConfig+0xbe>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a12      	ldr	r2, [pc, #72]	; (8004b14 <TIM_Base_SetConfig+0xfc>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d003      	beq.n	8004ad6 <TIM_Base_SetConfig+0xbe>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a11      	ldr	r2, [pc, #68]	; (8004b18 <TIM_Base_SetConfig+0x100>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d103      	bne.n	8004ade <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	691a      	ldr	r2, [r3, #16]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d106      	bne.n	8004afe <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	2201      	movs	r2, #1
 8004af6:	4393      	bics	r3, r2
 8004af8:	001a      	movs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	611a      	str	r2, [r3, #16]
  }
}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b004      	add	sp, #16
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	40012c00 	.word	0x40012c00
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	40002000 	.word	0x40002000
 8004b14:	40014400 	.word	0x40014400
 8004b18:	40014800 	.word	0x40014800
 8004b1c:	fffffcff 	.word	0xfffffcff

08004b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	2201      	movs	r2, #1
 8004b38:	4393      	bics	r3, r2
 8004b3a:	001a      	movs	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	22f0      	movs	r2, #240	; 0xf0
 8004b4a:	4393      	bics	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	220a      	movs	r2, #10
 8004b5c:	4393      	bics	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	621a      	str	r2, [r3, #32]
}
 8004b74:	46c0      	nop			; (mov r8, r8)
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b006      	add	sp, #24
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	2210      	movs	r2, #16
 8004b94:	4393      	bics	r3, r2
 8004b96:	001a      	movs	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	4a0d      	ldr	r2, [pc, #52]	; (8004bdc <TIM_TI2_ConfigInputStage+0x60>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	031b      	lsls	r3, r3, #12
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	22a0      	movs	r2, #160	; 0xa0
 8004bb8:	4393      	bics	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	621a      	str	r2, [r3, #32]
}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	b006      	add	sp, #24
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	ffff0fff 	.word	0xffff0fff

08004be0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4a08      	ldr	r2, [pc, #32]	; (8004c14 <TIM_ITRx_SetConfig+0x34>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	2207      	movs	r2, #7
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	609a      	str	r2, [r3, #8]
}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b004      	add	sp, #16
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	ffcfff8f 	.word	0xffcfff8f

08004c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4a09      	ldr	r2, [pc, #36]	; (8004c54 <TIM_ETR_SetConfig+0x3c>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	021a      	lsls	r2, r3, #8
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	609a      	str	r2, [r3, #8]
}
 8004c4c:	46c0      	nop			; (mov r8, r8)
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b006      	add	sp, #24
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	ffff00ff 	.word	0xffff00ff

08004c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	223c      	movs	r2, #60	; 0x3c
 8004c66:	5c9b      	ldrb	r3, [r3, r2]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e050      	b.n	8004d12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	223c      	movs	r2, #60	; 0x3c
 8004c74:	2101      	movs	r1, #1
 8004c76:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	223d      	movs	r2, #61	; 0x3d
 8004c7c:	2102      	movs	r1, #2
 8004c7e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a21      	ldr	r2, [pc, #132]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d108      	bne.n	8004cac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4a20      	ldr	r2, [pc, #128]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2270      	movs	r2, #112	; 0x70
 8004cb0:	4393      	bics	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a14      	ldr	r2, [pc, #80]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00a      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	2380      	movs	r3, #128	; 0x80
 8004cd6:	05db      	lsls	r3, r3, #23
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d004      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a10      	ldr	r2, [pc, #64]	; (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d10c      	bne.n	8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2280      	movs	r2, #128	; 0x80
 8004cea:	4393      	bics	r3, r2
 8004cec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	223d      	movs	r2, #61	; 0x3d
 8004d04:	2101      	movs	r1, #1
 8004d06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	223c      	movs	r2, #60	; 0x3c
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	0018      	movs	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b004      	add	sp, #16
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	ff0fffff 	.word	0xff0fffff
 8004d24:	40000400 	.word	0x40000400

08004d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d30:	46c0      	nop			; (mov r8, r8)
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b002      	add	sp, #8
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d40:	46c0      	nop			; (mov r8, r8)
 8004d42:	46bd      	mov	sp, r7
 8004d44:	b002      	add	sp, #8
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d50:	46c0      	nop			; (mov r8, r8)
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b002      	add	sp, #8
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <memset>:
 8004d58:	0003      	movs	r3, r0
 8004d5a:	1882      	adds	r2, r0, r2
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d100      	bne.n	8004d62 <memset+0xa>
 8004d60:	4770      	bx	lr
 8004d62:	7019      	strb	r1, [r3, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	e7f9      	b.n	8004d5c <memset+0x4>

08004d68 <__libc_init_array>:
 8004d68:	b570      	push	{r4, r5, r6, lr}
 8004d6a:	2600      	movs	r6, #0
 8004d6c:	4c0c      	ldr	r4, [pc, #48]	; (8004da0 <__libc_init_array+0x38>)
 8004d6e:	4d0d      	ldr	r5, [pc, #52]	; (8004da4 <__libc_init_array+0x3c>)
 8004d70:	1b64      	subs	r4, r4, r5
 8004d72:	10a4      	asrs	r4, r4, #2
 8004d74:	42a6      	cmp	r6, r4
 8004d76:	d109      	bne.n	8004d8c <__libc_init_array+0x24>
 8004d78:	2600      	movs	r6, #0
 8004d7a:	f000 f819 	bl	8004db0 <_init>
 8004d7e:	4c0a      	ldr	r4, [pc, #40]	; (8004da8 <__libc_init_array+0x40>)
 8004d80:	4d0a      	ldr	r5, [pc, #40]	; (8004dac <__libc_init_array+0x44>)
 8004d82:	1b64      	subs	r4, r4, r5
 8004d84:	10a4      	asrs	r4, r4, #2
 8004d86:	42a6      	cmp	r6, r4
 8004d88:	d105      	bne.n	8004d96 <__libc_init_array+0x2e>
 8004d8a:	bd70      	pop	{r4, r5, r6, pc}
 8004d8c:	00b3      	lsls	r3, r6, #2
 8004d8e:	58eb      	ldr	r3, [r5, r3]
 8004d90:	4798      	blx	r3
 8004d92:	3601      	adds	r6, #1
 8004d94:	e7ee      	b.n	8004d74 <__libc_init_array+0xc>
 8004d96:	00b3      	lsls	r3, r6, #2
 8004d98:	58eb      	ldr	r3, [r5, r3]
 8004d9a:	4798      	blx	r3
 8004d9c:	3601      	adds	r6, #1
 8004d9e:	e7f2      	b.n	8004d86 <__libc_init_array+0x1e>
 8004da0:	08004e08 	.word	0x08004e08
 8004da4:	08004e08 	.word	0x08004e08
 8004da8:	08004e0c 	.word	0x08004e0c
 8004dac:	08004e08 	.word	0x08004e08

08004db0 <_init>:
 8004db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db6:	bc08      	pop	{r3}
 8004db8:	469e      	mov	lr, r3
 8004dba:	4770      	bx	lr

08004dbc <_fini>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr
